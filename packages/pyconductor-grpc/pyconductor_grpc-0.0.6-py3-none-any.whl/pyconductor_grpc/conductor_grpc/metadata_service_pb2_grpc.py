# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pyconductor_grpc.conductor_grpc import (
    metadata_service_pb2 as conductor__grpc_dot_metadata__service__pb2,
)


class MetadataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateWorkflow = channel.unary_unary(
            "/conductor.grpc.metadata.MetadataService/CreateWorkflow",
            request_serializer=conductor__grpc_dot_metadata__service__pb2.CreateWorkflowRequest.SerializeToString,
            response_deserializer=conductor__grpc_dot_metadata__service__pb2.CreateWorkflowResponse.FromString,
        )
        self.UpdateWorkflows = channel.unary_unary(
            "/conductor.grpc.metadata.MetadataService/UpdateWorkflows",
            request_serializer=conductor__grpc_dot_metadata__service__pb2.UpdateWorkflowsRequest.SerializeToString,
            response_deserializer=conductor__grpc_dot_metadata__service__pb2.UpdateWorkflowsResponse.FromString,
        )
        self.GetWorkflow = channel.unary_unary(
            "/conductor.grpc.metadata.MetadataService/GetWorkflow",
            request_serializer=conductor__grpc_dot_metadata__service__pb2.GetWorkflowRequest.SerializeToString,
            response_deserializer=conductor__grpc_dot_metadata__service__pb2.GetWorkflowResponse.FromString,
        )
        self.CreateTasks = channel.unary_unary(
            "/conductor.grpc.metadata.MetadataService/CreateTasks",
            request_serializer=conductor__grpc_dot_metadata__service__pb2.CreateTasksRequest.SerializeToString,
            response_deserializer=conductor__grpc_dot_metadata__service__pb2.CreateTasksResponse.FromString,
        )
        self.UpdateTask = channel.unary_unary(
            "/conductor.grpc.metadata.MetadataService/UpdateTask",
            request_serializer=conductor__grpc_dot_metadata__service__pb2.UpdateTaskRequest.SerializeToString,
            response_deserializer=conductor__grpc_dot_metadata__service__pb2.UpdateTaskResponse.FromString,
        )
        self.GetTask = channel.unary_unary(
            "/conductor.grpc.metadata.MetadataService/GetTask",
            request_serializer=conductor__grpc_dot_metadata__service__pb2.GetTaskRequest.SerializeToString,
            response_deserializer=conductor__grpc_dot_metadata__service__pb2.GetTaskResponse.FromString,
        )
        self.DeleteTask = channel.unary_unary(
            "/conductor.grpc.metadata.MetadataService/DeleteTask",
            request_serializer=conductor__grpc_dot_metadata__service__pb2.DeleteTaskRequest.SerializeToString,
            response_deserializer=conductor__grpc_dot_metadata__service__pb2.DeleteTaskResponse.FromString,
        )


class MetadataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateWorkflow(self, request, context):
        """POST /workflow"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateWorkflows(self, request, context):
        """PUT /workflow"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetWorkflow(self, request, context):
        """GET /workflow/{name}"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateTasks(self, request, context):
        """POST /taskdefs"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateTask(self, request, context):
        """PUT /taskdefs"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetTask(self, request, context):
        """GET /taskdefs/{tasktype}"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteTask(self, request, context):
        """DELETE /taskdefs/{tasktype}"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MetadataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateWorkflow": grpc.unary_unary_rpc_method_handler(
            servicer.CreateWorkflow,
            request_deserializer=conductor__grpc_dot_metadata__service__pb2.CreateWorkflowRequest.FromString,
            response_serializer=conductor__grpc_dot_metadata__service__pb2.CreateWorkflowResponse.SerializeToString,
        ),
        "UpdateWorkflows": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateWorkflows,
            request_deserializer=conductor__grpc_dot_metadata__service__pb2.UpdateWorkflowsRequest.FromString,
            response_serializer=conductor__grpc_dot_metadata__service__pb2.UpdateWorkflowsResponse.SerializeToString,
        ),
        "GetWorkflow": grpc.unary_unary_rpc_method_handler(
            servicer.GetWorkflow,
            request_deserializer=conductor__grpc_dot_metadata__service__pb2.GetWorkflowRequest.FromString,
            response_serializer=conductor__grpc_dot_metadata__service__pb2.GetWorkflowResponse.SerializeToString,
        ),
        "CreateTasks": grpc.unary_unary_rpc_method_handler(
            servicer.CreateTasks,
            request_deserializer=conductor__grpc_dot_metadata__service__pb2.CreateTasksRequest.FromString,
            response_serializer=conductor__grpc_dot_metadata__service__pb2.CreateTasksResponse.SerializeToString,
        ),
        "UpdateTask": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateTask,
            request_deserializer=conductor__grpc_dot_metadata__service__pb2.UpdateTaskRequest.FromString,
            response_serializer=conductor__grpc_dot_metadata__service__pb2.UpdateTaskResponse.SerializeToString,
        ),
        "GetTask": grpc.unary_unary_rpc_method_handler(
            servicer.GetTask,
            request_deserializer=conductor__grpc_dot_metadata__service__pb2.GetTaskRequest.FromString,
            response_serializer=conductor__grpc_dot_metadata__service__pb2.GetTaskResponse.SerializeToString,
        ),
        "DeleteTask": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteTask,
            request_deserializer=conductor__grpc_dot_metadata__service__pb2.DeleteTaskRequest.FromString,
            response_serializer=conductor__grpc_dot_metadata__service__pb2.DeleteTaskResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "conductor.grpc.metadata.MetadataService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class MetadataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateWorkflow(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/conductor.grpc.metadata.MetadataService/CreateWorkflow",
            conductor__grpc_dot_metadata__service__pb2.CreateWorkflowRequest.SerializeToString,
            conductor__grpc_dot_metadata__service__pb2.CreateWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateWorkflows(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/conductor.grpc.metadata.MetadataService/UpdateWorkflows",
            conductor__grpc_dot_metadata__service__pb2.UpdateWorkflowsRequest.SerializeToString,
            conductor__grpc_dot_metadata__service__pb2.UpdateWorkflowsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetWorkflow(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/conductor.grpc.metadata.MetadataService/GetWorkflow",
            conductor__grpc_dot_metadata__service__pb2.GetWorkflowRequest.SerializeToString,
            conductor__grpc_dot_metadata__service__pb2.GetWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CreateTasks(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/conductor.grpc.metadata.MetadataService/CreateTasks",
            conductor__grpc_dot_metadata__service__pb2.CreateTasksRequest.SerializeToString,
            conductor__grpc_dot_metadata__service__pb2.CreateTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/conductor.grpc.metadata.MetadataService/UpdateTask",
            conductor__grpc_dot_metadata__service__pb2.UpdateTaskRequest.SerializeToString,
            conductor__grpc_dot_metadata__service__pb2.UpdateTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/conductor.grpc.metadata.MetadataService/GetTask",
            conductor__grpc_dot_metadata__service__pb2.GetTaskRequest.SerializeToString,
            conductor__grpc_dot_metadata__service__pb2.GetTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeleteTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/conductor.grpc.metadata.MetadataService/DeleteTask",
            conductor__grpc_dot_metadata__service__pb2.DeleteTaskRequest.SerializeToString,
            conductor__grpc_dot_metadata__service__pb2.DeleteTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
