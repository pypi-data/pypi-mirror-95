Metadata-Version: 2.1
Name: django-talar
Version: 0.4.0rc1
Summary: Django app for Talar.app
Home-page: https://bitbucket.org/rakki-software/django-talar/src/
Author: Talar
Author-email: kamil.obstawski@rakki.xyz
License: UNKNOWN
Description: # django-talar
        
        Django app for [Talar.app](https://talar.app) service.
        
        ## Installation
        
        1. `pip install django-talar`.
        2. Add `django_talar` to your django settings `INSTALLED_APPS`.
        3. Modify code below and also insert it into django settings:
        
            ```python
                TALAR = {
                    'project_id': env.str('TALAR_PROJECT_ID', None),
                    'access_key_id': env.str('TALAR_ACCESS_KEY_ID', None),
                    'access_key': env.str('TALAR_ACCESS_KEY', None),
                }
            ```
        
        4. Include this into your core urls:
        
            ```python
                path('talar/', include(('django_talar.urls', 'talar'))),
            ```
        
        ## Basic usage
        
        django-talar contains basic form `django_talar.forms.PaymentForm` and template
        `django_talar/talar_make_payment.html` for making payments. It is suggested to
        use it by adding your own view like so:
        
        ```python
        def make_payment(request):
            data = {
                'external_id': EXTERNAL_ID, # You order/payment unique key that will be used to identify payment
                'amount': AMOUNT, # your data
                'currency': CURRENCY, # your data
                'continue_url': CONTINUE_URL, # Insert address for redirection after successfull payment
            }
        
            talar = Talar()
            url = talar.url
            data = talar.create_payment_data(data)
        
            payment_form = PaymentForm(data={
                'key_id': talar.access_key_id,
                'encrypted': data
            })
        
            return render(request, 'django_talar/make_payment.html', {
                'url': url,
                'payment_form': payment_form
            })
        ```
        
        html code will handle redirection if everything is correct:
        
        ```html
            <div>
                <p>{% trans 'After continuing you will be redirected to payment provider site.' %}</p>
                <form action="{{ url }}" method="post" class="form-inline">
                    {{ payment_form.as_p }}
                    <button type=submit class="btn btn-primary">{% trans 'Pay' %}</button>
                </form>
            </div>
        ```
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
