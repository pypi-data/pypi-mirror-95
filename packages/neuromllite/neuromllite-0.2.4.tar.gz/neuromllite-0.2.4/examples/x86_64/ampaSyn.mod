TITLE Mod file for component: Component(id=ampaSyn type=alphaCondSynapse)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.7.1
         org.neuroml.model   v1.7.1
         jLEMS               v0.10.3

ENDCOMMENT

NEURON {
    POINT_PROCESS ampaSyn
    RANGE e_rev                             : parameter
    RANGE tau_syn                           : parameter
    RANGE MSEC                              : parameter
    RANGE MVOLT                             : parameter
    RANGE NAMP                              : parameter
    
    RANGE i                                 : exposure
    
    
    NONSPECIFIC_CURRENT i 
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    e_rev = -10 
    tau_syn = 2 
    MSEC = 1 (ms)
    MVOLT = 1 (mV)
    NAMP = 1 (nA)
}

ASSIGNED {
    ? Standard Assigned variables with baseSynapse
    v (mV)
    celsius (degC)
    temperature (K)
    
    i (nA)                                 : derived variable
    rate_g (/ms)
    rate_A (/ms)
    
}

STATE {
    g  
    A  
    
}

INITIAL {
    temperature = celsius + 273.15
    
    rates()
    rates() ? To ensure correct initialisation.
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    
}

NET_RECEIVE(weight) {
    
    : paramMappings . : {ampaSyn={g=g, A=A, e_rev=e_rev, tau_syn=tau_syn, MSEC=MSEC, MVOLT=MVOLT, NAMP=NAMP, i=i}}
    : state_discontinuity(A, A  + weight) : From ampaSyn
    A = A  + weight : From ampaSyn
    
}

DERIVATIVE states {
    rates()
    g' = rate_g 
    A' = rate_A 
    
}

PROCEDURE rates() {
    
    i = -1 * g  * (  e_rev   - (v/  MVOLT  )) *  NAMP ? evaluable
    rate_g = (2.7182818*  A   -   g  )/(  tau_syn  *  MSEC  ) ? Note units of all quantities used here need to be consistent!
    rate_A = -  A   /(  tau_syn  *  MSEC  ) ? Note units of all quantities used here need to be consistent!
    
     
    
}

