from numpy import (
    bool_,
    float64,
    int64,
)
from typing import (
    Any,
    List,
    Tuple,
    Union,
    Sequence,
    Iterable
)


Number = Union[float, float64, int, int64]
Point = Sequence[Number]


def _select_rec(
    intervals: List[Tuple[Interval, Interval]],
    j: int,
    lo: List[Number],
    hi: List[Number]
) -> Rec: ...


def to_rec(intervals: Any, error: Number = ...) -> Rec: ...


def unit_rec(n: int) -> Rec: ...


class Interval:
    def __and__(self, i2: Interval) -> Interval: ...
    def __contains__(self, x: Number) -> bool: ...
    def __iter__(self) -> None: ...
    def __or__(self, i2: Interval) -> Interval: ...
    @property
    def center(self) -> Number: ...
    @property
    def radius(self) -> Number: ...


class Rec:
    def __and__(self, other: Rec) -> Rec: ...
    def __contains__(self, r: Union[Point, Rec]) -> bool: ...
    def backward_cone(self, p: Any) -> Rec: ...
    @property
    def bot(self) -> Point: ...
    @property
    def center(self) -> Point: ...
    @property
    def corners(self) -> frozenset: ...
    @property
    def diag(self) -> Point: ...
    @property
    def dim(self) -> int: ...
    def forward_cone(self, p: Point) -> Rec: ...
    @property
    def is_point(r: Rec) -> bool: ...
    @property
    def shortest_edge(self) -> Number: ...
    def subdivide(self, rec2: Rec, drop_fb: bool = ...) -> Iterable[Rec]: ...
    def sup(self, other: Rec) -> Rec: ...
    @property
    def top(self) -> Any: ...
    @property
    def volume(self) -> Number: ...
