# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['cbinterface']

package_data = \
{'': ['*']}

install_requires = \
['argcomplete>=1.12.2,<2.0.0', 'cbapi>=1.7.3,<2.0.0', 'coloredlogs>=15.0,<16.0']

entry_points = \
{'console_scripts': ['cbinterface = cbinterface.cli:main']}

setup_kwargs = {
    'name': 'cbinterface',
    'version': '2.0.3',
    'description': 'command line tool for interfacing with multiple carbonblack environments to perform analysis and live response functions',
    'long_description': '# cbinterface\n\ncbinterface is a command line tool for interfacing with multiple carbonblack environments to perform analysis and live response functions.\n\nUse `cbinterface` as a library or on the command line as `cbinterface`.\n\n# Install\n\n## Via pip\n\n```bash\npip install cbinterface\n```\n\n## Direct from Github\n\n# Querying\n\nYou can query processes and sensors. By default, on the command line, `cbinterface` will warn you before printing a lot of results to the screen.\n\n**NOTE**: Use the `-ad` (`--all-details`) option to print all fields on the command line.\n\n## Query Processes\n\n```\n$cbinterface query \'parent_name:svchost.exe process_name:rundll32.exe cmdline:AutoRun.inf\'\n2021-02-10 04:00:10 analysis cbinterface.cli[7211] INFO searching acmecomp environment..\n2021-02-10 04:00:10 analysis cbinterface.query[7211] INFO got 27 process results grouped by id.\nPrint all results? (y/n) [y] y\n\n------------------------- QUERY RESULTS -------------------------\n\n  -------------------------\n  Process GUID: 000059af-0000-2e74-01d6-ff16835f6f89\n  Process Name: rundll32.exe\n  Process PID: 11892\n  Process MD5: 80f8e0c26028e83f1ef371d7b44de3df\n  Process Path: c:\\windows\\system32\\rundll32.exe\n  Process Status: Terminated\n  Command Line: rundll32.exe C:\\WINDOWS\\system32\\davclnt.dll,DavSetCookie removedName http://serverName/folder/process/AutoRun.inf\n  Parent Name: svchost.exe\n  Parent GUID: 000059af-0000-4428-01d6-f96379775e63\n  Hostname: computer00601\n  Username: DOMAIN\\Pete\n  Start Time: 2021-02-09 19:05:21.244000\n  Last Update Time: 2021-02-09 19:05:21.715000\n  Sensor ID: 32958\n  Comms IP: 192.168.252.192\n  Interface IP: 192.168.252.192\n  GUI Link: https://carbonblack.acmecomp/#analyze/000059af-0000-2e74-01d6-ff16835f6f89/1612897752481\n\n  -------------------------\n  Process GUID: 00006a99-0000-59ac-01d6-feff3879acfd\n  Process Name: rundll32.exe\n  Process PID: 22956\n  Process MD5: 80f8e0c26028e83f1ef371d7b44de3df\n  Process Path: c:\\windows\\system32\\rundll32.exe\n  Process Status: Terminated\n  Command Line: rundll32.exe C:\\WINDOWS\\system32\\davclnt.dll,DavSetCookie serverName http://example.com/folder/AutoRun.inf\n  Parent Name: svchost.exe\n  Parent GUID: 00006a99-0000-5448-01d6-fed7b2708931\n  Hostname: computer01035\n  Username: DOMAIN\\Sara\n  Start Time: 2021-02-09 16:18:37.162000\n  Last Update Time: 2021-02-09 16:18:37.887000\n  Sensor ID: 47299\n  Comms IP: 185.220.101.14\n  Interface IP: 192.168.1.89\n  GUI Link: https://carbonblack.acmecomp/#analyze/00006a99-0000-59ac-01d6-feff3879acfd/1612887600302\n\n<cut>\n```\n\n### Get Facet Data\n\nUse the `--facets` option to get facet data on the command line.\n\n`cbinterface query \'parent_name:svchost.exe process_name:rundll32.exe cmdline:AutoRun.inf\' --facets`\n\nExample:\n\n```\n$ cbinterface query \'parent_name:svchost.exe process_name:rundll32.exe cmdline:AutoRun.inf\'  --facets \n2021-02-10 03:53:21 analysis cbinterface.cli[5789] INFO searching acmecompany environment..\n2021-02-10 03:53:21 analysis cbinterface.query[5789] INFO got 27 process results grouped by id.\n2021-02-10 03:53:21 analysis cbinterface.cli[5789] INFO getting facet data...\n\n------------------------- FACET HISTOGRAMS -------------------------\n\n\t\t\tprocess_md5 results: 1\n\t\t\t--------------------------\n                  80f8e0c26028e83f1ef371d7b44de3df:    27 100.0% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n\n\n\t\t\thostname results: 6\n\t\t\t--------------------------\n                                    computer012303:    10  37.0% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n                                    computer012550:    10  37.0% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n                                    computer012367:     3  11.1% ■■■■■■■■■■■■■■■\n                                    computer012345:     2   7.4% ■■■■■■■■■■\n                                    computer006070:     1   3.7% ■■■■■\n                                    computer012307:     1   3.7% ■■■■■\n\n\n\t\t\tgroup results: 1\n\t\t\t--------------------------\n                        corporate windows desktops:    27 100.0% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n\n\n\t\t\tpath_full results: 1\n\t\t\t--------------------------\n                  c:\\windows\\system32\\rundll32.exe:    27 100.0% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n\n\n\t\t\tparent_name results: 1\n\t\t\t--------------------------\n                                       svchost.exe:    27 100.0% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n\n\n\t\t\tprocess_name results: 1\n\t\t\t--------------------------\n                                      rundll32.exe:    27 100.0% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n\n\n\t\t\thost_type results: 1\n\t\t\t--------------------------\n                                       workstation:    27 100.0% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n\n\n\t\t\tusername_full results: 6\n\t\t\t--------------------------\n                                DOMAIN\\Fred:    10  37.0% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n                                DOMAIN\\Bart:    10  37.0% ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n                              DOMAIN\\Kilter:     3  11.1% ■■■■■■■■■■■■■■■\n                             DOMAIN\\Sashnal:     2   7.4% ■■■■■■■■■■\n                               DOMAIN\\Hippo:     1   3.7% ■■■■■\n                               DOMAIN\\EvilG:     1   3.7% ■■■■■\n\nPrint all results? (y/n) [y] n\n```\n\n## Query Sensors\n\n```\n$ cbinterface sensor-query hostname:computer012550\n2021-02-10 04:12:43 analysis cbinterface.cli[9812] INFO searching acmecomp environment for sensor query: hostname:computer012550...\n2021-02-10 04:12:43 analysis cbinterface.sensor[9812] INFO got 1 sensor results.\n\n------------------------- SENSOR RESULTS -------------------------\n\nSensor object - https://carbonblack.acmecomp/#/host/30182\n-------------------------------------------------------------------------------\n\tcb_build_version_string: 006.001.009.81012\n\tcomputer_sid: S-1-5-21-3617190964-3928019601-2880162275\n\tcomputer_dns_name: computer012550.zone.acmecomp\n\tcomputer_name: computer012550\n\tos_environment_display_string: Windows 10 Enterprise, 64-bit\n\tphysical_memory_size: 8317603840\n\tsystemvolume_free_size: 178565648384\n\tsystemvolume_total_size: 254356221952\n\n\tstatus: Online\n\tis_isolating: False\n\tsensor_id: 30182\n\tlast_checkin_time: 2021-02-10 04:11:39.846926-05:00\n\tnext_checkin_time: 2021-02-10 04:12:40.846005-05:00\n\tsensor_health_message: Very high event loss\n\tsensor_health_status: 80\n\tnetwork_interfaces:\n\t\tNetworkAdapter(macaddr=\'4c:1d:96:78:fc:21\', ipaddr=\'172.19.8.185\')\n```\n\n# Process Inspection\n\nUse the process inspection interface to carve and parse process events. You can use any combination of optional arguments together *and* these arugments are also applied to processes that recursively walked with the `-w` (`--walk-tree`) option.\n\n**NOTE**: If you do not supply any optional arguments, the following inspection arguments are applied by default:\n\n    -i, --proc-info       show process information\n    -t, --process-tree    print the process tree with this process as the root.\n    -a, --process-ancestry\n                            print the the process ancestry\n    -c, --show-children   print process children event details\n    -nc, --netconns       print network connections\n    -fm, --filemods       print file modifications\n    -rm, --regmods        print registry modifications\n    -ml, --modloads       print modloads\n    -cp, --crossprocs     print crossprocs\n\nAll process inspection arguments:\n\n```\n$ cbinterface inspect -h\nusage: cbinterface inspect [-h] [-i] [-w] [-t] [-a] [-c] [-nc] [-fm] [-rm] [-ml] [-cp]\n                           [-rpe] [--json] [--segment-limit SEGMENT_LIMIT]\n                           guid_with_optional_segment\n\npositional arguments:\nguid_with_optional_segment\n                        the process GUID/segment to inspect. Segment is\n                        optional.\n\noptional arguments:\n-h, --help            show this help message and exit\n-i, --proc-info       show binary and process information\n-w, --walk-tree       Recursively walk, print, and inspect the process tree.\n                        Specified arguments (ex. filemods) applied at every\n                        process in tree. WARNING: can pull large datasets.\n-t, --process-tree    print the process tree with this process as the root.\n-a, --process-ancestry\n                        print the the process ancestry\n-c, --show-children   only print process children event details\n-nc, --netconns       print network connections\n-fm, --filemods       print file modifications\n-rm, --regmods        print registry modifications\n-ml, --modloads       print modloads\n-cp, --crossprocs     print crossprocs\n-rpe, --raw-print-events\n                        do not format Cb events onto a single line. Print them\n                        the way Cb does by default.\n--json                Combine all results into json document and print the\n                        result.\n--segment-limit SEGMENT_LIMIT\n                        stop processing events into json after this many\n                        process segments\n```\n\n## Single Segment Specification\n\nYou can specify that a single process segment is inspected by passing a process with the process.current_segment set to an existing process.\nThis can be accomplished on the command line by passing the segment with the process GUID, like so:\n\n`cbinterface inspect 00006a99-0000-59ac-01d6-feff3879acfd/1612887600302`\n\n\n## All Segment Specification (default)\n\nBy default, if a single segment is not specified (current_segment field not set in the Process object) all segment events are inspected.\n\n# Live Response\n\n`cbinterface` has a robust live response interface for managing live response sessions and commands on sensors.\n\nCommand line interface to live response functions:\n\n```\n$ cbinterface live-response -h\nusage: cbinterface live-response [-h] [-e EXECUTE_COMMAND] [-cr CREATE_REGKEY]\n                                 [-sr SET_REGKEY_VALUE]\n                                 hostname_or_sensor_id\n                                 {put,collect,remediate,rem,destroy} ...\n\npositional arguments:\n  hostname_or_sensor_id\n                        the hostname or sensor_id to go live with.\n  {put,collect,remediate,rem,destroy}\n    put                 put a file on the sensor\n    collect             collect artifacts from hosts\n    remediate (rem, destroy)\n                        remdiation (delete/kill) actions\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -e EXECUTE_COMMAND, --execute-command EXECUTE_COMMAND\n                        Execute this command on the sensor. NOTE: waits for\n                        output.\n  -cr CREATE_REGKEY, --create-regkey CREATE_REGKEY\n                        Create this regkey.\n  -sr SET_REGKEY_VALUE, --set-regkey-value SET_REGKEY_VALUE\n                        Set this regkey value.\n```\n\n## LR Collection\n\nCommand line interface to LR collections:\n\n```\n$ cbinterface live-response collect -h\nusage: cbinterface live-response [-h] [-e EXECUTE_COMMAND] [-cr CREATE_REGKEY]\n                                 [-sr SET_REGKEY_VALUE]\n                                 hostname_or_sensor_id\n                                 {put,collect,remediate,rem,destroy} ...\n\npositional arguments:\n  hostname_or_sensor_id\n                        the hostname or sensor_id to go live with.\n  {put,collect,remediate,rem,destroy}\n    put                 put a file on the sensor\n    collect             collect artifacts from hosts\n    remediate (rem, destroy)\n                        remdiation (delete/kill) actions\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -e EXECUTE_COMMAND, --execute-command EXECUTE_COMMAND\n                        Execute this command on the sensor. NOTE: waits for\n                        output.\n  -cr CREATE_REGKEY, --create-regkey CREATE_REGKEY\n                        Create this regkey.\n  -sr SET_REGKEY_VALUE, --set-regkey-value SET_REGKEY_VALUE\n                        Set this regkey value.\n```\n\n## LR Remediation\n\nCommand line interface to LR remediations:\n\n```\n$ cbinterface live-response remediate -h\nusage: cbinterface live-response [-h] [-e EXECUTE_COMMAND] [-cr CREATE_REGKEY]\n                                      [-sr SET_REGKEY_VALUE]\n                                      hostname_or_sensor_id\n                                      {put,collect,remediate,rem,destroy} ...\n\npositional arguments:\n  hostname_or_sensor_id\n                        the hostname or sensor_id to go live with.\n  {put,collect,remediate,rem,destroy}\n    put                 put a file on the sensor\n    collect             collect artifacts from hosts\n    remediate (rem, destroy)\n                        remdiation (delete/kill) actions\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -e EXECUTE_COMMAND, --execute-command EXECUTE_COMMAND\n                        Execute this command on the sensor. NOTE: waits for\n                        output.\n  -cr CREATE_REGKEY, --create-regkey CREATE_REGKEY\n                        Create this regkey.\n  -sr SET_REGKEY_VALUE, --set-regkey-value SET_REGKEY_VALUE\n                        Set this regkey value.\n```\n\n# Sessions\n\n`cbinterface` used a custom live response session manager: \n\n`from cbinterface2.sessions import CustomLiveResponseSessionManager`\n\nThis custom session manager allows for much more flexible with the management of live response commands.\n\nAlso, if needed, there is a command line interface for interacting directly with CbServer sessions:\n\n```\ncbi session -gcr 13288:3 -h\nusage: cbi session [-h] [-lss LIST_SENSOR_SESSIONS]\n                   [-gsc GET_SESSION_COMMAND_LIST] [-a] [-g GET_SESSION]\n                   [-c CLOSE_SESSION] [-gcr GET_COMMAND_RESULT]\n                   [-f GET_FILE_CONTENT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -lss LIST_SENSOR_SESSIONS, --list-sensor-sessions LIST_SENSOR_SESSIONS\n                        list all CbLR sessions associated to this sensor ID.\n  -gsc GET_SESSION_COMMAND_LIST, --get-session-command-list GET_SESSION_COMMAND_LIST\n                        list commands associated to this session\n  -a, --list-all-sessions\n                        list all CbLR sessions.\n  -g GET_SESSION, --get-session GET_SESSION\n                        get live response session by id.\n  -c CLOSE_SESSION, --close-session CLOSE_SESSION\n                        close live response session by id.\n  -gcr GET_COMMAND_RESULT, --get-command-result GET_COMMAND_RESULT\n                        get any results for this command.\n  -f GET_FILE_CONTENT, --get-file-content GET_FILE_CONTENT\n                        byte stream any file content to stdout. (use a pipe)\n```\n\n## Check Session & Command Result\n\nThe following demonstrates correalting a session ID to commmand ID and checking the command result.\n\nCheck the session:\n\n```\n$cbinterface session -g 13290 \n{\n  "address": "54.82.99.78",\n  "check_in_timeout": 1200,\n  "create_time": 1612951662.403915,\n  "current_working_directory": "C:\\\\Windows\\\\CarbonBlack",\n  "drives": [\n    "C:\\\\"\n  ],\n  "group_id": 7,\n  "hostname": "FT7R15",\n  "id": 13290,\n  "os_version": "",\n  "sensor_id": 31851,\n  "sensor_wait_timeout": 120,\n  "session_timeout": 300,\n  "status": "active",\n  "storage_size": "17194",\n  "storage_ttl": 7.0,\n  "supported_commands": [\n    "delete file",\n    "put file",\n    "reg delete key",\n    "directory list",\n    "reg create key",\n    "get file",\n    "reg enum key",\n    "reg query value",\n    "kill",\n    "create process",\n    "process list",\n    "reg delete value",\n    "reg set value",\n    "create directory",\n    "memdump"\n  ]\n}\n```\n\nGet session commands:\n\n```\n$ cbinterface session -gsc 13290\n[\n  {\n    "completion": 1612952045.935913,\n    "create_time": 1612951689.034951,\n    "id": 1,\n    "name": "memdump",\n    "object": "c:\\\\windows\\\\temp\\\\cblr.hGjtWgEj9Ku1.tmp",\n    "result_code": 0,\n    "result_desc": "",\n    "result_type": "WinHresult",\n    "sensor_id": 31851,\n    "session_id": 13290,\n    "status": "complete",\n    "username": "smcfeely"\n  }\n]\n```\n\nCheck the specific session command:\n\n```\n$ cbinterface session -gcr 13290:1\n{\n  "complete": true,\n  "completion": 1612952045.935913,\n  "compressing": false,\n  "create_time": 1612951689.034951,\n  "dumping": false,\n  "id": 1,\n  "name": "memdump",\n  "object": "c:\\\\windows\\\\temp\\\\cblr.hGjtWgEj9Ku1.tmp",\n  "percentdone": 0,\n  "result_code": 0,\n  "result_desc": "",\n  "result_type": "WinHresult",\n  "return_code": 0,\n  "sensor_id": 31851,\n  "session_id": 13290,\n  "status": "complete",\n  "username": "smcfeely"\n}\n```\n',
    'author': 'Sean McFeely',
    'author_email': 'mcfeelynaes@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/seanmcfeely/cbinterface2',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
