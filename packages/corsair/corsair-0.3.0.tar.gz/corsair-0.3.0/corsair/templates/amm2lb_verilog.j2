// Created with Corsair v{{ corsair_ver }}
//
// Avalon-MM to Local Bus bridge
//

module {{ module_name }} #(
    parameter ADDR_W = {{ config['address_width'].value }},
    parameter DATA_W = {{ config['data_width'].value }},
    parameter STRB_W = DATA_W / 8
)(
    input clk,
    input reset,
    // Avalon-MM
    input  [ADDR_W-1:0]  address,
    input                read,
    output [DATA_W-1:0]  readdata,
    output               readdatavalid,
    input  [STRB_W-1:0]  byteenable,
    input                write,
    input  [DATA_W-1:0]  writedata,
    output               waitrequest,
    // Local Bus
    input                     wready,
    output       [ADDR_W-1:0] waddr,
    output       [DATA_W-1:0] wdata,
    output                    wen,
    output       [STRB_W-1:0] wstrb,
    input        [DATA_W-1:0] rdata,
    input                     rvalid,
    output       [ADDR_W-1:0] raddr,
    output reg                ren
);

  assign waddr = address,
         raddr = address;

  assign waitrequest   = ~wready;
  assign readdatavalid = rvalid;

  assign wdata    = writedata,
         readdata = rdata;

  assign wen = write;

  assign wstrb = byteenable;

  {% set rst_type = config['register_reset'].value%}
  {%- if rst_type == 'async_pos' or rst_type == 'sync_pos' %}
      {% set rst_active = 1%}
  {%- elif rst_type == 'async_neg' or rst_type == 'sync_neg' %}
      {% set rst_active = 0%}
  {%- endif %}
  always @(posedge clk
  {%- if rst_type == 'async_pos' %} or posedge reset)
  {%- elif rst_type == 'async_neg' %} or negedge reset)
  {%- else -%} ) {%- endif %} begin
    if (reset == 1'b{{ rst_active }})
      ren <= 1'b0;
    else
    begin
      if (read)
        ren <= 1'b1;
      else
        if (rvalid)
          ren <= 1'b0;
    end
  end

endmodule
