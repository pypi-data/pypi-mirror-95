{# MACRO #}
{#- vector range for select operations #}
{% macro range(msb, lsb, is_vector=true) %}
    {% if is_vector %}
        {% if msb == lsb %}
[{{ msb }}]
        {%- else %}
[{{ msb }}:{{ lsb }}]
        {%- endif %}
    {%- endif %}
{%- endmacro %}

{#- vector range for declarations #}
{% macro range_decl(msb, is_vector=true) %}
    {% if is_vector %}
[{{ msb }}:0]
    {%- endif %}
{%- endmacro %}

{#- literal #}
{% macro literal(val, width=1) %}
    {% if width == 1 %}
1'b{{ val }}
    {%- else %}
{{ width}}'h{{ '%x' % val }}
    {%- endif %}
{%- endmacro %}

{#- special literal for all zeros #}
{% macro zeros(width=1) %}
    {% if width == 1 %}
1'b0
    {%- else %}
{{ width }}'h0
    {%- endif %}
{%- endmacro %}

{#- special literal for all ones #}
{% macro ones(width=1) %}
    {% if width == 1 %}
1'b1
    {%- else %}
{{ "{%d{1'b1}}" % width }}
    {%- endif %}
{%- endmacro %}

{#- 'always' header with reset logic #}
{% macro always_begin(sig='', width=1, init=0) %}
    {% set rst_type = config['register_reset'].value%}
    {% if rst_type == 'init_only' %}
always @(posedge clk) begin
    {% else %}
        {% if rst_type == 'sync_pos' %}
always @(posedge clk) begin
    if (rst) begin
        {% elif rst_type == 'sync_neg' %}
always @(posedge clk) begin
    if (!rst) begin
        {% elif rst_type == 'async_pos' %}
always @(posedge clk or posedge rst) begin
    if (rst) begin
        {% elif rst_type == 'async_neg' %}
always @(posedge clk or negedge rst) begin
    if (!rst) begin
        {% endif %}
        {{ sig }} <= {{ literal(init, width) }};
    end else
    {%- endif %}
{%- endmacro %}

{#- 'always' part with write strobes #}
{% macro always_write(sig, reg, bf) %}
    {% if 'w' in bf.access %}
    {% if reg.write_lock %}
 if (!{{ port_csr_wlock(reg) }} && {{ sig_csr_wen(reg) }}) begin
    {% else %}
 if ({{ sig_csr_wen(reg) }}) begin
    {% endif %}
        {% for num, val in bf.byte_strobes.items() %}
            {% if 'w1tc' in bf.modifiers %}
        if (lb_wstrb[{{ num }}] && lb_wdata{{ range(val['wdata_msb'], val['wdata_lsb']) }})
            {{ sig }}{{ range(val['bf_msb'], val['bf_lsb'], bf.is_vector()) }} <= {{ zeros(val['bf_msb'] - val['bf_lsb'] + 1) }};
            {% elif 'w1ts' in bf.modifiers %}
        if (lb_wstrb[{{ num }}] && lb_wdata{{ range(val['wdata_msb'], val['wdata_lsb']) }})
            {{ sig }}{{ range(val['bf_msb'], val['bf_lsb'], bf.is_vector()) }} <= {{ ones(val['bf_msb'] - val['bf_lsb'] + 1) }};
            {% elif 'w1tt' in bf.modifiers %}
        if (lb_wstrb[{{ num }}] && lb_wdata{{ range(val['wdata_msb'], val['wdata_lsb']) }})
            {{ sig }}{{ range(val['bf_msb'], val['bf_lsb'], bf.is_vector()) }} <= ~{{ sig }};
            {% else %}
        if (lb_wstrb[{{ num }}])
            {{ sig }}{{ range(val['bf_msb'], val['bf_lsb'], bf.is_vector()) }} <= lb_wdata{{ range(val['wdata_msb'], val['wdata_lsb']) }};
            {% endif %}
        {% endfor %}
        {% if 'hwu' in bf.modifiers %}
    end else
        {%- else %}
    end
        {%- endif %}
    {%- endif %}
{%- endmacro %}

{#- 'always' part for external updates #}
{% macro always_update(sig, reg, bf) %}
    {% if 'hwu' in bf.modifiers %}
 if ({{ port_bf_upd(reg, bf) }}) begin
        {{ sig }} <= {{ port_bf_in(reg, bf) }};
    end
    {%- endif %}
{%- endmacro %}

{#- 'always' part for self clear #}
{% macro always_self_clear(sig, reg, bf) %}
    {% if 'sc' in bf.modifiers %}
 else begin
        {{ sig }} <= {{ zeros(bf.width) }};
    end
    {%- endif %}
{%- endmacro %}

{#- 'always' part with clear after read #}
{% macro always_read_clear(sig, reg, bf) %}
    {% if bf.access == 'ro' and 'rtc' in bf.modifiers %}
 if ({{ sig_csr_ren(reg) }}) begin
        {{ sig }} <= {{ zeros(bf.width) }};
    end
    {%- endif %}
{%- endmacro %}

{#- signal: csr for rdata bus #}
{% macro sig_csr_rdata(reg) %}
csr_{{ reg.name.lower() }}_rdata
{%- endmacro %}

{#- port: bitfield output #}
{% macro port_bf_out(reg, bf) %}
csr_{{ reg.name.lower() }}_{{ bf.name.lower() }}_out
{%- endmacro %}

{#- port: bitfield input  #}
{% macro port_bf_in(reg, bf) %}
csr_{{ reg.name.lower() }}_{{ bf.name.lower() }}_in
{%- endmacro %}

{#- port: bitfield update enable #}
{% macro port_bf_upd(reg, bf) %}
csr_{{ reg.name.lower() }}_{{ bf.name.lower() }}_upd
{%- endmacro %}

{#- port: bitfield read enable #}
{% macro port_bf_ren(reg, bf) %}
csr_{{ reg.name.lower() }}_{{ bf.name.lower() }}_ren
{%- endmacro %}

{#- port: bitfield read valid #}
{% macro port_bf_rvalid(reg, bf) %}
csr_{{ reg.name.lower() }}_{{ bf.name.lower() }}_rvalid
{%- endmacro %}

{#- port: bitfield write enable #}
{% macro port_bf_wen(reg, bf) %}
csr_{{ reg.name.lower() }}_{{ bf.name.lower() }}_wen
{%- endmacro %}

{#- port: bitfield write ready #}
{% macro port_bf_wready(reg, bf) %}
csr_{{ reg.name.lower() }}_{{ bf.name.lower() }}_wready
{%- endmacro %}

{#- signal: bitfield registered read valid #}
{% macro sig_bf_rvalid_ff(reg, bf) %}
csr_{{ reg.name.lower() }}_{{ bf.name.lower() }}_rvalid_ff
{%- endmacro %}

{#- signal: bitfield flip-flops for write (output) #}
{% macro sig_bf_out_ff(reg, bf) %}
csr_{{ reg.name.lower() }}_{{ bf.name.lower() }}_out_ff
{%- endmacro %}

{#- signal: bitfield flip-flops for read (input) #}
{% macro sig_bf_in_ff(reg, bf) %}
csr_{{ reg.name.lower() }}_{{ bf.name.lower() }}_in_ff
{%- endmacro %}

{#- port: register read access strobe #}
{% macro port_csr_rstrb(reg) %}
csr_{{ reg.name.lower() }}_rstrb
{%- endmacro %}

{#- port: register write access strobe #}
{% macro port_csr_wstrb(reg) %}
csr_{{ reg.name.lower() }}_wstrb
{%- endmacro %}

{#- port: register write lock signal #}
{% macro port_csr_wlock(reg) %}
csr_{{ reg.name.lower() }}_wlock
{%- endmacro %}

{#- signal: register read enable #}
{% macro sig_csr_ren(reg) %}
csr_{{ reg.name.lower() }}_ren
{%- endmacro %}

{#- signal: register write enable #}
{% macro sig_csr_wen(reg) %}
csr_{{ reg.name.lower() }}_wen
{%- endmacro %}

{#- TEMPLATE NAMESPACE #}
{% set tmp = namespace() %}

{#- TEMPLATE #}
// Created with Corsair v{{ corsair_ver }}
// Register map module v{{ config['version'].value }}

module {{ config['name'].value }} #(
    parameter ADDR_W = {{ config['address_width'].value }},
    parameter DATA_W = {{ config['data_width'].value }},
    parameter STRB_W = DATA_W / 8
)(
    // System
    input clk,
{% if config['register_reset'].value != 'init_only' %}
    input rst,
{% endif %}
{% for reg in rmap %}
    // CSR: {{ reg.name }}
    {% if reg.access_strobes %}
    output {{ port_csr_rstrb(reg) }},
    output {{ port_csr_wstrb(reg) }},
    {% endif %}
    {% if reg.write_lock %}
    input {{ port_csr_wlock(reg) }},
    {% endif %}
    {% for bf in reg %}
        {% if 'const' not in bf.modifiers and (bf.access == 'ro' or 'hwu' in bf.modifiers) or ('r' in bf.access and 'fifo' in bf.modifiers) %}
    input {{ range_decl(bf.width - 1, bf.is_vector()) }} {{ port_bf_in(reg, bf) }},
        {% endif %}
        {% if 'r' in bf.access and 'fifo' in bf.modifiers %}
    input {{ port_bf_rvalid(reg, bf) }},
    output {{ port_bf_ren(reg, bf) }},
        {% endif %}
        {% if 'w' in bf.access %}
    output {{ range_decl(bf.width - 1, bf.is_vector()) }} {{ port_bf_out(reg, bf) }},
        {% endif %}
        {% if 'w' in bf.access and 'fifo' in bf.modifiers %}
    input {{ port_bf_wready(reg, bf) }},
    output {{ port_bf_wen(reg, bf) }},
        {% endif %}
        {% if 'hwu' in bf.modifiers %}
    input {{ port_bf_upd(reg, bf) }},
        {% endif %}
    {% endfor %}
{% endfor %}
    // Local Bus
    input  [ADDR_W-1:0] lb_waddr,
    input  [DATA_W-1:0] lb_wdata,
    input               lb_wen,
    input  [STRB_W-1:0] lb_wstrb,
    output              lb_wready,
    input  [ADDR_W-1:0] lb_raddr,
    input               lb_ren,
    output [DATA_W-1:0] lb_rdata,
    output              lb_rvalid
);

{% for reg in rmap %}
//------------------------------------------------------------------------------
// CSR:
// [{{ '0x%x' % reg.address }}] - {{ reg.name }} - {{ reg.description }}
//------------------------------------------------------------------------------
    {% if not (reg.complementary and reg.access == 'wo') %}
wire {{ range_decl(config['data_width'].value - 1) }} {{ sig_csr_rdata(reg) }};

{# fill unused bits with zeros #}
        {% set tmp.last_bit = 0 %}
        {% for bf in reg %}
            {% if bf.lsb > tmp.last_bit %}
assign {{ sig_csr_rdata(reg) }}{{ range(bf.lsb - 1, tmp.last_bit) }} = {{ zeros(bf.lsb - tmp.last_bit) }};
            {% endif %}
            {% set tmp.last_bit = bf.msb + 1 %}
        {% endfor %}
        {% if config['data_width'].value - 1 > tmp.last_bit %}
assign {{ sig_csr_rdata(reg) }}{{ range(config['data_width'].value - 1, tmp.last_bit) }} = {{ zeros(config['data_width'].value - tmp.last_bit) }};
        {% endif %}

    {% endif %}
    {% if 'w' in reg.access %}
wire {{ sig_csr_wen(reg) }};
assign {{ sig_csr_wen(reg) }} = lb_wen && (lb_waddr == {{ literal(reg.address, config['address_width'].value) }});
    {% endif %}
    {% if 'r' in reg.access %}
wire {{ sig_csr_ren(reg) }};
assign {{ sig_csr_ren(reg) }} = lb_ren && (lb_raddr == {{ literal(reg.address, config['address_width'].value) }});
    {% endif %}
    {% if reg.access_strobes %}
assign {{ port_csr_wstrb(reg) }} = lb_wready && {{ sig_csr_wen(reg) }};
assign {{ port_csr_rstrb(reg) }} = lb_rvalid && {{ sig_csr_ren(reg) }};
    {% endif %}

{# generate bit fields #}
    {% for bf in reg %}
//---------------------
// Bit field:
// {{ reg.name }}{{ range(bf.msb, bf.lsb) }} - {{ bf.name }} - {{ bf.description }}
// {{ bf.access }}{{ ', ' + ', '.join(bf.modifiers) if bf.modifiers else '' }}
//---------------------
        {% if 'w' in bf.access and 'fifo' not in bf.modifiers %}
            {% if config['register_reset'].value == 'init_only' %}
reg {{ range_decl( bf.width - 1, bf.is_vector()) }} {{ sig_bf_out_ff(reg, bf) }} = {{ literal(bf.initial, bf.width) }};
            {% else %}
reg {{ range_decl(bf.width - 1, bf.is_vector()) }} {{ sig_bf_out_ff(reg, bf) }};
            {% endif %}
        {% endif %}
        {% if 'ro' == bf.access and 'hwu' in bf.modifiers %}
            {% if config['register_reset'].value == 'init_only' %}
reg {{ range_decl( bf.width - 1, bf.is_vector()) }} {{ sig_bf_in_ff(reg, bf) }} = {{ literal(bf.initial, bf.width) }};
            {% else %}
reg {{ range_decl(bf.width - 1, bf.is_vector()) }} {{ sig_bf_in_ff(reg, bf) }};
            {% endif %}
        {% endif %}
        {% if reg.complementary and bf.access == 'wo' %}
            {#- no assign #}
        {% elif 'r' in bf.access and 'fifo' in bf.modifiers %}
assign {{ sig_csr_rdata(reg) }}{{ range(bf.msb, bf.lsb) }} = {{ port_bf_in(reg, bf) }};
        {% elif bf.access == 'wo' %}
assign {{ sig_csr_rdata(reg) }}{{ range(bf.msb, bf.lsb) }} = {{ zeros(bf.width) }};
        {% elif bf.access == 'ro' and 'const' in bf.modifiers %}
assign {{ sig_csr_rdata(reg) }}{{ range(bf.msb, bf.lsb) }} = {{ literal(bf.initial, bf.width) }};
        {% elif bf.access == 'ro' and 'hwu' not in bf.modifiers %}
assign {{ sig_csr_rdata(reg) }}{{ range(bf.msb, bf.lsb) }} = {{ port_bf_in(reg, bf) }};
        {% elif bf.access == 'ro' and 'hwu' in bf.modifiers %}
assign {{ sig_csr_rdata(reg) }}{{ range(bf.msb, bf.lsb) }} = {{ sig_bf_in_ff(reg, bf) }};
        {% else %}
assign {{ sig_csr_rdata(reg) }}{{ range(bf.msb, bf.lsb) }} = {{ sig_bf_out_ff(reg, bf) }};
        {% endif %}
        {% if 'w' in bf.access and 'fifo' in bf.modifiers %}
assign {{ port_bf_out(reg, bf) }} = lb_wdata{{ range(bf.msb, bf.lsb) }};
        {% elif 'w' in bf.access %}
assign {{ port_bf_out(reg, bf) }} = {{ sig_bf_out_ff(reg, bf) }};
        {% endif %}
        {% if 'r' in bf.access and 'fifo' in bf.modifiers %}
assign {{ port_bf_ren(reg, bf) }} = {{ sig_csr_ren(reg) }};
        {% endif %}
        {% if 'w' in bf.access and 'fifo' in bf.modifiers %}
assign {{ port_bf_wen(reg, bf) }} = {{ sig_csr_wen(reg) }};
        {% endif %}

        {% if 'w' in bf.access and 'fifo' not in bf.modifiers %}
{{ always_begin(sig=sig_bf_out_ff(reg, bf), width=bf.width, init=bf.initial)
}}{{ always_write(sig_bf_out_ff(reg, bf), reg, bf)
}}{{ always_update(sig_bf_out_ff(reg, bf), reg, bf)
}}{{ always_self_clear(sig_bf_out_ff(reg, bf), reg, bf)
}}
end
        {% elif bf.access == 'ro' and 'hwu' in bf.modifiers %}
{{ always_begin(sig=sig_bf_in_ff(reg, bf), width=bf.width, init=bf.initial)
}}{{ always_update(sig_bf_in_ff(reg, bf), reg, bf)
}}{{ always_read_clear(sig_bf_in_ff(reg, bf), reg, bf)
}}
end
        {% endif %}
        {% if 'r' in bf.access and 'fifo' in bf.modifiers %}
reg {{ sig_bf_rvalid_ff(reg, bf) }};
{{ always_begin(sig=sig_bf_rvalid_ff(reg, bf)
)}} begin
        {{ sig_bf_rvalid_ff(reg, bf) }} <= {{ port_bf_rvalid(reg, bf) }};
    end
end
        {%endif%}
    {% endfor %}

{% endfor %}
//------------------------------------------------------------------------------
// Write ready
//------------------------------------------------------------------------------
{% set tmp.fifo_cnt = 0 %}
{% for reg in rmap %}
    {% for bf in reg %}
        {% if 'w' in bf.access and 'fifo' in bf.modifiers %}
            {% if tmp.fifo_cnt == 0 %}
reg lb_wready_drv;

always @(*) begin
    if ({{ sig_csr_wen(reg) }})
        lb_wready_drv = {{ port_bf_wready(reg, bf) }};
            {% else %}
    else if ({{ sig_csr_wen(reg) }})
        lb_wready_drv = {{ port_bf_wready(reg, bf) }};
            {% endif %}
            {% set tmp.fifo_cnt = tmp.fifo_cnt + 1 %}
        {% endif %}
    {% endfor %}
{% endfor %}
{% if tmp.fifo_cnt %}
    else
        lb_wready_drv = 1'b1;
end

assign lb_wready = lb_wready_drv;
{% else %}
assign lb_wready = 1'b1;
{% endif %}

//------------------------------------------------------------------------------
// Read address decoder
//------------------------------------------------------------------------------
reg {{ range_decl(config['data_width'].value - 1) }} lb_rdata_ff;
{{ always_begin(sig='lb_rdata_ff', width=config['data_width'].value, init=config['regmap']['read_filler'].value
)}} if (lb_ren) begin
        case (lb_raddr)
{% for reg in rmap %}
    {% if not (reg.complementary and reg.access == 'wo') %}
            {{ literal(reg.address, config['address_width'].value) }}: lb_rdata_ff <= {{ sig_csr_rdata(reg) }};
    {% endif %}
{% endfor %}
            default: lb_rdata_ff <= {{ literal(config['regmap']['read_filler'].value, config['data_width'].value) }};
        endcase
    end else begin
        lb_rdata_ff <= {{ literal(config['regmap']['read_filler'].value, config['data_width'].value) }};
    end
end
assign lb_rdata = lb_rdata_ff;

//------------------------------------------------------------------------------
// Read data valid
//------------------------------------------------------------------------------
reg lb_rvalid_ff;
{{ always_begin(sig='lb_rvalid_ff'
)}} if (lb_ren && lb_rvalid) begin
        lb_rvalid_ff <= 1'b0;
    end else if (lb_ren) begin
        lb_rvalid_ff <= 1'b1;
    end
end

{% set tmp.fifo_cnt = 0 %}
{% for reg in rmap %}
    {% for bf in reg %}
        {% if 'r' in bf.access and 'fifo' in bf.modifiers %}
            {% if tmp.fifo_cnt == 0 %}
reg lb_rvalid_drv;
always @(*) begin
    if ({{ sig_csr_ren(reg) }})
        lb_rvalid_drv = {{ sig_bf_rvalid_ff(reg, bf) }};
            {% else %}
    else if ({{ sig_csr_ren(reg) }})
        lb_rvalid_drv = {{ sig_bf_rvalid_ff(reg, bf) }};
            {% endif %}
            {% set tmp.fifo_cnt = tmp.fifo_cnt + 1 %}
        {% endif %}
    {% endfor %}
{% endfor %}
{% if tmp.fifo_cnt %}
    else
        lb_rvalid_drv = lb_rvalid_ff;
end

assign lb_rvalid = lb_rvalid_drv;
{% else %}
assign lb_rvalid = lb_rvalid_ff;
{% endif %}

endmodule
