# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class AIModelProgress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_step': 'int',
        'total_steps': 'int',
        'eta': 'datetime'
    }

    attribute_map = {
        'current_step': 'current_step',
        'total_steps': 'total_steps',
        'eta': 'eta'
    }

    def __init__(self, current_step=None, total_steps=None, eta=None, local_vars_configuration=None):  # noqa: E501
        """AIModelProgress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._current_step = None
        self._total_steps = None
        self._eta = None
        self.discriminator = None

        self.current_step = current_step
        self.total_steps = total_steps
        self.eta = eta

    @property
    def current_step(self):
        """Gets the current_step of this AIModelProgress.  # noqa: E501


        :return: The current_step of this AIModelProgress.  # noqa: E501
        :rtype: int
        """
        return self._current_step

    @current_step.setter
    def current_step(self, current_step):
        """Sets the current_step of this AIModelProgress.


        :param current_step: The current_step of this AIModelProgress.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and current_step is None:  # noqa: E501
            raise ValueError("Invalid value for `current_step`, must not be `None`")  # noqa: E501

        self._current_step = current_step

    @property
    def total_steps(self):
        """Gets the total_steps of this AIModelProgress.  # noqa: E501


        :return: The total_steps of this AIModelProgress.  # noqa: E501
        :rtype: int
        """
        return self._total_steps

    @total_steps.setter
    def total_steps(self, total_steps):
        """Sets the total_steps of this AIModelProgress.


        :param total_steps: The total_steps of this AIModelProgress.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total_steps is None:  # noqa: E501
            raise ValueError("Invalid value for `total_steps`, must not be `None`")  # noqa: E501

        self._total_steps = total_steps

    @property
    def eta(self):
        """Gets the eta of this AIModelProgress.  # noqa: E501


        :return: The eta of this AIModelProgress.  # noqa: E501
        :rtype: datetime
        """
        return self._eta

    @eta.setter
    def eta(self, eta):
        """Sets the eta of this AIModelProgress.


        :param eta: The eta of this AIModelProgress.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and eta is None:  # noqa: E501
            raise ValueError("Invalid value for `eta`, must not be `None`")  # noqa: E501

        self._eta = eta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIModelProgress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AIModelProgress):
            return True

        return self.to_dict() != other.to_dict()
