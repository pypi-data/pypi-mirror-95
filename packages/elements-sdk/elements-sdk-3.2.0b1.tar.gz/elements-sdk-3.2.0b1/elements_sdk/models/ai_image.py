# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class AIImage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'asset': 'int',
        'proxy': 'int',
        'frame': 'int',
        'filename': 'str',
        'dataset': 'str',
        'width': 'int',
        'height': 'int'
    }

    attribute_map = {
        'id': 'id',
        'asset': 'asset',
        'proxy': 'proxy',
        'frame': 'frame',
        'filename': 'filename',
        'dataset': 'dataset',
        'width': 'width',
        'height': 'height'
    }

    def __init__(self, id=None, asset=None, proxy=None, frame=None, filename=None, dataset=None, width=None, height=None, local_vars_configuration=None):  # noqa: E501
        """AIImage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._asset = None
        self._proxy = None
        self._frame = None
        self._filename = None
        self._dataset = None
        self._width = None
        self._height = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.asset = asset
        self.proxy = proxy
        self.frame = frame
        if filename is not None:
            self.filename = filename
        self.dataset = dataset
        self.width = width
        self.height = height

    @property
    def id(self):
        """Gets the id of this AIImage.  # noqa: E501


        :return: The id of this AIImage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIImage.


        :param id: The id of this AIImage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def asset(self):
        """Gets the asset of this AIImage.  # noqa: E501


        :return: The asset of this AIImage.  # noqa: E501
        :rtype: int
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this AIImage.


        :param asset: The asset of this AIImage.  # noqa: E501
        :type: int
        """

        self._asset = asset

    @property
    def proxy(self):
        """Gets the proxy of this AIImage.  # noqa: E501


        :return: The proxy of this AIImage.  # noqa: E501
        :rtype: int
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this AIImage.


        :param proxy: The proxy of this AIImage.  # noqa: E501
        :type: int
        """

        self._proxy = proxy

    @property
    def frame(self):
        """Gets the frame of this AIImage.  # noqa: E501


        :return: The frame of this AIImage.  # noqa: E501
        :rtype: int
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """Sets the frame of this AIImage.


        :param frame: The frame of this AIImage.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and frame is None:  # noqa: E501
            raise ValueError("Invalid value for `frame`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                frame is not None and frame > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `frame`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                frame is not None and frame < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `frame`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._frame = frame

    @property
    def filename(self):
        """Gets the filename of this AIImage.  # noqa: E501


        :return: The filename of this AIImage.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this AIImage.


        :param filename: The filename of this AIImage.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                filename is not None and len(filename) > 255):
            raise ValueError("Invalid value for `filename`, length must be less than or equal to `255`")  # noqa: E501

        self._filename = filename

    @property
    def dataset(self):
        """Gets the dataset of this AIImage.  # noqa: E501


        :return: The dataset of this AIImage.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this AIImage.


        :param dataset: The dataset of this AIImage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and dataset is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def width(self):
        """Gets the width of this AIImage.  # noqa: E501


        :return: The width of this AIImage.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this AIImage.


        :param width: The width of this AIImage.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and width is None:  # noqa: E501
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                width is not None and width > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                width is not None and width < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._width = width

    @property
    def height(self):
        """Gets the height of this AIImage.  # noqa: E501


        :return: The height of this AIImage.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this AIImage.


        :param height: The height of this AIImage.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and height is None:  # noqa: E501
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                height is not None and height > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                height is not None and height < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._height = height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIImage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AIImage):
            return True

        return self.to_dict() != other.to_dict()
