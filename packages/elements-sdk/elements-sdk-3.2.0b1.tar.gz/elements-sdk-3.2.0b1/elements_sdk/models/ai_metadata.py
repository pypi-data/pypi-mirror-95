# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class AIMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'asset': 'int',
        'dataset': 'AIDatasetSimple',
        'model': 'str',
        'type': 'str',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'asset': 'asset',
        'dataset': 'dataset',
        'model': 'model',
        'type': 'type',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, asset=None, dataset=None, model=None, type=None, metadata=None, local_vars_configuration=None):  # noqa: E501
        """AIMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._asset = None
        self._dataset = None
        self._model = None
        self._type = None
        self._metadata = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.asset = asset
        self.dataset = dataset
        self.model = model
        self.type = type
        self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this AIMetadata.  # noqa: E501


        :return: The id of this AIMetadata.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIMetadata.


        :param id: The id of this AIMetadata.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def asset(self):
        """Gets the asset of this AIMetadata.  # noqa: E501


        :return: The asset of this AIMetadata.  # noqa: E501
        :rtype: int
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this AIMetadata.


        :param asset: The asset of this AIMetadata.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and asset is None:  # noqa: E501
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def dataset(self):
        """Gets the dataset of this AIMetadata.  # noqa: E501


        :return: The dataset of this AIMetadata.  # noqa: E501
        :rtype: AIDatasetSimple
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this AIMetadata.


        :param dataset: The dataset of this AIMetadata.  # noqa: E501
        :type: AIDatasetSimple
        """
        if self.local_vars_configuration.client_side_validation and dataset is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def model(self):
        """Gets the model of this AIMetadata.  # noqa: E501


        :return: The model of this AIMetadata.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this AIMetadata.


        :param model: The model of this AIMetadata.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def type(self):
        """Gets the type of this AIMetadata.  # noqa: E501


        :return: The type of this AIMetadata.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIMetadata.


        :param type: The type of this AIMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"transcript", "visual"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def metadata(self):
        """Gets the metadata of this AIMetadata.  # noqa: E501


        :return: The metadata of this AIMetadata.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AIMetadata.


        :param metadata: The metadata of this AIMetadata.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and metadata is None:  # noqa: E501
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AIMetadata):
            return True

        return self.to_dict() != other.to_dict()
