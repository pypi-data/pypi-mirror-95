# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class AIModelPartialUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'training_pid': 'int',
        'dataset': 'str',
        'preprocessing_task': 'str'
    }

    attribute_map = {
        'training_pid': 'training_pid',
        'dataset': 'dataset',
        'preprocessing_task': 'preprocessing_task'
    }

    def __init__(self, training_pid=None, dataset=None, preprocessing_task=None, local_vars_configuration=None):  # noqa: E501
        """AIModelPartialUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._training_pid = None
        self._dataset = None
        self._preprocessing_task = None
        self.discriminator = None

        self.training_pid = training_pid
        if dataset is not None:
            self.dataset = dataset
        self.preprocessing_task = preprocessing_task

    @property
    def training_pid(self):
        """Gets the training_pid of this AIModelPartialUpdate.  # noqa: E501


        :return: The training_pid of this AIModelPartialUpdate.  # noqa: E501
        :rtype: int
        """
        return self._training_pid

    @training_pid.setter
    def training_pid(self, training_pid):
        """Sets the training_pid of this AIModelPartialUpdate.


        :param training_pid: The training_pid of this AIModelPartialUpdate.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                training_pid is not None and training_pid > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `training_pid`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                training_pid is not None and training_pid < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `training_pid`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._training_pid = training_pid

    @property
    def dataset(self):
        """Gets the dataset of this AIModelPartialUpdate.  # noqa: E501


        :return: The dataset of this AIModelPartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this AIModelPartialUpdate.


        :param dataset: The dataset of this AIModelPartialUpdate.  # noqa: E501
        :type: str
        """

        self._dataset = dataset

    @property
    def preprocessing_task(self):
        """Gets the preprocessing_task of this AIModelPartialUpdate.  # noqa: E501


        :return: The preprocessing_task of this AIModelPartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._preprocessing_task

    @preprocessing_task.setter
    def preprocessing_task(self, preprocessing_task):
        """Sets the preprocessing_task of this AIModelPartialUpdate.


        :param preprocessing_task: The preprocessing_task of this AIModelPartialUpdate.  # noqa: E501
        :type: str
        """

        self._preprocessing_task = preprocessing_task

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIModelPartialUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AIModelPartialUpdate):
            return True

        return self.to_dict() != other.to_dict()
