# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class AIDataset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'training_model': 'AIModel',
        'last_finished_model': 'AIModel',
        'last_change': 'datetime',
        'name': 'str',
        'engine': 'str',
        'connection': 'int'
    }

    attribute_map = {
        'id': 'id',
        'training_model': 'training_model',
        'last_finished_model': 'last_finished_model',
        'last_change': 'last_change',
        'name': 'name',
        'engine': 'engine',
        'connection': 'connection'
    }

    def __init__(self, id=None, training_model=None, last_finished_model=None, last_change=None, name=None, engine=None, connection=None, local_vars_configuration=None):  # noqa: E501
        """AIDataset - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._training_model = None
        self._last_finished_model = None
        self._last_change = None
        self._name = None
        self._engine = None
        self._connection = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if training_model is not None:
            self.training_model = training_model
        if last_finished_model is not None:
            self.last_finished_model = last_finished_model
        if last_change is not None:
            self.last_change = last_change
        self.name = name
        self.engine = engine
        self.connection = connection

    @property
    def id(self):
        """Gets the id of this AIDataset.  # noqa: E501


        :return: The id of this AIDataset.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIDataset.


        :param id: The id of this AIDataset.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def training_model(self):
        """Gets the training_model of this AIDataset.  # noqa: E501


        :return: The training_model of this AIDataset.  # noqa: E501
        :rtype: AIModel
        """
        return self._training_model

    @training_model.setter
    def training_model(self, training_model):
        """Sets the training_model of this AIDataset.


        :param training_model: The training_model of this AIDataset.  # noqa: E501
        :type: AIModel
        """

        self._training_model = training_model

    @property
    def last_finished_model(self):
        """Gets the last_finished_model of this AIDataset.  # noqa: E501


        :return: The last_finished_model of this AIDataset.  # noqa: E501
        :rtype: AIModel
        """
        return self._last_finished_model

    @last_finished_model.setter
    def last_finished_model(self, last_finished_model):
        """Sets the last_finished_model of this AIDataset.


        :param last_finished_model: The last_finished_model of this AIDataset.  # noqa: E501
        :type: AIModel
        """

        self._last_finished_model = last_finished_model

    @property
    def last_change(self):
        """Gets the last_change of this AIDataset.  # noqa: E501


        :return: The last_change of this AIDataset.  # noqa: E501
        :rtype: datetime
        """
        return self._last_change

    @last_change.setter
    def last_change(self, last_change):
        """Sets the last_change of this AIDataset.


        :param last_change: The last_change of this AIDataset.  # noqa: E501
        :type: datetime
        """

        self._last_change = last_change

    @property
    def name(self):
        """Gets the name of this AIDataset.  # noqa: E501


        :return: The name of this AIDataset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AIDataset.


        :param name: The name of this AIDataset.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def engine(self):
        """Gets the engine of this AIDataset.  # noqa: E501


        :return: The engine of this AIDataset.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this AIDataset.


        :param engine: The engine of this AIDataset.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                engine is not None and len(engine) > 255):
            raise ValueError("Invalid value for `engine`, length must be less than or equal to `255`")  # noqa: E501

        self._engine = engine

    @property
    def connection(self):
        """Gets the connection of this AIDataset.  # noqa: E501


        :return: The connection of this AIDataset.  # noqa: E501
        :rtype: int
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this AIDataset.


        :param connection: The connection of this AIDataset.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and connection is None:  # noqa: E501
            raise ValueError("Invalid value for `connection`, must not be `None`")  # noqa: E501

        self._connection = connection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIDataset):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AIDataset):
            return True

        return self.to_dict() != other.to_dict()
