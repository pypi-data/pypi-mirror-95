# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class AIProcessingRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'assets': 'list[int]',
        'directories': 'list[int]',
        'datasets': 'list[str]',
        'preferred_proxy_profile': 'int'
    }

    attribute_map = {
        'assets': 'assets',
        'directories': 'directories',
        'datasets': 'datasets',
        'preferred_proxy_profile': 'preferred_proxy_profile'
    }

    def __init__(self, assets=None, directories=None, datasets=None, preferred_proxy_profile=None, local_vars_configuration=None):  # noqa: E501
        """AIProcessingRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._assets = None
        self._directories = None
        self._datasets = None
        self._preferred_proxy_profile = None
        self.discriminator = None

        if assets is not None:
            self.assets = assets
        if directories is not None:
            self.directories = directories
        self.datasets = datasets
        self.preferred_proxy_profile = preferred_proxy_profile

    @property
    def assets(self):
        """Gets the assets of this AIProcessingRequest.  # noqa: E501


        :return: The assets of this AIProcessingRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this AIProcessingRequest.


        :param assets: The assets of this AIProcessingRequest.  # noqa: E501
        :type: list[int]
        """

        self._assets = assets

    @property
    def directories(self):
        """Gets the directories of this AIProcessingRequest.  # noqa: E501


        :return: The directories of this AIProcessingRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._directories

    @directories.setter
    def directories(self, directories):
        """Sets the directories of this AIProcessingRequest.


        :param directories: The directories of this AIProcessingRequest.  # noqa: E501
        :type: list[int]
        """

        self._directories = directories

    @property
    def datasets(self):
        """Gets the datasets of this AIProcessingRequest.  # noqa: E501


        :return: The datasets of this AIProcessingRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this AIProcessingRequest.


        :param datasets: The datasets of this AIProcessingRequest.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and datasets is None:  # noqa: E501
            raise ValueError("Invalid value for `datasets`, must not be `None`")  # noqa: E501

        self._datasets = datasets

    @property
    def preferred_proxy_profile(self):
        """Gets the preferred_proxy_profile of this AIProcessingRequest.  # noqa: E501


        :return: The preferred_proxy_profile of this AIProcessingRequest.  # noqa: E501
        :rtype: int
        """
        return self._preferred_proxy_profile

    @preferred_proxy_profile.setter
    def preferred_proxy_profile(self, preferred_proxy_profile):
        """Sets the preferred_proxy_profile of this AIProcessingRequest.


        :param preferred_proxy_profile: The preferred_proxy_profile of this AIProcessingRequest.  # noqa: E501
        :type: int
        """

        self._preferred_proxy_profile = preferred_proxy_profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIProcessingRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AIProcessingRequest):
            return True

        return self.to_dict() != other.to_dict()
