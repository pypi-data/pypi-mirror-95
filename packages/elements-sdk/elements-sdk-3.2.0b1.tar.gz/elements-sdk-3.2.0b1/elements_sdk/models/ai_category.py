# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from elements_sdk.configuration import Configuration


class AICategory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'annotation_count': 'int',
        'sample_annotation': 'AIAnnotation',
        'connection': 'str',
        'name': 'str',
        'dataset': 'str'
    }

    attribute_map = {
        'id': 'id',
        'annotation_count': 'annotation_count',
        'sample_annotation': 'sample_annotation',
        'connection': 'connection',
        'name': 'name',
        'dataset': 'dataset'
    }

    def __init__(self, id=None, annotation_count=None, sample_annotation=None, connection=None, name=None, dataset=None, local_vars_configuration=None):  # noqa: E501
        """AICategory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._annotation_count = None
        self._sample_annotation = None
        self._connection = None
        self._name = None
        self._dataset = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if annotation_count is not None:
            self.annotation_count = annotation_count
        if sample_annotation is not None:
            self.sample_annotation = sample_annotation
        if connection is not None:
            self.connection = connection
        self.name = name
        self.dataset = dataset

    @property
    def id(self):
        """Gets the id of this AICategory.  # noqa: E501


        :return: The id of this AICategory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AICategory.


        :param id: The id of this AICategory.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def annotation_count(self):
        """Gets the annotation_count of this AICategory.  # noqa: E501


        :return: The annotation_count of this AICategory.  # noqa: E501
        :rtype: int
        """
        return self._annotation_count

    @annotation_count.setter
    def annotation_count(self, annotation_count):
        """Sets the annotation_count of this AICategory.


        :param annotation_count: The annotation_count of this AICategory.  # noqa: E501
        :type: int
        """

        self._annotation_count = annotation_count

    @property
    def sample_annotation(self):
        """Gets the sample_annotation of this AICategory.  # noqa: E501


        :return: The sample_annotation of this AICategory.  # noqa: E501
        :rtype: AIAnnotation
        """
        return self._sample_annotation

    @sample_annotation.setter
    def sample_annotation(self, sample_annotation):
        """Sets the sample_annotation of this AICategory.


        :param sample_annotation: The sample_annotation of this AICategory.  # noqa: E501
        :type: AIAnnotation
        """

        self._sample_annotation = sample_annotation

    @property
    def connection(self):
        """Gets the connection of this AICategory.  # noqa: E501


        :return: The connection of this AICategory.  # noqa: E501
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this AICategory.


        :param connection: The connection of this AICategory.  # noqa: E501
        :type: str
        """

        self._connection = connection

    @property
    def name(self):
        """Gets the name of this AICategory.  # noqa: E501


        :return: The name of this AICategory.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AICategory.


        :param name: The name of this AICategory.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def dataset(self):
        """Gets the dataset of this AICategory.  # noqa: E501


        :return: The dataset of this AICategory.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this AICategory.


        :param dataset: The dataset of this AICategory.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and dataset is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AICategory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AICategory):
            return True

        return self.to_dict() != other.to_dict()
