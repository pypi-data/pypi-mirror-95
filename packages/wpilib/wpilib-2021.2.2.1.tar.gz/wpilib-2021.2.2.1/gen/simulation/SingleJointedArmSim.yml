---

classes:
  SingleJointedArmSim:
    shared_ptr: true
    typealias:
    - frc::DCMotor
    - template <int S, int I, int O> using LinearSystem = frc::LinearSystem<S, I, O>
    methods:
      SingleJointedArmSim:
        overloads:
          ? LinearSystem<2, 1, 1>&, DCMotor&, double, units::meter_t, units::radian_t,
            units::radian_t, units::kilogram_t, bool, std::array<double, 1>&
          :
            param_override:
              measurementStdDevs:
                default: std::array<double, 1>{0.0}
          ? DCMotor&, double, units::kilogram_square_meter_t, units::meter_t, units::radian_t,
            units::radian_t, units::kilogram_t, bool, std::array<double, 1>&
          :
            param_override:
              measurementStdDevs:
                default: std::array<double, 1>{0.0}
      HasHitLowerLimit:
      HasHitUpperLimit:
      GetAngle:
      GetVelocity:
      GetCurrentDraw:
      SetInputVoltage:
      EstimateMOI:
      UpdateX:

inline_code: |
  cls_SingleJointedArmSim
    .def("getAngleDegrees", [](SingleJointedArmSim * self) -> units::degree_t {
      return self->GetAngle();
    })
    .def("getVelocityDps", [](SingleJointedArmSim * self) -> units::degrees_per_second_t {
      return self->GetVelocity();
    })
  ;