"""Autogenerated API"""
from argus_api import session



def add_mitre_category(
    externalId: str = None,
    shortName: str = None,
    name: str = None,
    version: str = None,
    type: str = None,
    model: str = None,
    url: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Adds a new MITRE category (DEV)
    
    :param str externalId: External ID of the MITRE category 
    :param str shortName: Short name of the MITRE category 
    :param str name: Detailed name of the MITRE category 
    :param str version: Version of the MITRE category 
    :param str type: Enumerated type of the MITRE category 
    :param str model: Enumerated threat model of the MITRE category 
    :param str url: URL of the external MITRE category page  => ((https?|ftp|gopher|telnet|file):((/)|(\\))+[\w\d:\#@%/;$()~_?\\+-=\\\.&]*):param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/alarms/v1/mitre".format()

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send externalId if the argument was provided, dont send null values
    if externalId is not None:
        body.update({"externalId": externalId})
    # Only send shortName if the argument was provided, dont send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send version if the argument was provided, dont send null values
    if version is not None:
        body.update({"version": version})
    # Only send type if the argument was provided, dont send null values
    if type is not None:
        body.update({"type": type})
    # Only send model if the argument was provided, dont send null values
    if model is not None:
        body.update({"model": model})
    # Only send url if the argument was provided, dont send null values
    if url is not None:
        body.update({"url": url})

    query_parameters = {}

    

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def delete_mitre_category(
    idOrExtIdOrShortName: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Deletes an existing MITRE category (DEV)
    
    :param str idOrExtIdOrShortName: ID, ExtID or short name of MITRE category:param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/{idOrExtIdOrShortName}".format(idOrExtIdOrShortName=idOrExtIdOrShortName)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}

    

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def get_mitre_category(
    idOrExtIdOrShortName: str,
    includeRelationships: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Gets an existing MITRE category (DEV)
    
    :param str idOrExtIdOrShortName: ID, ExtID or short name of MITRE category
    :param bool includeRelationships: To include MITRE category relationships or not (not included by default):param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/{idOrExtIdOrShortName}".format(idOrExtIdOrShortName=idOrExtIdOrShortName,
        includeRelationships=includeRelationships)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}

    query_parameters = {}
    # Only send includeRelationships if the argument was provided, dont send null values
    if includeRelationships is not None:
        query_parameters.update({"includeRelationships": includeRelationships})

    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()



def update_mitre_category(
    idOrExtIdOrShortName: str,
    name: str = None,
    type: str = None,
    model: str = None,
    url: str = None,
    deprecated: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
  ) -> dict:
    """Updates an existing MITRE category (DEV)
    
    :param str idOrExtIdOrShortName: ID, ExtID or short name of MITRE category
    :param str name: Detailed name of the MITRE category 
    :param str type: Enumerated type of the MITRE category 
    :param str model: Enumerated threat model of the MITRE category 
    :param str url: URL of the external MITRE category page  => ((https?|ftp|gopher|telnet|file):((/)|(\\))+[\w\d:\#@%/;$()~_?\\+-=\\\.&]*)
    :param bool deprecated: A boolean flag indicating if the MITRE category is deprecated :param json:
    :param verify: path to a certificate bundle or boolean indicating whether SSL
    verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/{idOrExtIdOrShortName}".format(idOrExtIdOrShortName=idOrExtIdOrShortName)

    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    body = body or {}
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send type if the argument was provided, dont send null values
    if type is not None:
        body.update({"type": type})
    # Only send model if the argument was provided, dont send null values
    if model is not None:
        body.update({"model": model})
    # Only send url if the argument was provided, dont send null values
    if url is not None:
        body.update({"url": url})
    # Only send deprecated if the argument was provided, dont send null values
    if deprecated is not None:
        body.update({"deprecated": deprecated})

    query_parameters = {}

    

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json()

