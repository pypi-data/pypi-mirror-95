# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tetrahedron
else:
    import _tetrahedron

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tetrahedron.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tetrahedron.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._par.fe
import mfem._par.array
import mfem._par.mem_manager
import mfem._par.vector
import mfem._par.geom
import mfem._par.intrules
import mfem._par.densemat
import mfem._par.operators
import mfem._par.matrix
import mfem._par.sparsemat
import mfem._par.element
import mfem._par.globals
import mfem._par.table
import mfem._par.hash
class Tetrahedron(mfem._par.element.Element):
    r"""Proxy of C++ mfem::Tetrahedron class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TYPE_PU = _tetrahedron.Tetrahedron_TYPE_PU
    
    TYPE_A = _tetrahedron.Tetrahedron_TYPE_A
    
    TYPE_PF = _tetrahedron.Tetrahedron_TYPE_PF
    
    TYPE_O = _tetrahedron.Tetrahedron_TYPE_O
    
    TYPE_M = _tetrahedron.Tetrahedron_TYPE_M
    

    def __init__(self, *args):
        r"""
        __init__(Tetrahedron self) -> Tetrahedron
        __init__(Tetrahedron self, int const * ind, int attr=1) -> Tetrahedron
        __init__(Tetrahedron self, int ind1, int ind2, int ind3, int ind4, int attr=1) -> Tetrahedron
        """
        _tetrahedron.Tetrahedron_swiginit(self, _tetrahedron.new_Tetrahedron(*args))

    def Init(self, ind1, ind2, ind3, ind4, attr=1, ref_flag=0):
        r"""Init(Tetrahedron self, int ind1, int ind2, int ind3, int ind4, int attr=1, int ref_flag=0)"""
        return _tetrahedron.Tetrahedron_Init(self, ind1, ind2, ind3, ind4, attr, ref_flag)
    Init = _swig_new_instance_method(_tetrahedron.Tetrahedron_Init)

    def GetType(self):
        r"""GetType(Tetrahedron self) -> mfem::Element::Type"""
        return _tetrahedron.Tetrahedron_GetType(self)
    GetType = _swig_new_instance_method(_tetrahedron.Tetrahedron_GetType)

    def ParseRefinementFlag(self, refinement_edges, type, flag):
        r"""ParseRefinementFlag(Tetrahedron self, int [2] refinement_edges, int & type, int & flag)"""
        return _tetrahedron.Tetrahedron_ParseRefinementFlag(self, refinement_edges, type, flag)
    ParseRefinementFlag = _swig_new_instance_method(_tetrahedron.Tetrahedron_ParseRefinementFlag)

    def CreateRefinementFlag(self, refinement_edges, type, flag=0):
        r"""CreateRefinementFlag(Tetrahedron self, int [2] refinement_edges, int type, int flag=0)"""
        return _tetrahedron.Tetrahedron_CreateRefinementFlag(self, refinement_edges, type, flag)
    CreateRefinementFlag = _swig_new_instance_method(_tetrahedron.Tetrahedron_CreateRefinementFlag)

    def GetMarkedFace(self, face, fv):
        r"""GetMarkedFace(Tetrahedron self, int const face, int * fv)"""
        return _tetrahedron.Tetrahedron_GetMarkedFace(self, face, fv)
    GetMarkedFace = _swig_new_instance_method(_tetrahedron.Tetrahedron_GetMarkedFace)

    def GetRefinementFlag(self):
        r"""GetRefinementFlag(Tetrahedron self) -> int"""
        return _tetrahedron.Tetrahedron_GetRefinementFlag(self)
    GetRefinementFlag = _swig_new_instance_method(_tetrahedron.Tetrahedron_GetRefinementFlag)

    def SetRefinementFlag(self, rf):
        r"""SetRefinementFlag(Tetrahedron self, int rf)"""
        return _tetrahedron.Tetrahedron_SetRefinementFlag(self, rf)
    SetRefinementFlag = _swig_new_instance_method(_tetrahedron.Tetrahedron_SetRefinementFlag)

    def NeedRefinement(self, v_to_v):
        r"""NeedRefinement(Tetrahedron self, mfem::HashTable< mfem::Hashed2 > & v_to_v) -> int"""
        return _tetrahedron.Tetrahedron_NeedRefinement(self, v_to_v)
    NeedRefinement = _swig_new_instance_method(_tetrahedron.Tetrahedron_NeedRefinement)

    def SetVertices(self, ind):
        r"""SetVertices(Tetrahedron self, int const * ind)"""
        return _tetrahedron.Tetrahedron_SetVertices(self, ind)
    SetVertices = _swig_new_instance_method(_tetrahedron.Tetrahedron_SetVertices)

    def MarkEdge(self, v_to_v, length):
        r"""MarkEdge(Tetrahedron self, DSTable v_to_v, int const * length)"""
        return _tetrahedron.Tetrahedron_MarkEdge(self, v_to_v, length)
    MarkEdge = _swig_new_instance_method(_tetrahedron.Tetrahedron_MarkEdge)

    def ResetTransform(self, tr):
        r"""ResetTransform(Tetrahedron self, int tr)"""
        return _tetrahedron.Tetrahedron_ResetTransform(self, tr)
    ResetTransform = _swig_new_instance_method(_tetrahedron.Tetrahedron_ResetTransform)

    def GetTransform(self):
        r"""GetTransform(Tetrahedron self) -> unsigned int"""
        return _tetrahedron.Tetrahedron_GetTransform(self)
    GetTransform = _swig_new_instance_method(_tetrahedron.Tetrahedron_GetTransform)

    def PushTransform(self, tr):
        r"""PushTransform(Tetrahedron self, int tr)"""
        return _tetrahedron.Tetrahedron_PushTransform(self, tr)
    PushTransform = _swig_new_instance_method(_tetrahedron.Tetrahedron_PushTransform)

    @staticmethod
    def GetPointMatrix(transform, pm):
        r"""GetPointMatrix(unsigned int transform, DenseMatrix pm)"""
        return _tetrahedron.Tetrahedron_GetPointMatrix(transform, pm)
    GetPointMatrix = _swig_new_static_method(_tetrahedron.Tetrahedron_GetPointMatrix)

    def GetVertices(self, *args):
        r"""
        GetVertices(Tetrahedron self, intArray v)
        GetVertices(Tetrahedron self) -> int *
        """
        return _tetrahedron.Tetrahedron_GetVertices(self, *args)
    GetVertices = _swig_new_instance_method(_tetrahedron.Tetrahedron_GetVertices)

    def GetNVertices(self):
        r"""GetNVertices(Tetrahedron self) -> int"""
        return _tetrahedron.Tetrahedron_GetNVertices(self)
    GetNVertices = _swig_new_instance_method(_tetrahedron.Tetrahedron_GetNVertices)

    def GetNEdges(self):
        r"""GetNEdges(Tetrahedron self) -> int"""
        return _tetrahedron.Tetrahedron_GetNEdges(self)
    GetNEdges = _swig_new_instance_method(_tetrahedron.Tetrahedron_GetNEdges)

    def GetEdgeVertices(self, ei):
        r"""GetEdgeVertices(Tetrahedron self, int ei) -> int const *"""
        return _tetrahedron.Tetrahedron_GetEdgeVertices(self, ei)
    GetEdgeVertices = _swig_new_instance_method(_tetrahedron.Tetrahedron_GetEdgeVertices)

    def GetNFaces(self, *args):
        r"""
        GetNFaces(Tetrahedron self, int & nFaceVertices) -> int
        GetNFaces(Tetrahedron self) -> int
        """

        if len(args) == 1:
             import warnings
             warnings.warn("Tetrahedron::GetNFaces(int & nFaceVertices) is deprecated is deprecated",
         	              DeprecationWarning,)


        return _tetrahedron.Tetrahedron_GetNFaces(self, *args)


    def GetNFaceVertices(self, arg2):
        r"""GetNFaceVertices(Tetrahedron self, int arg2) -> int"""
        return _tetrahedron.Tetrahedron_GetNFaceVertices(self, arg2)
    GetNFaceVertices = _swig_new_instance_method(_tetrahedron.Tetrahedron_GetNFaceVertices)

    def GetFaceVertices(self, fi):
        r"""GetFaceVertices(Tetrahedron self, int fi) -> int const *"""
        return _tetrahedron.Tetrahedron_GetFaceVertices(self, fi)
    GetFaceVertices = _swig_new_instance_method(_tetrahedron.Tetrahedron_GetFaceVertices)

    def Duplicate(self, m):
        r"""Duplicate(Tetrahedron self, mfem::Mesh * m) -> Element"""
        return _tetrahedron.Tetrahedron_Duplicate(self, m)
    Duplicate = _swig_new_instance_method(_tetrahedron.Tetrahedron_Duplicate)
    __swig_destroy__ = _tetrahedron.delete_Tetrahedron

# Register Tetrahedron in _tetrahedron:
_tetrahedron.Tetrahedron_swigregister(Tetrahedron)

def Tetrahedron_GetPointMatrix(transform, pm):
    r"""Tetrahedron_GetPointMatrix(unsigned int transform, DenseMatrix pm)"""
    return _tetrahedron.Tetrahedron_GetPointMatrix(transform, pm)
Tetrahedron_GetPointMatrix = _tetrahedron.Tetrahedron_GetPointMatrix


cvar = _tetrahedron.cvar

