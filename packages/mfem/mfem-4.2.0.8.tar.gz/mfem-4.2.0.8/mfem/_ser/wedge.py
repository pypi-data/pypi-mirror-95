# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _wedge
else:
    import _wedge

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _wedge.SWIG_PyInstanceMethod_New
_swig_new_static_method = _wedge.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.fe
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.vector
import mfem._ser.geom
import mfem._ser.intrules
import mfem._ser.densemat
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.sparsemat
import mfem._ser.element
import mfem._ser.globals
import mfem._ser.table
import mfem._ser.hash
class Wedge(mfem._ser.element.Element):
    r"""Proxy of C++ mfem::Wedge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Wedge self) -> Wedge
        __init__(Wedge self, int const * ind, int attr=1) -> Wedge
        __init__(Wedge self, int ind1, int ind2, int ind3, int ind4, int ind5, int ind6, int attr=1) -> Wedge
        """
        _wedge.Wedge_swiginit(self, _wedge.new_Wedge(*args))

    def GetType(self):
        r"""GetType(Wedge self) -> mfem::Element::Type"""
        return _wedge.Wedge_GetType(self)
    GetType = _swig_new_instance_method(_wedge.Wedge_GetType)

    def SetVertices(self, ind):
        r"""SetVertices(Wedge self, int const * ind)"""
        return _wedge.Wedge_SetVertices(self, ind)
    SetVertices = _swig_new_instance_method(_wedge.Wedge_SetVertices)

    def GetVertices(self, *args):
        r"""
        GetVertices(Wedge self, intArray v)
        GetVertices(Wedge self) -> int *
        """
        return _wedge.Wedge_GetVertices(self, *args)
    GetVertices = _swig_new_instance_method(_wedge.Wedge_GetVertices)

    def GetNVertices(self):
        r"""GetNVertices(Wedge self) -> int"""
        return _wedge.Wedge_GetNVertices(self)
    GetNVertices = _swig_new_instance_method(_wedge.Wedge_GetNVertices)

    def GetNEdges(self):
        r"""GetNEdges(Wedge self) -> int"""
        return _wedge.Wedge_GetNEdges(self)
    GetNEdges = _swig_new_instance_method(_wedge.Wedge_GetNEdges)

    def GetEdgeVertices(self, ei):
        r"""GetEdgeVertices(Wedge self, int ei) -> int const *"""
        return _wedge.Wedge_GetEdgeVertices(self, ei)
    GetEdgeVertices = _swig_new_instance_method(_wedge.Wedge_GetEdgeVertices)

    def GetNFaces(self, *args):
        r"""
        GetNFaces(Wedge self, int & nFaceVertices) -> int
        GetNFaces(Wedge self) -> int
        """

        if len(args) == 1:
             import warnings
             warnings.warn("Wedge::GetNFaces(int & nFaceVertices) is deprecated is deprecated",
         	              DeprecationWarning,)


        return _wedge.Wedge_GetNFaces(self, *args)


    def GetNFaceVertices(self, fi):
        r"""GetNFaceVertices(Wedge self, int fi) -> int"""
        return _wedge.Wedge_GetNFaceVertices(self, fi)
    GetNFaceVertices = _swig_new_instance_method(_wedge.Wedge_GetNFaceVertices)

    def GetFaceVertices(self, fi):
        r"""GetFaceVertices(Wedge self, int fi) -> int const *"""
        return _wedge.Wedge_GetFaceVertices(self, fi)
    GetFaceVertices = _swig_new_instance_method(_wedge.Wedge_GetFaceVertices)

    def Duplicate(self, m):
        r"""Duplicate(Wedge self, mfem::Mesh * m) -> Element"""
        return _wedge.Wedge_Duplicate(self, m)
    Duplicate = _swig_new_instance_method(_wedge.Wedge_Duplicate)
    __swig_destroy__ = _wedge.delete_Wedge

# Register Wedge in _wedge:
_wedge.Wedge_swigregister(Wedge)



