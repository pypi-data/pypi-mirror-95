# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _element
else:
    import _element

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _element.SWIG_PyInstanceMethod_New
_swig_new_static_method = _element.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._par.globals
import mfem._par.array
import mfem._par.mem_manager
import mfem._par.densemat
import mfem._par.vector
import mfem._par.operators
import mfem._par.matrix
import mfem._par.geom
import mfem._par.intrules
import mfem._par.table
import mfem._par.hash
class Element(object):
    r"""Proxy of C++ mfem::Element class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    POINT = _element.Element_POINT
    
    SEGMENT = _element.Element_SEGMENT
    
    TRIANGLE = _element.Element_TRIANGLE
    
    QUADRILATERAL = _element.Element_QUADRILATERAL
    
    TETRAHEDRON = _element.Element_TETRAHEDRON
    
    HEXAHEDRON = _element.Element_HEXAHEDRON
    
    WEDGE = _element.Element_WEDGE
    

    def GetType(self):
        r"""GetType(Element self) -> mfem::Element::Type"""
        return _element.Element_GetType(self)
    GetType = _swig_new_instance_method(_element.Element_GetType)

    def GetGeometryType(self):
        r"""GetGeometryType(Element self) -> mfem::Geometry::Type"""
        return _element.Element_GetGeometryType(self)
    GetGeometryType = _swig_new_instance_method(_element.Element_GetGeometryType)

    def GetAttribute(self):
        r"""GetAttribute(Element self) -> int"""
        return _element.Element_GetAttribute(self)
    GetAttribute = _swig_new_instance_method(_element.Element_GetAttribute)

    def SetAttribute(self, attr):
        r"""SetAttribute(Element self, int const attr)"""
        return _element.Element_SetAttribute(self, attr)
    SetAttribute = _swig_new_instance_method(_element.Element_SetAttribute)

    def SetVertices(self, ind):
        r"""SetVertices(Element self, int const * ind)"""
        return _element.Element_SetVertices(self, ind)
    SetVertices = _swig_new_instance_method(_element.Element_SetVertices)

    def GetVertices(self, *args):
        r"""
        GetVertices(Element self, intArray v)
        GetVertices(Element self) -> int
        GetVertices(Element self) -> int const *
        """
        return _element.Element_GetVertices(self, *args)
    GetVertices = _swig_new_instance_method(_element.Element_GetVertices)

    def GetNVertices(self):
        r"""GetNVertices(Element self) -> int"""
        return _element.Element_GetNVertices(self)
    GetNVertices = _swig_new_instance_method(_element.Element_GetNVertices)

    def GetNEdges(self):
        r"""GetNEdges(Element self) -> int"""
        return _element.Element_GetNEdges(self)
    GetNEdges = _swig_new_instance_method(_element.Element_GetNEdges)

    def GetEdgeVertices(self, arg2):
        r"""GetEdgeVertices(Element self, int arg2) -> int const *"""
        return _element.Element_GetEdgeVertices(self, arg2)
    GetEdgeVertices = _swig_new_instance_method(_element.Element_GetEdgeVertices)

    def GetNFaces(self, *args):
        r"""
        GetNFaces(Element self, int & nFaceVertices) -> int
        GetNFaces(Element self) -> int
        """
        return _element.Element_GetNFaces(self, *args)
    GetNFaces = _swig_new_instance_method(_element.Element_GetNFaces)

    def GetNFaceVertices(self, fi):
        r"""GetNFaceVertices(Element self, int fi) -> int"""
        return _element.Element_GetNFaceVertices(self, fi)
    GetNFaceVertices = _swig_new_instance_method(_element.Element_GetNFaceVertices)

    def GetFaceVertices(self, fi):
        r"""GetFaceVertices(Element self, int fi) -> int const *"""
        return _element.Element_GetFaceVertices(self, fi)
    GetFaceVertices = _swig_new_instance_method(_element.Element_GetFaceVertices)

    def MarkEdge(self, v_to_v, length):
        r"""MarkEdge(Element self, DSTable v_to_v, int const * length)"""
        return _element.Element_MarkEdge(self, v_to_v, length)
    MarkEdge = _swig_new_instance_method(_element.Element_MarkEdge)

    def NeedRefinement(self, v_to_v):
        r"""NeedRefinement(Element self, mfem::HashTable< mfem::Hashed2 > & v_to_v) -> int"""
        return _element.Element_NeedRefinement(self, v_to_v)
    NeedRefinement = _swig_new_instance_method(_element.Element_NeedRefinement)

    def ResetTransform(self, tr):
        r"""ResetTransform(Element self, int tr)"""
        return _element.Element_ResetTransform(self, tr)
    ResetTransform = _swig_new_instance_method(_element.Element_ResetTransform)

    def PushTransform(self, tr):
        r"""PushTransform(Element self, int tr)"""
        return _element.Element_PushTransform(self, tr)
    PushTransform = _swig_new_instance_method(_element.Element_PushTransform)

    def GetTransform(self):
        r"""GetTransform(Element self) -> unsigned int"""
        return _element.Element_GetTransform(self)
    GetTransform = _swig_new_instance_method(_element.Element_GetTransform)

    def Duplicate(self, m):
        r"""Duplicate(Element self, mfem::Mesh * m) -> Element"""
        return _element.Element_Duplicate(self, m)
    Duplicate = _swig_new_instance_method(_element.Element_Duplicate)
    __swig_destroy__ = _element.delete_Element

    def GetVerticesArray(self):
        r"""GetVerticesArray(Element self) -> PyObject *"""
        return _element.Element_GetVerticesArray(self)
    GetVerticesArray = _swig_new_instance_method(_element.Element_GetVerticesArray)

# Register Element in _element:
_element.Element_swigregister(Element)



