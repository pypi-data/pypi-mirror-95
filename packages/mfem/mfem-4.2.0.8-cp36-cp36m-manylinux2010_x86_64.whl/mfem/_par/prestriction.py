# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _prestriction
else:
    import _prestriction

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _prestriction.SWIG_PyInstanceMethod_New
_swig_new_static_method = _prestriction.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._par.element
import mfem._par.globals
import mfem._par.array
import mfem._par.mem_manager
import mfem._par.densemat
import mfem._par.vector
import mfem._par.operators
import mfem._par.matrix
import mfem._par.geom
import mfem._par.intrules
import mfem._par.table
import mfem._par.hash
import mfem._par.restriction
import mfem._par.mesh
import mfem._par.sort_pairs
import mfem._par.ncmesh
import mfem._par.vtk
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.coefficient
import mfem._par.sparsemat
import mfem._par.eltrans
import mfem._par.fe
import mfem._par.fespace
import mfem._par.fe_coll
import mfem._par.lininteg
import mfem._par.handle
import mfem._par.hypre
import mfem._par.bilininteg
import mfem._par.linearform
class ParL2FaceRestriction(mfem._par.restriction.L2FaceRestriction):
    r"""Proxy of C++ mfem::ParL2FaceRestriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(ParL2FaceRestriction self, mfem::ParFiniteElementSpace const & arg2, mfem::ElementDofOrdering arg3, mfem::FaceType type, mfem::L2FaceValues m=DoubleValued) -> ParL2FaceRestriction"""
        _prestriction.ParL2FaceRestriction_swiginit(self, _prestriction.new_ParL2FaceRestriction(*args, **kwargs))

    def Mult(self, x, y):
        r"""Mult(ParL2FaceRestriction self, Vector x, Vector y)"""
        return _prestriction.ParL2FaceRestriction_Mult(self, x, y)
    Mult = _swig_new_instance_method(_prestriction.ParL2FaceRestriction_Mult)

    def FillI(self, mat, face_mat):
        r"""FillI(ParL2FaceRestriction self, SparseMatrix mat, SparseMatrix face_mat)"""
        return _prestriction.ParL2FaceRestriction_FillI(self, mat, face_mat)
    FillI = _swig_new_instance_method(_prestriction.ParL2FaceRestriction_FillI)

    def FillJAndData(self, ea_data, mat, face_mat):
        r"""FillJAndData(ParL2FaceRestriction self, Vector ea_data, SparseMatrix mat, SparseMatrix face_mat)"""
        return _prestriction.ParL2FaceRestriction_FillJAndData(self, ea_data, mat, face_mat)
    FillJAndData = _swig_new_instance_method(_prestriction.ParL2FaceRestriction_FillJAndData)
    __swig_destroy__ = _prestriction.delete_ParL2FaceRestriction

# Register ParL2FaceRestriction in _prestriction:
_prestriction.ParL2FaceRestriction_swigregister(ParL2FaceRestriction)



