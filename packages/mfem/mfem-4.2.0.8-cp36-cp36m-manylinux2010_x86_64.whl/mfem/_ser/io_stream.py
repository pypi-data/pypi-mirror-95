# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _io_stream
else:
    import _io_stream

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _io_stream.SWIG_PyInstanceMethod_New
_swig_new_static_method = _io_stream.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class wFILE(object):
    r"""Proxy of C++ PyMFEM::wFILE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(wFILE self) -> wFILE
        __init__(wFILE self, char const * filename, int precision=8) -> wFILE
        """
        _io_stream.wFILE_swiginit(self, _io_stream.new_wFILE(*args))

    def isSTDOUT(self):
        r"""isSTDOUT(wFILE self) -> int"""
        return _io_stream.wFILE_isSTDOUT(self)
    isSTDOUT = _swig_new_instance_method(_io_stream.wFILE_isSTDOUT)

    def getFilename(self):
        r"""getFilename(wFILE self) -> char *"""
        return _io_stream.wFILE_getFilename(self)
    getFilename = _swig_new_instance_method(_io_stream.wFILE_getFilename)

    def getPrecision(self):
        r"""getPrecision(wFILE self) -> int"""
        return _io_stream.wFILE_getPrecision(self)
    getPrecision = _swig_new_instance_method(_io_stream.wFILE_getPrecision)

    def setPrecision(self, precision):
        r"""setPrecision(wFILE self, int precision)"""
        return _io_stream.wFILE_setPrecision(self, precision)
    setPrecision = _swig_new_instance_method(_io_stream.wFILE_setPrecision)
    __swig_destroy__ = _io_stream.delete_wFILE

# Register wFILE in _io_stream:
_io_stream.wFILE_swigregister(wFILE)


STDOUT = wFILE('__stdout__', 8)



