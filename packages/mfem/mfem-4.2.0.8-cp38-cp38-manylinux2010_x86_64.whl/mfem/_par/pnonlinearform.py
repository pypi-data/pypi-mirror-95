# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pnonlinearform
else:
    import _pnonlinearform

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _pnonlinearform.SWIG_PyInstanceMethod_New
_swig_new_static_method = _pnonlinearform.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

MFEM_VERSION = _pnonlinearform.MFEM_VERSION
MFEM_VERSION_STRING = _pnonlinearform.MFEM_VERSION_STRING
MFEM_VERSION_TYPE = _pnonlinearform.MFEM_VERSION_TYPE
MFEM_VERSION_TYPE_RELEASE = _pnonlinearform.MFEM_VERSION_TYPE_RELEASE
MFEM_VERSION_TYPE_DEVELOPMENT = _pnonlinearform.MFEM_VERSION_TYPE_DEVELOPMENT
MFEM_VERSION_MAJOR = _pnonlinearform.MFEM_VERSION_MAJOR
MFEM_VERSION_MINOR = _pnonlinearform.MFEM_VERSION_MINOR
MFEM_VERSION_PATCH = _pnonlinearform.MFEM_VERSION_PATCH
MFEM_HYPRE_VERSION = _pnonlinearform.MFEM_HYPRE_VERSION
import mfem._par.vector
import mfem._par.array
import mfem._par.mem_manager
import mfem._par.nonlinearform
import mfem._par.operators
import mfem._par.fespace
import mfem._par.coefficient
import mfem._par.globals
import mfem._par.matrix
import mfem._par.intrules
import mfem._par.sparsemat
import mfem._par.densemat
import mfem._par.eltrans
import mfem._par.fe
import mfem._par.geom
import mfem._par.mesh
import mfem._par.sort_pairs
import mfem._par.ncmesh
import mfem._par.vtk
import mfem._par.element
import mfem._par.table
import mfem._par.hash
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.bilininteg
import mfem._par.fe_coll
import mfem._par.lininteg
import mfem._par.linearform
import mfem._par.handle
import mfem._par.hypre
import mfem._par.restriction
import mfem._par.bilinearform
import mfem._par.nonlininteg
import mfem._par.blockoperator
import mfem._par.pfespace
import mfem._par.pmesh
import mfem._par.pncmesh
import mfem._par.communication
import mfem._par.sets
import mfem._par.pgridfunc
class ParNonlinearForm(mfem._par.nonlinearform.NonlinearForm):
    r"""Proxy of C++ mfem::ParNonlinearForm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pf):
        r"""__init__(ParNonlinearForm self, ParFiniteElementSpace pf) -> ParNonlinearForm"""
        _pnonlinearform.ParNonlinearForm_swiginit(self, _pnonlinearform.new_ParNonlinearForm(pf))

    def ParFESpace(self):
        r"""ParFESpace(ParNonlinearForm self) -> ParFiniteElementSpace"""
        return _pnonlinearform.ParNonlinearForm_ParFESpace(self)
    ParFESpace = _swig_new_instance_method(_pnonlinearform.ParNonlinearForm_ParFESpace)

    def GetParGridFunctionEnergy(self, x):
        r"""GetParGridFunctionEnergy(ParNonlinearForm self, Vector x) -> double"""
        return _pnonlinearform.ParNonlinearForm_GetParGridFunctionEnergy(self, x)
    GetParGridFunctionEnergy = _swig_new_instance_method(_pnonlinearform.ParNonlinearForm_GetParGridFunctionEnergy)

    def GetEnergy(self, *args):
        r"""
        GetEnergy(ParNonlinearForm self, ParGridFunction x) -> double
        GetEnergy(ParNonlinearForm self, Vector x) -> double
        """
        return _pnonlinearform.ParNonlinearForm_GetEnergy(self, *args)
    GetEnergy = _swig_new_instance_method(_pnonlinearform.ParNonlinearForm_GetEnergy)

    def Mult(self, x, y):
        r"""Mult(ParNonlinearForm self, Vector x, Vector y)"""
        return _pnonlinearform.ParNonlinearForm_Mult(self, x, y)
    Mult = _swig_new_instance_method(_pnonlinearform.ParNonlinearForm_Mult)

    def GetLocalGradient(self, x):
        r"""GetLocalGradient(ParNonlinearForm self, Vector x) -> SparseMatrix"""
        return _pnonlinearform.ParNonlinearForm_GetLocalGradient(self, x)
    GetLocalGradient = _swig_new_instance_method(_pnonlinearform.ParNonlinearForm_GetLocalGradient)

    def GetGradient(self, x):
        r"""GetGradient(ParNonlinearForm self, Vector x) -> Operator"""
        return _pnonlinearform.ParNonlinearForm_GetGradient(self, x)
    GetGradient = _swig_new_instance_method(_pnonlinearform.ParNonlinearForm_GetGradient)

    def SetGradientType(self, tid):
        r"""SetGradientType(ParNonlinearForm self, mfem::Operator::Type tid)"""
        return _pnonlinearform.ParNonlinearForm_SetGradientType(self, tid)
    SetGradientType = _swig_new_instance_method(_pnonlinearform.ParNonlinearForm_SetGradientType)

    def Update(self):
        r"""Update(ParNonlinearForm self)"""
        return _pnonlinearform.ParNonlinearForm_Update(self)
    Update = _swig_new_instance_method(_pnonlinearform.ParNonlinearForm_Update)
    __swig_destroy__ = _pnonlinearform.delete_ParNonlinearForm

# Register ParNonlinearForm in _pnonlinearform:
_pnonlinearform.ParNonlinearForm_swigregister(ParNonlinearForm)

class ParBlockNonlinearForm(mfem._par.nonlinearform.BlockNonlinearForm):
    r"""Proxy of C++ mfem::ParBlockNonlinearForm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetEnergy(self, x):
        r"""GetEnergy(ParBlockNonlinearForm self, Vector x) -> double"""
        return _pnonlinearform.ParBlockNonlinearForm_GetEnergy(self, x)
    GetEnergy = _swig_new_instance_method(_pnonlinearform.ParBlockNonlinearForm_GetEnergy)

    def __init__(self, *args):
        r"""
        __init__(ParBlockNonlinearForm self) -> ParBlockNonlinearForm
        __init__(ParBlockNonlinearForm self, mfem::Array< mfem::ParFiniteElementSpace * > & pf) -> ParBlockNonlinearForm
        """
        _pnonlinearform.ParBlockNonlinearForm_swiginit(self, _pnonlinearform.new_ParBlockNonlinearForm(*args))

    def ParFESpace(self, *args):
        r"""
        ParFESpace(ParBlockNonlinearForm self, int k) -> ParFiniteElementSpace
        ParFESpace(ParBlockNonlinearForm self, int k) -> ParFiniteElementSpace
        """
        return _pnonlinearform.ParBlockNonlinearForm_ParFESpace(self, *args)
    ParFESpace = _swig_new_instance_method(_pnonlinearform.ParBlockNonlinearForm_ParFESpace)

    def SetParSpaces(self, pf):
        r"""SetParSpaces(ParBlockNonlinearForm self, mfem::Array< mfem::ParFiniteElementSpace * > & pf)"""
        return _pnonlinearform.ParBlockNonlinearForm_SetParSpaces(self, pf)
    SetParSpaces = _swig_new_instance_method(_pnonlinearform.ParBlockNonlinearForm_SetParSpaces)

    def SetEssentialBC(self, bdr_attr_is_ess, rhs):
        r"""SetEssentialBC(ParBlockNonlinearForm self, mfem::Array< mfem::Array< int > * > const & bdr_attr_is_ess, mfem::Array< mfem::Vector * > & rhs)"""
        return _pnonlinearform.ParBlockNonlinearForm_SetEssentialBC(self, bdr_attr_is_ess, rhs)
    SetEssentialBC = _swig_new_instance_method(_pnonlinearform.ParBlockNonlinearForm_SetEssentialBC)

    def Mult(self, x, y):
        r"""Mult(ParBlockNonlinearForm self, Vector x, Vector y)"""
        return _pnonlinearform.ParBlockNonlinearForm_Mult(self, x, y)
    Mult = _swig_new_instance_method(_pnonlinearform.ParBlockNonlinearForm_Mult)

    def GetLocalGradient(self, x):
        r"""GetLocalGradient(ParBlockNonlinearForm self, Vector x) -> BlockOperator"""
        return _pnonlinearform.ParBlockNonlinearForm_GetLocalGradient(self, x)
    GetLocalGradient = _swig_new_instance_method(_pnonlinearform.ParBlockNonlinearForm_GetLocalGradient)

    def GetGradient(self, x):
        r"""GetGradient(ParBlockNonlinearForm self, Vector x) -> BlockOperator"""
        return _pnonlinearform.ParBlockNonlinearForm_GetGradient(self, x)
    GetGradient = _swig_new_instance_method(_pnonlinearform.ParBlockNonlinearForm_GetGradient)

    def SetGradientType(self, tid):
        r"""SetGradientType(ParBlockNonlinearForm self, mfem::Operator::Type tid)"""
        return _pnonlinearform.ParBlockNonlinearForm_SetGradientType(self, tid)
    SetGradientType = _swig_new_instance_method(_pnonlinearform.ParBlockNonlinearForm_SetGradientType)
    __swig_destroy__ = _pnonlinearform.delete_ParBlockNonlinearForm

# Register ParBlockNonlinearForm in _pnonlinearform:
_pnonlinearform.ParBlockNonlinearForm_swigregister(ParBlockNonlinearForm)



