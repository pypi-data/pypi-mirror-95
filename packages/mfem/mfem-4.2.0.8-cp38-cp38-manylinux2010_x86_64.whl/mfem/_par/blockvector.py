# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _blockvector
else:
    import _blockvector

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _blockvector.SWIG_PyInstanceMethod_New
_swig_new_static_method = _blockvector.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import mfem._par.array
import mfem._par.mem_manager
import mfem._par.vector
class BlockVector(mfem._par.vector.Vector):
    r"""Proxy of C++ mfem::BlockVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BlockVector self) -> BlockVector
        __init__(BlockVector self, intArray bOffsets) -> BlockVector
        __init__(BlockVector self, intArray bOffsets, mfem::MemoryType mt) -> BlockVector
        __init__(BlockVector self, BlockVector block) -> BlockVector
        __init__(BlockVector self, double * data, intArray bOffsets) -> BlockVector
        """
        _blockvector.BlockVector_swiginit(self, _blockvector.new_BlockVector(*args))

    def NumBlocks(self):
        r"""NumBlocks(BlockVector self) -> int"""
        return _blockvector.BlockVector_NumBlocks(self)
    NumBlocks = _swig_new_instance_method(_blockvector.BlockVector_NumBlocks)
    __swig_destroy__ = _blockvector.delete_BlockVector

    def GetBlock(self, *args):
        r"""
        GetBlock(BlockVector self, int i) -> Vector
        GetBlock(BlockVector self, int i) -> Vector
        """
        return _blockvector.BlockVector_GetBlock(self, *args)
    GetBlock = _swig_new_instance_method(_blockvector.BlockVector_GetBlock)

    def GetBlockView(self, i, blockView):
        r"""GetBlockView(BlockVector self, int i, Vector blockView)"""
        return _blockvector.BlockVector_GetBlockView(self, i, blockView)
    GetBlockView = _swig_new_instance_method(_blockvector.BlockVector_GetBlockView)

    def BlockSize(self, i):
        r"""BlockSize(BlockVector self, int i) -> int"""
        return _blockvector.BlockVector_BlockSize(self, i)
    BlockSize = _swig_new_instance_method(_blockvector.BlockVector_BlockSize)

    def Update(self, *args):
        r"""
        Update(BlockVector self, double * data, intArray bOffsets)
        Update(BlockVector self, Vector data, intArray bOffsets)
        Update(BlockVector self, intArray bOffsets)
        Update(BlockVector self, intArray bOffsets, mfem::MemoryType mt)
        """
        return _blockvector.BlockVector_Update(self, *args)
    Update = _swig_new_instance_method(_blockvector.BlockVector_Update)

# Register BlockVector in _blockvector:
_blockvector.BlockVector_swigregister(BlockVector)



