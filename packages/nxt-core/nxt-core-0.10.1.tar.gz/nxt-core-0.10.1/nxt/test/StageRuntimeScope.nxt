{
    "version": "1.15",
    "alias": "StageRuntimeScope",
    "color": "#119B77",
    "references": [],
    "meta_data": {
        "positions": {
            "/g": [
                -300.0,
                -1.624228474235661
            ],
            "/lines": [
                0.0,
                0.0,
                0.0
            ],
            "/setup": [
                -601.1698116394377,
                0.0
            ],
            "/lam": [
                0.9461918393342188,
                0.0
            ]
        },
        "start_nodes": [
            "/setup"
        ]
    },
    "nodes": {
        "/g": {
            "attrs": {
                "result": {
                    "type": "NoneType"
                }
            },
            "execute_in": "/setup",
            "code": [
                "self.result = math.floor(1.5)",
                "print(self.result)",
                "try:",
                "    print(foo)",
                "    raise Exception('Foo should not be accessible')",
                "except NameError:",
                "    pass"
            ]
        },
        "/lam": {
            "attrs": {
                "result": {
                    "type": "NoneType"
                }
            },
            "execute_in": "/g",
            "code": [
                "colorC = 'c'",
                "colorL = 'l'",
                "colorR = 'r'",
                "",
                "# colorSide = lambda x, colorL=colorL, colorR=colorR, colorC=colorC: colorL if 'L' in x else colorR if 'R' in x else colorC",
                "colorSide = lambda x: colorL if 'L' in x else colorR if 'R' in x else colorC",
                "",
                "",
                "n = colorSide('corner_L')",
                "self.result = n",
                "print(self.result)"
            ]
        },
        "/lines": {
            "code": [
                "# test",
                "# test",
                "print('test')",
                "# test",
                "self.attr = 5",
                "print('My attr is: ${attr} | ${/lines2.attr}')",
                "",
                "raise Exception",
                "",
                "foo = 10",
                "print(foo)",
                "",
                "global bar",
                "bar = 'bar'",
                "print(bar)"
            ]
        },
        "/setup": {
            "start_point": true,
            "code": [
                "global math",
                "import math",
                "foo = 'foo'"
            ]
        }
    }
}