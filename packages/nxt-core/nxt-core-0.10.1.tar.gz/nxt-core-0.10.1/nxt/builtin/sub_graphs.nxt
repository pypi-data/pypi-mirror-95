{
    "version": "1.17",
    "alias": "sub_graphs",
    "color": "#6e33bb",
    "mute": false,
    "solo": false,
    "nodes": {
        "/_sub_graph": {
            "attrs": {
                "_cache_file": {},
                "_graph_path": {
                    "type": "NoneType"
                },
                "_start": {
                    "type": "NoneType",
                    "value": "None"
                }
            },
            "code": [
                "import os",
                "import sys",
                "from nxt import nxt_node, nxt_path",
                "from nxt.stage import Stage",
                "",
                "if self._graph_path and os.path.isfile(self._graph_path):",
                "    sub_stage = Stage.load_from_filepath(self._graph_path)",
                "    ",
                "    # Assemble parameters dictionary",
                "    params = {}",
                "    for attr_name, attr_val in vars(self).items():",
                "        if attr_name in nxt_node.INTERNAL_ATTRS.PROTECTED:",
                "            continue",
                "        if attr_name in ('_graph_path', '_start'):",
                "            continue",
                "        attr_path = nxt_path.make_attr_path(nxt_path.WORLD, attr_name)",
                "        params[attr_path] = attr_val",
                "    ",
                "    result_rt_layer = sub_stage.execute(parameters=params, start=self._start)",
                "    if self._cache_file:",
                "        result_rt_layer.cache_layer.save('${_cache_file}')",
                "    # Bring attributes back from world node onto this node",
                "    world_frame_node = result_rt_layer.cache_layer.lookup(nxt_path.WORLD)",
                "    for attr_name, attr_val in vars(world_frame_node).items():",
                "        if attr_name in nxt_node.INTERNAL_ATTRS.PROTECTED:",
                "            continue",
                "        setattr(self, attr_name, attr_val)"
            ]
        }
    }
}