""":mod:`nirum.service` --- Runtime base of Nirum services
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

"""
import typing

from .constructs import NameDict
from .exc import (InvalidNirumServiceMethodNameError,
                  InvalidNirumServiceMethodTypeError)

__all__ = 'Service',


class Service(object):
    """Abstract base of Nirum services.

    All service classes generated by Nirum compiler inherit this.

    """

    __nirum_service_methods__ = {}
    __nirum_method_names__ = NameDict([])

    @staticmethod
    def __nirum_method_error_types__(k, d=None):
        return d

    def __init__(self):
        for method_name in self.__nirum_service_methods__:
            try:
                method = getattr(self, method_name)
            except AttributeError:
                raise InvalidNirumServiceMethodNameError(
                    '{0}.{1}() method has to be implemented.'.format(
                        typing._type_repr(type(self)), method_name
                    )
                )
            if not callable(method):
                raise InvalidNirumServiceMethodTypeError(
                    '{0}.{1} has to be callable so that is a method'.format(
                        typing._type_repr(type(self)), method_name
                    )
                )
