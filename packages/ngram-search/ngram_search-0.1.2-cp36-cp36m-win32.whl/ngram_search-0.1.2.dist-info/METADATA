Metadata-Version: 2.1
Name: ngram-search
Version: 0.1.2
Summary: Ngram-based indexing of strings into a binary file
Home-page: UNKNOWN
Author: Remi Rampin
Author-email: remirampin@gmail.com
License: MIT
Project-URL: Homepage, https://github.com/remram44/ngram-search
Project-URL: Source, https://github.com/remram44/ngram-search
Project-URL: Tracker, https://github.com/remram44/ngram-search/issues
Keywords: ngram,indexing,full-text,text-search,full-text-search
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Cython
Classifier: Topic :: Database
Classifier: Topic :: Text Processing

This library allows indexing many strings into a file, and then efficiently fuzzy-matching strings against what's been indexed.

Currently, the structure is built from the Rust program in memory before being written to the file, so that phase uses a lot of RAM. You cannot create/change an index from Python.

String search is done from the file and requires little memory.

The index is a trie structure in which trigrams can be looked up; results for each trigrams of the input are matched and sorted to get the most similar strings.

Example::

    >>> from ngram_search import Ngrams
    >>> ngrams = Ngrams(path)
    >>> ngrams.search("ham", 0.24)
    [(0, 1.0), (2, 0.25)]
    >>> ngrams.search("spa", 0.2)
    [(0, 0.375)]


