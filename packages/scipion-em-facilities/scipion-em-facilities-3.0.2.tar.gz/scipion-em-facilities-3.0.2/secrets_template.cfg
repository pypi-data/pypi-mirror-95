# usernames and password need to connect to
# influxdb and ssh server
# using the function enCrypt (see below)
# this encryption is weak but at least will stop casual users

# influx: information needed to acces to the "host"
# running influxdb. If you are not encrypting your
# communications set ssl = False
[influx]
usernameInflux=aW5mbHV4dXNlcm5hbWU=
passwordInflux=aW5mbHV4cGFzc3dk
dataBase=scipion
hostinflux=nolan.cnb.csic.es
port=8086
ssl=True
verify_ssl=False
timeZone =Europe/Madrid

# paramiko,  is a ssh client for python we use it to implement
# sftp and transfer images from scipion host to grafana host
# authentication is performed using username and a private key. 
# The path to the PRIVATE key (keyfilepath) is encrypted and should be similar to
# '/home/transferusername/.ssh/id_rsa' and the keyfiletype (also encrypted)
# should be either "RSA" or "DSA"
# Remember to add the public key to the host paramiko authoris_keys file
# Important: remote_path should be linked to the image directory with the name
# scipionbox: ln -s remotepath /usr/share/grafana/public/img/scipionbox
[paramiko]
usernameParamiko=dXNlcm5hbWVQYXJhbWlrbw==
passwordParamiko=None
keyfilepath=L2hvbWUvcm9iZXJ0by8uc3NoL2lkX3JzYQ==
keyfiletype=UlNB
remote_path=/home/scipionbox/public_html/
hostparamiko=paramikohost.cnb.csic.es

# import base64
# def enCrypt(message):
#     """Totally naive encription routine that will not
#     stop a hacker. Use it to encrypt usernames and password.
#     Ussage: enCrypt("myusername")"""

#     message_bytes = message.encode('ascii')
#     base64_bytes = base64.b64encode(message_bytes)
#     return base64_bytes.decode('ascii')
