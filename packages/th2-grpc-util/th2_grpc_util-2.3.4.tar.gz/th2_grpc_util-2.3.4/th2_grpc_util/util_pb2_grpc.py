# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from th2_grpc_util import util_pb2 as th2__grpc__util_dot_util__pb2


class MessageComparatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.compareFilterVsMessages = channel.unary_unary(
                '/util.MessageComparator/compareFilterVsMessages',
                request_serializer=th2__grpc__util_dot_util__pb2.CompareFilterVsMessagesRequest.SerializeToString,
                response_deserializer=th2__grpc__util_dot_util__pb2.CompareFilterVsMessagesResponse.FromString,
                )
        self.compareMessageVsMessage = channel.unary_unary(
                '/util.MessageComparator/compareMessageVsMessage',
                request_serializer=th2__grpc__util_dot_util__pb2.CompareMessageVsMessageRequest.SerializeToString,
                response_deserializer=th2__grpc__util_dot_util__pb2.CompareMessageVsMessageResponse.FromString,
                )


class MessageComparatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def compareFilterVsMessages(self, request, context):
        """Compares a filter vs passed messages and returns comparison result for every pair.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def compareMessageVsMessage(self, request, context):
        """Compares a message vs another message and returns a comparison result.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageComparatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'compareFilterVsMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.compareFilterVsMessages,
                    request_deserializer=th2__grpc__util_dot_util__pb2.CompareFilterVsMessagesRequest.FromString,
                    response_serializer=th2__grpc__util_dot_util__pb2.CompareFilterVsMessagesResponse.SerializeToString,
            ),
            'compareMessageVsMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.compareMessageVsMessage,
                    request_deserializer=th2__grpc__util_dot_util__pb2.CompareMessageVsMessageRequest.FromString,
                    response_serializer=th2__grpc__util_dot_util__pb2.CompareMessageVsMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'util.MessageComparator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessageComparator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def compareFilterVsMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/util.MessageComparator/compareFilterVsMessages',
            th2__grpc__util_dot_util__pb2.CompareFilterVsMessagesRequest.SerializeToString,
            th2__grpc__util_dot_util__pb2.CompareFilterVsMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def compareMessageVsMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/util.MessageComparator/compareMessageVsMessage',
            th2__grpc__util_dot_util__pb2.CompareMessageVsMessageRequest.SerializeToString,
            th2__grpc__util_dot_util__pb2.CompareMessageVsMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
