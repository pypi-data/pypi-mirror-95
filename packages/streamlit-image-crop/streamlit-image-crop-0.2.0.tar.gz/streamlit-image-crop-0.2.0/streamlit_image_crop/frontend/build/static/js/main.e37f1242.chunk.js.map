{"version":3,"sources":["ImageCrop.tsx","index.tsx"],"names":["ImageCrop","state","render","src","props","args","crop","imageAlt","minWidth","minHeight","maxWidth","maxHeight","keepSelection","disabled","locked","ruleOfThirds","circularCrop","onChange","newCrop","setState","onComplete","_","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"oPASMA,E,4MACGC,MAAwB,G,EAExBC,OAAS,WACd,IAAMC,EAAM,EAAKC,MAAMC,KAAX,IACNC,EAAI,2BAAQ,EAAKF,MAAMC,KAAX,MAA4B,EAAKJ,OAC7CM,EAAW,EAAKH,MAAMC,KAAX,SACXG,EAAW,EAAKJ,MAAMC,KAAX,SACXI,EAAY,EAAKL,MAAMC,KAAX,UACZK,EAAW,EAAKN,MAAMC,KAAX,SACXM,EAAY,EAAKP,MAAMC,KAAX,UACZO,EAAgB,EAAKR,MAAMC,KAAX,cAChBQ,EAAW,EAAKT,MAAMC,KAAX,SACXS,EAAS,EAAKV,MAAMC,KAAX,OACTU,EAAe,EAAKX,MAAMC,KAAX,aACfW,EAAe,EAAKZ,MAAMC,KAAX,aAErB,OACE,cAAC,IAAD,CACEF,IAAKA,EACLG,KAAMA,EACNC,SAAUA,EACVC,SAAUA,EACVC,UAAWA,EACXC,SAAUA,EACVC,UAAWA,EACXC,cAAeA,EACfC,SAAUA,EACVC,OAAQA,EACRC,aAAcA,EACdC,aAAcA,EACdC,SAAU,SAACC,GAAD,OAAa,EAAKC,SAASD,IACrCE,WAAY,EAAKA,c,EAKfA,WAAa,SACnBC,EACAf,GAEAgB,IAAUC,kBAAkBjB,I,YAzCRkB,KA6CTC,cAAwBzB,GClDvC0B,IAASxB,OACP,cAAC,IAAMyB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e37f1242.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport ReactCrop from \"react-image-crop\"\nimport \"react-image-crop/dist/ReactCrop.css\"\n\nclass ImageCrop extends StreamlitComponentBase<ReactCrop.Crop> {\n  public state: ReactCrop.Crop = {}\n\n  public render = (): ReactNode => {\n    const src = this.props.args[\"src\"]\n    const crop = { ...this.props.args[\"crop\"], ...this.state }\n    const imageAlt = this.props.args[\"imageAlt\"]\n    const minWidth = this.props.args[\"minWidth\"]\n    const minHeight = this.props.args[\"minHeight\"]\n    const maxWidth = this.props.args[\"maxWidth\"]\n    const maxHeight = this.props.args[\"maxHeight\"]\n    const keepSelection = this.props.args[\"keepSelection\"]\n    const disabled = this.props.args[\"disabled\"]\n    const locked = this.props.args[\"locked\"]\n    const ruleOfThirds = this.props.args[\"ruleOfThirds\"]\n    const circularCrop = this.props.args[\"circularCrop\"]\n\n    return (\n      <ReactCrop\n        src={src}\n        crop={crop}\n        imageAlt={imageAlt}\n        minWidth={minWidth}\n        minHeight={minHeight}\n        maxWidth={maxWidth}\n        maxHeight={maxHeight}\n        keepSelection={keepSelection}\n        disabled={disabled}\n        locked={locked}\n        ruleOfThirds={ruleOfThirds}\n        circularCrop={circularCrop}\n        onChange={(newCrop) => this.setState(newCrop)}\n        onComplete={this.onComplete}\n      />\n    )\n  }\n\n  private onComplete = (\n    _: ReactCrop.Crop,\n    crop: ReactCrop.PercentCrop\n  ): void => {\n    Streamlit.setComponentValue(crop)\n  }\n}\n\nexport default withStreamlitConnection(ImageCrop)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ImageCrop from \"./ImageCrop\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ImageCrop />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}