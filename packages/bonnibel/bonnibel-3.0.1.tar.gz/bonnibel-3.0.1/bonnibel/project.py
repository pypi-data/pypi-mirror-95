def _try_files(name, root, *files):
    from . import BonnibelError
    import pathlib

    for f in files:
        if f is None: continue

        path = root / f
        if not path.exists():
            raise BonnibelError(f"{name} file '{f}' does not exist.")

        return path

    return None


class Project:
    filename = "project.toml"

    def __init__(self, root, config=None):
        from . import BonnibelError
        import toml

        data = toml.load(root / self.filename)

        self.root = root
        self.name = data['name']
        self.custom = _try_files("custom-rules", root, data.get('custom-rules'))
        self.variables = data.get('variables', dict())

        self.config_file = _try_files("config", root, config, data.get('default-config'))
        if self.config_file is None:
            raise BonnibelError("No default-config and no config specified.")

        config = toml.load(self.config_file)
        self.targets = config["targets"]

    def __str__(self):
        version = self.version()
        return f"{self.name} {version.major}.{version.minor}.{version.patch}-{version.sha}"

    def version(self):
        from .version import git_version
        return git_version(self.root)

    def generate(self, bc):
        import bonnibel
        from os.path import join
        from ninja.ninja_syntax import Writer

        with open(bc.output / "rules.ninja", "w") as buildfile:
            infile = open(join(bonnibel.__path__[0], "rules.ninja"))
            buildfile.write(infile.read())

            build = Writer(buildfile)
            build.newline()

            build.rule("regen",
                command = f"{bc.generator} --output {bc.output.resolve()} generate",
                description = "Regenerate build files",
                generator = True,
                )

        for name, target in self.targets.items():
            targetdir = bc.output / name
            targetdir.mkdir(exist_ok=True)

            with open(targetdir / "target.ninja", "w") as buildfile:
                build = Writer(buildfile)
                build.comment("This file is automatically generated by bonnibel")
                build.newline()


        with open(bc.output / "build.ninja", "w") as buildfile:
            build = Writer(buildfile)

            build.comment("This file is automatically generated by bonnibel")
            build.variable("ninja_required_version", "1.3")
            build.variable("build_root", bc.output)
            build.variable("source_root", bc.root)
            build.newline()

            build.include(bc.output / "rules.ninja")

            if self.custom:
                build.include(bc.root / self.custom)
            build.newline()

            version = self.version()
            build.variable("version_major", version.major)
            build.variable("version_minor", version.minor)
            build.variable("version_patch", version.patch)
            build.variable("version_sha", version.sha)
            build.newline()

            for key, value in self.variables.items():
                build.variable(key, value)
            build.newline()

            for target in self.targets.keys():
                build.subninja(bc.output / target / "target.ninja")
            build.newline()

            build.build(
                rule = "regen",
                outputs = ['build.ninja'],
                implicit = 
                    [f"{self.root}/project.toml", f"{self.config_file}"] +
                    [f"{mod.root}/module.toml" for mod in bc.modules.values()],
                implicit_outputs = 
                    [f"{mod.name}.ninja" for mod in bc.modules.values()] +
                    [f"{target}/target.ninja" for target in self.targets],
                )

        for target_name, target in self.targets.items():
            buildfilename = str(bc.output / target_name / "target.ninja")
            mods = [m.name for m in bc.modules.values() if target_name in m.targets]
            if not mods:
                continue

            with open(buildfilename, "w") as buildfile:
                build = Writer(buildfile)

                build.variable("target_dir", bc.output / target_name)
                build.newline()

                for key, value in target.items():
                    build.variable(key, value)

                build.newline()
                for kind in ('defs', 'run'):
                    for lang in ('c', 'cpp'):
                        output = str(bc.output / target_name / f"{lang}.{kind}")

                        build.build(
                            rule = f"dump_{lang}_{kind}",
                            outputs = [output],
                            implicit = [buildfilename],
                        )
                        build.default(output)
                        build.newline()

                for mod in mods:
                    build.subninja(f"{mod}.ninja")
