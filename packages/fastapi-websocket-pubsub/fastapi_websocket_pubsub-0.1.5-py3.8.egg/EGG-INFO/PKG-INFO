Metadata-Version: 2.1
Name: fastapi-websocket-pubsub
Version: 0.1.5
Summary: A fast and durable PubSub channel over Websockets (using fastapi-websockets-rpc).
Home-page: https://github.com/authorizon/fastapi_websocket_pubsub
Author: Or Weis
Author-email: or@authorizon.com
License: UNKNOWN
Description: 
        # ⚡ FASTAPI Websocket Pub/Sub 🗞️
        
        <a href="https://github.com/authorizon/fastapi_websocket_pubsub/actions?query=workflow%3ATests" target="_blank">
            <img src="https://github.com/authorizon/fastapi_websocket_pubsub/workflows/Tests/badge.svg" alt="Tests">
        </a>
        
        <a href="https://pypi.org/project/fastapi-websocket-pub/" target="_blank">
            <img src="https://img.shields.io/pypi/v/fastapi-websocket-pubsub?color=%2331C654&label=PyPi%20package" alt="Package">
        </a>
        
        
        A fast and durable Pub/Sub channel over Websockets.
        The easiest way to create a live publish / subscribe multi-cast over the web.
        
        Supports and tested on Python >= 3.7 
        
        
        ## Installation 🛠️
        ```
        pip install fastapi_websocket_pubsub
        ```
        
        
        ## Intro
        The classic pub/sub pattern made easily accessible and scalable over the web and across your cloud in realtime.
        FastAPI PubSub + WebSockets PubSub ==  💪 ❤️
        
        
        - Subscribe
            - Clients subscribe to topics (arbitrary strings) and receive relevant events along with structured data (serialized with Pydantic).
                ```python
                # Callback to be called upon event being published on server
                async def on_event(data):
                    print("We got an event! with data- ", data)
                # Subscribe for the event 
                client.subscribe("my event", on_event)
                ```
        
        - Publish 
            - Directly from server code to connected clients. 
                ```python
                app = FastAPI() 
                endpoint = PubSubEndpoint()
                endpoint.register_route(app, "/pubsub")
                endpoint.publish(["my_event_topic"], data=["my", "data", 1])
                ```
            - From client to client (through the servers)
                ```python 
                client = PubSubClient()
                client.start_client(uri)
                endpoint.publish(["my_event_topic"], data=["my", "data", 1])
                ```    
            - Across server instances (using [broadcaster](https://pypi.org/project/broadcaster/) and a backend medium (e.g. Redis, Kafka, ...)
                - No matter which server a client connected to - it will get the its message
                ```python
                app = FastAPI() 
                endpoint = PubSubEndpoint(broadcaster="postgres://localhost:5432/")
                endpoint.register_route(app, "/pubsub")
                ```
        
        
        
        ## Usage example (server publishing following HTTP trigger):
        
        ### Server:
        ```python
        import asyncio
        import uvicorn
        from fastapi import FastAPI
        from fastapi.routing import APIRouter
        
        from fastapi_websocket_pubsub import PubSubEndpoint
        app =  FastAPI()
        # Init endpoint
        endpoint = PubSubEndpoint()
        # register the endpoint on the app
        endpoint.register_route(app, "/pubsub")
        # Register a regular HTTP route
        @app.get("/trigger")
        async def trigger_events():
            # Upon request trigger an event
            endpoint.publish(["triggered"])
        ```
        ### Client:
        ```python
        from fastapi_websocket_pubsub import PubSubClient
        # Callback to be called upon event being published on server
        async def on_trigger(data):
            print("Trigger URL was accessed")
        # Subscribe for the event 
        client.subscribe("triggered", on_event)
        client.start_client(f"ws://localhost/pubsub")
        ```
        
        See the [examples](/examples) and [tests](/tests) folders for more server and client examples.
        
        ## What can I do with this?
        The combination of Websockets, and bi-directional Pub/Sub is  ideal to create realtime data propagation solution at scale over the web. 
         - Update mechanism (All outgoing websockets)
         - Remote control mechanism
         - Data processing
         - Realtime communications over the web   
        
        
        ## Foundations:
        
        - Based on [fastapi-websocket-rpc](https://github.com/acallasec/fastapi_websocket_rpc) for a robust realtime bidirectional channel
        
        - Based on [broadcaster](https://pypi.org/project/broadcaster/) for syncing server instances
        
        - Server Endpoint:
        
            - Based on [FAST-API](https://github.com/tiangolo/fastapi): enjoy all the benefits of a full ASGI platform, including Async-io and dependency injections (for example to authenticate connections)
        
            - Based on [Pydnatic](https://pydantic-docs.helpmanual.io/): easily serialize structured data as part of RPC requests and responses (see 'tests/basic_rpc_test.py :: test_structured_response' for an example)
        
        - Client :
            - Based on [Tenacity](https://tenacity.readthedocs.io/en/latest/index.html): allowing configurable retries to keep to connection alive
                - see WebSocketRpcClient.__init__'s retry_config 
        
            - Based on python [websockets](https://websockets.readthedocs.io/en/stable/intro.html) - a more comprehensive client than the one offered by Fast-api
        
        
        
        ## Pull requests - welcome!
        - Please include tests for new features 
        
        
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Classifier: Topic :: Internet :: WWW/HTTP :: WSGI
Requires-Python: >=3.7
Description-Content-Type: text/markdown
