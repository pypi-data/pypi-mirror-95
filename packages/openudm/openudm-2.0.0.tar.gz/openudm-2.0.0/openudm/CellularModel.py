# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CellularModel
else:
    import _CellularModel

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class CellularModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CellularModel.CellularModel_swiginit(self, _CellularModel.new_CellularModel())
    __swig_destroy__ = _CellularModel.delete_CellularModel

    def Setup(self, wards, res, cols, rows):
        return _CellularModel.CellularModel_Setup(self, wards, res, cols, rows)

    def UseBinaryRasters(self, useBin):
        return _CellularModel.CellularModel_UseBinaryRasters(self, useBin)

    def SetRasterHeader(self, hdr):
        return _CellularModel.CellularModel_SetRasterHeader(self, hdr)

    def SetPathToBinaryConfigFiles(self, binConfigPath):
        return _CellularModel.CellularModel_SetPathToBinaryConfigFiles(self, binConfigPath)

    def LoadWardLabels(self, label, labelColumn, numColumns):
        return _CellularModel.CellularModel_LoadWardLabels(self, label, labelColumn, numColumns)

    def LoadCurrentPopulation(self, popData, curPopColumn, numColumns):
        return _CellularModel.CellularModel_LoadCurrentPopulation(self, popData, curPopColumn, numColumns)

    def LoadFuturePopulation(self, popData, futPopColumn, numColumns):
        return _CellularModel.CellularModel_LoadFuturePopulation(self, popData, futPopColumn, numColumns)

    def LoadWardDensity(self, densityData, densityColumn, numColumns):
        return _CellularModel.CellularModel_LoadWardDensity(self, densityData, densityColumn, numColumns)

    def LoadDwellingsRaster(self, dwellingsData):
        return _CellularModel.CellularModel_LoadDwellingsRaster(self, dwellingsData)

    def LoadWardIDRaster(self, iWardIDData):
        return _CellularModel.CellularModel_LoadWardIDRaster(self, iWardIDData)

    def LoadZoneIDRaster(self, zoneIDData):
        return _CellularModel.CellularModel_LoadZoneIDRaster(self, zoneIDData)

    def LoadZoneAVGRaster(self, zoneAVGData):
        return _CellularModel.CellularModel_LoadZoneAVGRaster(self, zoneAVGData)

    def LoadDevLandRaster(self, devLandData):
        return _CellularModel.CellularModel_LoadDevLandRaster(self, devLandData)

    def LoadCellSuitRaster(self, cellSuitData):
        return _CellularModel.CellularModel_LoadCellSuitRaster(self, cellSuitData)

    def SetupFinalDevRaster(self):
        return _CellularModel.CellularModel_SetupFinalDevRaster(self)

    def RunModel(self):
        return _CellularModel.CellularModel_RunModel(self)

    def OutputRasterResult(self, rasterData):
        return _CellularModel.CellularModel_OutputRasterResult(self, rasterData)

    def WriteOverflowWards(self, overflowData):
        return _CellularModel.CellularModel_WriteOverflowWards(self, overflowData)

# Register CellularModel in _CellularModel:
_CellularModel.CellularModel_swigregister(CellularModel)



