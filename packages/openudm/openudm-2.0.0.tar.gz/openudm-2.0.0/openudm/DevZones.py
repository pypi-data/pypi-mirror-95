# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DevZones
else:
    import _DevZones

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Cell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    c = property(_DevZones.Cell_c_get, _DevZones.Cell_c_set)
    r = property(_DevZones.Cell_r_get, _DevZones.Cell_r_set)
    z = property(_DevZones.Cell_z_get, _DevZones.Cell_z_set)

    def __init__(self, col, row, zone):
        _DevZones.Cell_swiginit(self, _DevZones.new_Cell(col, row, zone))
    __swig_destroy__ = _DevZones.delete_Cell

# Register Cell in _DevZones:
_DevZones.Cell_swigregister(Cell)
cvar = _DevZones.cvar
NOZONE = cvar.NOZONE

class Zone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_DevZones.Zone_id_get, _DevZones.Zone_id_set)
    cells = property(_DevZones.Zone_cells_get, _DevZones.Zone_cells_set)

    def __init__(self, zid):
        _DevZones.Zone_swiginit(self, _DevZones.new_Zone(zid))
    __swig_destroy__ = _DevZones.delete_Zone

# Register Zone in _DevZones:
_DevZones.Zone_swigregister(Zone)

class Ward(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cells = property(_DevZones.Ward_cells_get, _DevZones.Ward_cells_set)

    def __init__(self):
        _DevZones.Ward_swiginit(self, _DevZones.new_Ward())
    __swig_destroy__ = _DevZones.delete_Ward

# Register Ward in _DevZones:
_DevZones.Ward_swigregister(Ward)


def CreateDevZones(*args):
    return _DevZones.CreateDevZones(*args)

def DevZoneAVGSuit(useBin, zoneID, zoneData, zoneAVG, rastHdr, pathToBinConfig):
    return _DevZones.DevZoneAVGSuit(useBin, zoneID, zoneData, zoneAVG, rastHdr, pathToBinConfig)


