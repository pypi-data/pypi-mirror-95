# coding: utf-8

"""
    FreeClimb API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import freeclimb
from freeclimb.percl.get_speech import GetSpeech  # noqa: E501
from freeclimb.rest import ApiException


class TestGetSpeech(unittest.TestCase):
    """GetSpeech unit test stubs"""
    action_url='http://example.com'
    grammar_file='DIG5'

    def setUp(self):
        self.get_speech = GetSpeech(action_url=self.action_url).grammar_file(self.grammar_file)

    def tearDown(self):
        pass

    def testGetSpeech(self):
        """Test GetSpeech"""
        # construct object with mandatory attributes with example values
        # percl = freeclimb.percl.GetSpeech()  # noqa: E501
        self.assertTrue(isinstance(self.get_speech, GetSpeech))
        self.assertEqual(self.action_url, self.get_speech.get('GetSpeech').get('actionUrl'))
        self.assertEqual(self.grammar_file, self.get_speech.get('GetSpeech').get('grammarFile'))
        self.assertTrue(hasattr(self.get_speech, 'grammar_type'))
        self.assertTrue(hasattr(self.get_speech, 'grammar_rule'))
        self.assertTrue(hasattr(self.get_speech, 'play_beep'))
        self.assertTrue(hasattr(self.get_speech, 'no_input_timeout_ms'))
        self.assertTrue(hasattr(self.get_speech, 'recognition_timeout_ms'))
        self.assertTrue(hasattr(self.get_speech, 'confidence_threshold'))
        self.assertTrue(hasattr(self.get_speech, 'sensitivity_level'))
        self.assertTrue(hasattr(self.get_speech, 'speech_complete_timeout_ms'))
        self.assertTrue(hasattr(self.get_speech, 'speech_incomplete_timeout_ms'))
        self.assertTrue(hasattr(self.get_speech, 'prompts'))
        self.assertTrue(hasattr(self.get_speech, 'enforcePCI'))

    def testAddGrammarType(self):
        """AddGrammarType to conference"""
        grammar_type = 'BUILTIN'
        self.get_speech.grammar_type = grammar_type
        self.assertEqual(self.get_speech.grammar_type, grammar_type)

if __name__ == '__main__':
    unittest.main()
