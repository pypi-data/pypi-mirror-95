# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from freeclimb.configuration import Configuration


class EnqueueAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action_url': 'str',
        'notification_url': 'str',
        'queue_id': 'str',
        'wait_url': 'str'
    }

    attribute_map = {
        'action_url': 'actionUrl',
        'notification_url': 'notificationUrl',
        'queue_id': 'queueId',
        'wait_url': 'waitUrl'
    }

    def __init__(self, action_url=None, notification_url=None, queue_id=None, wait_url=None, local_vars_configuration=None):  # noqa: E501
        """EnqueueAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._action_url = None
        self._notification_url = None
        self._queue_id = None
        self._wait_url = None
        self.discriminator = None

        self.action_url = action_url
        if notification_url is not None:
            self.notification_url = notification_url
        self.queue_id = queue_id
        self.wait_url = wait_url

    @property
    def action_url(self):
        """Gets the action_url of this EnqueueAllOf.  # noqa: E501

        A request is made to this URL when the Call leaves the Queue, which can occur if enqueue of the Call fails or when the call is dequeued via the `Dequeue` command, the REST API (POST to Queue Member resource), or the caller hangs up.  # noqa: E501

        :return: The action_url of this EnqueueAllOf.  # noqa: E501
        :rtype: str
        """
        return self._action_url

    @action_url.setter
    def action_url(self, action_url):
        """Sets the action_url of this EnqueueAllOf.

        A request is made to this URL when the Call leaves the Queue, which can occur if enqueue of the Call fails or when the call is dequeued via the `Dequeue` command, the REST API (POST to Queue Member resource), or the caller hangs up.  # noqa: E501

        :param action_url: The action_url of this EnqueueAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and action_url is None:  # noqa: E501
            raise ValueError("Invalid value for `action_url`, must not be `None`")  # noqa: E501

        self._action_url = action_url

    @property
    def notification_url(self):
        """Gets the notification_url of this EnqueueAllOf.  # noqa: E501

        URL to be invoked when the call enters the queue. The request to the URL contains the standard request parameters.This is a notification only; any PerCL returned will be ignored.  # noqa: E501

        :return: The notification_url of this EnqueueAllOf.  # noqa: E501
        :rtype: str
        """
        return self._notification_url

    @notification_url.setter
    def notification_url(self, notification_url):
        """Sets the notification_url of this EnqueueAllOf.

        URL to be invoked when the call enters the queue. The request to the URL contains the standard request parameters.This is a notification only; any PerCL returned will be ignored.  # noqa: E501

        :param notification_url: The notification_url of this EnqueueAllOf.  # noqa: E501
        :type: str
        """

        self._notification_url = notification_url

    @property
    def queue_id(self):
        """Gets the queue_id of this EnqueueAllOf.  # noqa: E501

        ID of the Queue to which to add the Call. If the Queue does not exist, it will be created. The ID must start with QU followed by 40 hex characters.  # noqa: E501

        :return: The queue_id of this EnqueueAllOf.  # noqa: E501
        :rtype: str
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id):
        """Sets the queue_id of this EnqueueAllOf.

        ID of the Queue to which to add the Call. If the Queue does not exist, it will be created. The ID must start with QU followed by 40 hex characters.  # noqa: E501

        :param queue_id: The queue_id of this EnqueueAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and queue_id is None:  # noqa: E501
            raise ValueError("Invalid value for `queue_id`, must not be `None`")  # noqa: E501

        self._queue_id = queue_id

    @property
    def wait_url(self):
        """Gets the wait_url of this EnqueueAllOf.  # noqa: E501

        A request is made to this URL when the Call leaves the Queue, which can occur if enqueue of the Call fails or when the call is dequeued via the `Dequeue` command, the REST API (POST to Queue Member resource), or the caller hangs up.  # noqa: E501

        :return: The wait_url of this EnqueueAllOf.  # noqa: E501
        :rtype: str
        """
        return self._wait_url

    @wait_url.setter
    def wait_url(self, wait_url):
        """Sets the wait_url of this EnqueueAllOf.

        A request is made to this URL when the Call leaves the Queue, which can occur if enqueue of the Call fails or when the call is dequeued via the `Dequeue` command, the REST API (POST to Queue Member resource), or the caller hangs up.  # noqa: E501

        :param wait_url: The wait_url of this EnqueueAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and wait_url is None:  # noqa: E501
            raise ValueError("Invalid value for `wait_url`, must not be `None`")  # noqa: E501

        self._wait_url = wait_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.to_camel_case(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is None:
                continue
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnqueueAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnqueueAllOf):
            return True

        return self.to_dict() != other.to_dict()

    def to_camel_case(self, snake_str):
        components = snake_str.split('_')
        return components[0] + ''.join(x.title() for x in components[1:])
