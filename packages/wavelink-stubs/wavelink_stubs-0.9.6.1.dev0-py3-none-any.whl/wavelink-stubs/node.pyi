from typing import Any, Callable, Dict, Optional, List, TYPE_CHECKING, Union

from aiohttp import ClientSession
from discord.ext.commands.bot import BotBase

if TYPE_CHECKING:
    from .client import Client
    from .player import Track, TrackPlaylist, Player

class Node:

    def __init__(self, host: str, port: int, shards: int, user_id: int, *, client: Client, session:  ClientSession, rest_uri: str, password: str, region: str, identifer: str, shard_id: Optional[int], secure: bool, heartbeat: Optional[float], dumps: Callable[[Dict[str, Any]], Union[str, bytes]]): ...

    @property
    def is_available(self) -> bool: ...

    def close(self): ...

    def open(self): ...

    @property
    def penalty(self) -> float: ...

    async def connect(self, bot: BotBase): ...

    async def get_tracks(self, query: str, *, retry_on_failure: bool) -> Optional[Union[List[Track], TrackPlaylist]]: ...

    async def build_track(self, identifier: str) -> Track: ...

    def get_player(self, guild_id: int) -> Optional[Player]: ...

    async def on_event(self, event: str): ...

    def set_hook(self, func: Callable[[str]]): ...

    async def destroy(self): ...

