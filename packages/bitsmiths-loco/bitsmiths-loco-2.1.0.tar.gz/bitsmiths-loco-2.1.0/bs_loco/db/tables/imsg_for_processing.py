# This file was generated by mettle.genes.db.GenPy3 [ver 2.1] on Mon Feb 15 23:21:02 2021
#

import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

class iMsgForProcessing(mettle.io.ISerializable):

    def __init__(self,
                 criteria: str = '',
                 date_curr: datetime.datetime = datetime.datetime.min,
                 limit: int = 0):
        """
        Constructor.

        :param criteria: str
        :param date_curr: datetime.datetime
        :param limit: int
        """
        self.criteria = criteria
        self.date_curr = date_curr
        self.limit = limit

    def clear(self):
        """
        Clears all member variables for this database record.
        """
        self.criteria = ''
        self.date_curr = datetime.datetime.min
        self.limit = 0

    def _name(self) -> str:
        """
        Name of the record.

        :return: The name.
        """
        return 'iMsgForProcessing'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize record to a stream.

        :param _w:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _w.write_start(_oname)
        _w.write_string("criteria", self.criteria)
        _w.write_datetime("date_curr", self.date_curr)
        _w.write_int32("limit", self.limit)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
        """
        Deserialize record from a stream.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.criteria = _r.read_string("criteria")
        self.date_curr = _r.read_datetime("date_curr")
        self.limit = _r.read_int32("limit")
        _r.read_end(_oname)

    def _copy_from(self, rec: "iMsgForProcessing"):
        """
        Copies the column from the rec into this record.

        :param rec: The source record.
        """
        self.criteria = rec.criteria
        self.date_curr = rec.date_curr
        self.limit = rec.limit

    @staticmethod
    def _cache_davs(dvc=None):
        """
        Cache the DAV into the dav cache (or create one) and return it.

        :param dvc: (mettle.lib.DavCache), target cache, if None a new one is created and returned.
        """
        if dvc is None:
            dvc = mettle.lib.DavCache()

        dvc.add_targ("id", mettle.lib.Dav(mettle.lib.Dav.eDavType.Min, 1))
        dvc.add_targ("id", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("criteria", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("dateCurr", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("limit", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))

        return dvc

    def _get_davs(self, dvc=None):
        iMsgForProcessing._cache_davs(dvc)

    def __repr__(self) -> str:
        return '<Msg [criteria:%.32s, date_curr:%s, limit:%r]>' % (
            self.criteria, self.date_curr, self.limit)


    class List(list, mettle.io.ISerializable):
        """
        List Class
        """

        def _name(self) -> str:
            """
            Name of the list.

            :return: The name
            """
            return 'iMsgForProcessing.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list to a stream.

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
            """
            Deserialize the list from a stream.

            :param _r:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = iMsgForProcessing()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def __repr__(self) -> str:
            return '<iMsgForProcessing.List[%d]>' % (len(self))

        def _get_davs(self, dvc=None):
            return iMsgForProcessing._cache_davs(dvc)

