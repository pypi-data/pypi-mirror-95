# This file was generated by mettle.genes.db.GenPy3 [ver 2.1] on Mon Feb 15 23:21:02 2021
#  Target Database = postgresql
#
import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_loco.db.tables.no_type import tNoType

class dNoTypeInsert:

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self._dbcon   = dbcon
        self._dbstmnt = None
        self.irec     = tNoType()

    def __del__(self):
        """
        Destructor.
        """
        del self._dbstmnt

    def __enter__(self):
        """
        With statement enter.
        """
        return self

    def __exit__(self, type, value, traceback):
        """
        With statement exit.
        """
        self._destroy()

    def _destroy(self):
        if self._dbstmnt == None:
            return

        del self._dbstmnt
        self._dbstmnt = None

    async def exec_deft(self,
                        id: str,
                        status: str,
                        descr: str,
                        grp: str,
                        priority: int,
                        pref_corr: dict,
                        corr_cnt: int,
                        max_life: int,
                        modified_by: str,
                        tm_stamp: datetime.datetime) -> "dNoTypeInsert":
        """
        Execute the query by setting all the inputs.

        :param id: str
        :param status: str
        :param descr: str
        :param grp: str
        :param priority: int
        :param pref_corr: dict
        :param corr_cnt: int
        :param max_life: int
        :param modified_by: str
        :param tm_stamp: datetime.datetime
        :return: Self for convenience.
        """
        self.irec.id = id
        self.irec.status = status
        self.irec.descr = descr
        self.irec.grp = grp
        self.irec.priority = priority
        self.irec.pref_corr = pref_corr
        self.irec.corr_cnt = corr_cnt
        self.irec.max_life = max_life
        self.irec.modified_by = modified_by
        self.irec.tm_stamp = tm_stamp

        return await self.exec()

    async def exec(self, irec: tNoType = None) -> "dNoTypeInsert":
        """
        Execute the query, optionally passing in the input rec.

        :param irec:
        :return: Self for convenience.
        """
        if irec:
            self.irec._copy_from(irec)

        self._destroy()

        self._dbstmnt = await self._dbcon.statement("NoTypeInsert", self._dbcon.STMNT_TYPE_CUD)

        self._dbstmnt.sql("""insert into loco.NoType (
  id,
  status,
  descr,
  grp,
  priority,
  pref_corr,
  corr_cnt,
  max_life,
  modified_by,
  tm_stamp
) values (
  :id,
  :status,
  :descr,
  :grp,
  :priority,
  :pref_corr,
  :corr_cnt,
  :max_life,
  :modified_by,
  :tm_stamp
)""")

        self.irec.tm_stamp = await self._dbcon.get_timestamp()

        self._dbstmnt.bind_in("id", self.irec.id, str, 128)
        self._dbstmnt.bind_in("status", self.irec.status, str, 1)
        self._dbstmnt.bind_in("descr", self.irec.descr, str, 256)
        self._dbstmnt.bind_in("grp", self.irec.grp, str, 64)
        self._dbstmnt.bind_in("priority", self.irec.priority, int, 4)
        self._dbstmnt.bind_in("pref_corr", self.irec.pref_corr, dict)
        self._dbstmnt.bind_in("corr_cnt", self.irec.corr_cnt, int, 4)
        self._dbstmnt.bind_in("max_life", self.irec.max_life, int, 4)
        self._dbstmnt.bind_in("modified_by", self.irec.modified_by, str, 128)
        self._dbstmnt.bind_in("tm_stamp", self.irec.tm_stamp, datetime.datetime)

        await self._dbcon.execute(self._dbstmnt)

        if irec:
            irec._copy_from(self.irec)

        return self

