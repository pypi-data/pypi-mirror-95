{"version":3,"sources":["webpack:///./app/data/forms/projectSecurityAndPrivacyGroups.tsx","webpack:///./app/views/settings/projectSecurityAndPrivacy/index.tsx"],"names":["route","ORG_DISABLED_REASON","t","hasOrgOverride","organization","name","title","fields","type","label","help","tct","organizationSettingsLink","to","slug","visible","features","has","placeholder","value","organizationValue","formatStoreCrashReports","storeCrashReports","choices","getStoreCrashReportsValues","SettingScope","Project","map","disabled","disabledReason","setValue","val","props","confirm","false","multiline","autosize","maxRows","getValue","extractMultilineFields","convertMultilineFieldValue","ProjectSecurityAndPrivacy","handleUpdateProject","data","ProjectActions","updateSuccess","this","project","initialData","projectSlug","endpoint","access","Set","relayPiiConfig","Fragment","objSlug","saveOnBlur","allowUndo","apiMethod","apiEndpoint","onSubmitSuccess","onSubmitError","addErrorMessage","additionalFieldProps","forms","projectSecurityAndPrivacyGroups","additionalContext","linkToOrganizationSecurityAndPrivacy","projectId","id","React","Component"],"mappings":"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","file":"ProjectSecurityAndPrivacy.js","sourcesContent":["import React from 'react';\n\nimport Link from 'app/components/links/link';\nimport {t, tct} from 'app/locale';\nimport {convertMultilineFieldValue, extractMultilineFields} from 'app/utils';\nimport {\n  formatStoreCrashReports,\n  getStoreCrashReportsValues,\n  SettingScope,\n} from 'app/utils/crashReports';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/security-and-privacy/';\n\nconst ORG_DISABLED_REASON = t(\n  \"This option is enforced by your organization's settings and cannot be customized per-project.\"\n);\n\n// Check if a field has been set AND IS TRUTHY at the organization level.\nconst hasOrgOverride = ({organization, name}) => organization[name];\n\nexport default [\n  {\n    title: t('Security & Privacy'),\n    fields: [\n      {\n        name: 'storeCrashReports',\n        type: 'array',\n        label: t('Store Native Crash Reports'),\n        help: ({organization}) =>\n          tct(\n            'Store native crash reports such as Minidumps for improved processing and download in issue details. Overrides [organizationSettingsLink: organization settings].',\n            {\n              organizationSettingsLink: (\n                <Link to={`/settings/${organization.slug}/security-and-privacy/`} />\n              ),\n            }\n          ),\n        visible: ({features}) => features.has('event-attachments'),\n        placeholder: ({organization, value}) => {\n          // empty value means that this project should inherit organization settings\n          if (value === '') {\n            return tct('Inherit organization settings ([organizationValue])', {\n              organizationValue: formatStoreCrashReports(organization.storeCrashReports),\n            });\n          }\n\n          // HACK: some organization can have limit of stored crash reports a number that's not in the options (legacy reasons),\n          // we therefore display it in a placeholder\n          return formatStoreCrashReports(value);\n        },\n        choices: ({organization}) =>\n          getStoreCrashReportsValues(SettingScope.Project).map(value => [\n            value,\n            formatStoreCrashReports(value, organization.storeCrashReports),\n          ]),\n      },\n    ],\n  },\n  {\n    title: t('Data Scrubbing'),\n    fields: [\n      {\n        name: 'dataScrubber',\n        type: 'boolean',\n        label: t('Data Scrubber'),\n        disabled: hasOrgOverride,\n        disabledReason: ORG_DISABLED_REASON,\n        help: t('Enable server-side data scrubbing'),\n        // `props` are the props given to FormField\n        setValue: (val, props) =>\n          (props.organization && props.organization[props.name]) || val,\n        confirm: {\n          false: t('Are you sure you want to disable server-side data scrubbing?'),\n        },\n      },\n      {\n        name: 'dataScrubberDefaults',\n        type: 'boolean',\n        disabled: hasOrgOverride,\n        disabledReason: ORG_DISABLED_REASON,\n        label: t('Use Default Scrubbers'),\n        help: t(\n          'Apply default scrubbers to prevent things like passwords and credit cards from being stored'\n        ),\n        // `props` are the props given to FormField\n        setValue: (val, props) =>\n          (props.organization && props.organization[props.name]) || val,\n        confirm: {\n          false: t('Are you sure you want to disable using default scrubbers?'),\n        },\n      },\n      {\n        name: 'scrubIPAddresses',\n        type: 'boolean',\n        disabled: hasOrgOverride,\n        disabledReason: ORG_DISABLED_REASON,\n        // `props` are the props given to FormField\n        setValue: (val, props) =>\n          (props.organization && props.organization[props.name]) || val,\n        label: t('Prevent Storing of IP Addresses'),\n        help: t('Preventing IP addresses from being stored for new events'),\n        confirm: {\n          false: t('Are you sure you want to disable scrubbing IP addresses?'),\n        },\n      },\n      {\n        name: 'sensitiveFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        placeholder: t('email'),\n        label: t('Additional Sensitive Fields'),\n        help: t(\n          'Additional field names to match against when scrubbing data. Separate multiple entries with a newline'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'safeFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        placeholder: t('business-email'),\n        label: t('Safe Fields'),\n        help: t(\n          'Field names which data scrubbers should ignore. Separate multiple entries with a newline'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n    ],\n  },\n] as JsonFormObject[];\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport ProjectActions from 'app/actions/projectActions';\nimport Link from 'app/components/links/link';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport projectSecurityAndPrivacyGroups from 'app/data/forms/projectSecurityAndPrivacyGroups';\nimport {t, tct} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport DataScrubbing from '../components/dataScrubbing';\n\nexport type ProjectSecurityAndPrivacyProps = RouteComponentProps<\n  {orgId: string; projectId: string},\n  {}\n> & {\n  organization: Organization;\n  project: Project;\n};\n\nclass ProjectSecurityAndPrivacy extends React.Component<ProjectSecurityAndPrivacyProps> {\n  handleUpdateProject = (data: Project) => {\n    // This will update our project global state\n    ProjectActions.updateSuccess(data);\n  };\n\n  render() {\n    const {organization, project} = this.props;\n    const initialData = project;\n    const projectSlug = project.slug;\n    const endpoint = `/projects/${organization.slug}/${projectSlug}/`;\n    const access = new Set(organization.access);\n    const features = new Set(organization.features);\n    const relayPiiConfig = project.relayPiiConfig;\n    const apiMethod = 'PUT';\n    const title = t('Security & Privacy');\n\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={title} objSlug={projectSlug} />\n        <SettingsPageHeader title={title} />\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={initialData}\n          apiMethod={apiMethod}\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleUpdateProject}\n          onSubmitError={() => addErrorMessage('Unable to save change')}\n        >\n          <JsonForm\n            additionalFieldProps={{organization}}\n            features={features}\n            disabled={!access.has('project:write')}\n            forms={projectSecurityAndPrivacyGroups}\n          />\n        </Form>\n        <DataScrubbing\n          additionalContext={\n            <span>\n              {tct(\n                'These rules can be configured at the organization level in [linkToOrganizationSecurityAndPrivacy].',\n                {\n                  linkToOrganizationSecurityAndPrivacy: (\n                    <Link to={`/settings/${organization.slug}/security-and-privacy/`}>\n                      {title}\n                    </Link>\n                  ),\n                }\n              )}\n            </span>\n          }\n          endpoint={endpoint}\n          relayPiiConfig={relayPiiConfig}\n          disabled={!access.has('project:write')}\n          organization={organization}\n          projectId={project.id}\n          onSubmitSuccess={this.handleUpdateProject}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProjectSecurityAndPrivacy;\n"],"sourceRoot":""}