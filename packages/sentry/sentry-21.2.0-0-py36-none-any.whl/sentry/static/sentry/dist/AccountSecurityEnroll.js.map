{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx","webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/components/qrcode.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityEnroll.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","ConfirmHeader","message","Fragment","t","RemoveConfirm","getPendingInvite","data","Cookies","get","queryString","Qrcode","code","Table","map","row","i","key","cell","j","BlackCell","WhiteCell","Cell","AccountSecurityEnroll","formModel","FormModel","pendingInvitation","handleSmsReset","setState","hasSentCode","remountComponent","handleSmsSubmit","dataModel","a","state","authenticator","phone","otp","undefined","secret","sendingCode","addLoadingMessage","api","requestPromise","enrollEndpoint","resetForm","addErrorMessage","handleEnrollSuccess","addSuccessMessage","handleU2fTap","tapData","fields","toJS","loading","handleEnrollError","handleTotpSubmit","method","handleSubmit","id","handleRemove","authId","authenticatorEndpoint","router","push","allowError","err","alreadyEnrolled","status","responseJSON","details","fetchOrganizationByMember","memberId","toString","addOrg","fetchOrgDetails","openRecoveryOptions","authenticatorName","onSmsReset","onU2fTap","form","justifyContent","qrcode","label","priority","type","disabled","required","pr","css","onClick","find","name","style","marginBottom","challengeData","challenge","displayMode","onTap","getFields","defaultValues","filter","field","defaultValue","reduce","acc","value","enabled","isEnrolled","removeButton","onConfirm","description","length","model","apiMethod","apiEndpoint","onSubmit","initialData","hideFooter","forms","params","withRouter"],"mappings":"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","file":"AccountSecurityEnroll.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n","import Cookies from 'js-cookie';\nimport * as queryString from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return queryString.parse(data) as any;\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Authenticator} from 'app/types';\n\ntype Props = {\n  code: NonNullable<(Authenticator & {id: 'totp'})['qrcode']>;\n};\n\nconst Qrcode = ({code}: Props) => (\n  <Table>\n    <tbody>\n      {code.map((row, i) => (\n        <tr key={i}>\n          {row.map((cell, j) => (cell ? <BlackCell key={j} /> : <WhiteCell key={j} />))}\n        </tr>\n      ))}\n    </tbody>\n  </Table>\n);\n\nconst Cell = styled('td')`\n  height: 6px;\n  width: 6px;\n  padding: 0;\n`;\n\nconst BlackCell = styled(Cell)`\n  background-color: black;\n`;\n\nconst WhiteCell = styled(Cell)`\n  background-color: white;\n`;\n\nconst Table = styled('table')`\n  margin: 0;\n`;\n\nexport default Qrcode;\n","import React from 'react';\nimport {RouteComponentProps, withRouter} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {openRecoveryOptions} from 'app/actionCreators/modal';\nimport {fetchOrganizationByMember} from 'app/actionCreators/organizations';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport {PanelItem} from 'app/components/panels';\nimport Qrcode from 'app/components/qrcode';\nimport U2fsign from 'app/components/u2f/u2fsign';\nimport {t} from 'app/locale';\nimport {Authenticator} from 'app/types';\nimport getPendingInvite from 'app/utils/getPendingInvite';\nimport AsyncView from 'app/views/asyncView';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport FormModel from 'app/views/settings/components/forms/model';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport {FieldObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype getFieldsOpts = {\n  authenticator: Authenticator;\n  /**\n   * Flag to track if totp has been sent\n   */\n  hasSentCode: boolean;\n  /**\n   * Flag to track if we are currently sending the otp code\n   */\n  sendingCode: boolean;\n  /**\n   * Callback to reset SMS 2fa enrollment\n   */\n  onSmsReset: () => void;\n  /**\n   * Callback when u2f device is activated\n   */\n  onU2fTap: U2fsign['props']['onTap'];\n};\n\n/**\n * Retrieve additional form fields (or modify ones) based on 2fa method\n */\nconst getFields = ({\n  authenticator,\n  hasSentCode,\n  sendingCode,\n  onSmsReset,\n  onU2fTap,\n}: getFieldsOpts): null | FieldObject[] => {\n  const {form} = authenticator;\n\n  if (!form) {\n    return null;\n  }\n\n  if (authenticator.id === 'totp') {\n    return [\n      () => (\n        <PanelItem key=\"qrcode\" justifyContent=\"center\" p={2}>\n          <Qrcode code={authenticator.qrcode} />\n        </PanelItem>\n      ),\n      () => (\n        <Field key=\"secret\" label={t('Authenticator secret')}>\n          <TextCopyInput>{authenticator.secret ?? ''}</TextCopyInput>\n        </Field>\n      ),\n      ...form,\n      () => (\n        <PanelItem key=\"confirm\" justifyContent=\"flex-end\" p={2}>\n          <Button priority=\"primary\" type=\"submit\">\n            {t('Confirm')}\n          </Button>\n        </PanelItem>\n      ),\n    ];\n  }\n\n  // Sms Form needs a start over button + confirm button\n  // Also inputs being disabled vary based on hasSentCode\n  if (authenticator.id === 'sms') {\n    // Ideally we would have greater flexibility when rendering footer\n    return [\n      {...form[0], disabled: sendingCode || hasSentCode},\n      ...(hasSentCode ? [{...form[1], required: true}] : []),\n      () => (\n        <PanelItem key=\"sms-footer\" justifyContent=\"flex-end\" p={2} pr=\"36px\">\n          {hasSentCode && (\n            <Button css={{marginRight: 6}} onClick={onSmsReset}>\n              {t('Start Over')}\n            </Button>\n          )}\n          <Button priority=\"primary\" type=\"submit\">\n            {hasSentCode ? t('Confirm') : t('Send Code')}\n          </Button>\n        </PanelItem>\n      ),\n    ];\n  }\n\n  // Need to render device name field + U2f component\n  if (authenticator.id === 'u2f') {\n    const deviceNameField = form.find(({name}) => name === 'deviceName')!;\n    return [\n      deviceNameField,\n      () => (\n        <U2fsign\n          key=\"u2f-enroll\"\n          style={{marginBottom: 0}}\n          challengeData={authenticator.challenge}\n          displayMode=\"enroll\"\n          onTap={onU2fTap}\n        />\n      ),\n    ];\n  }\n\n  return null;\n};\n\ntype Props = AsyncView['props'] & RouteComponentProps<{authId: string}, {}> & {};\n\ntype State = AsyncView['state'] & {\n  authenticator: Authenticator | null;\n  hasSentCode: boolean;\n  sendingCode: boolean;\n};\n\ntype PendingInvite = ReturnType<typeof getPendingInvite>;\n\n/**\n * Renders necessary forms in order to enroll user in 2fa\n */\nclass AccountSecurityEnroll extends AsyncView<Props, State> {\n  formModel = new FormModel();\n\n  getTitle() {\n    return t('Security');\n  }\n\n  getDefaultState() {\n    return {...super.getDefaultState(), hasSentCode: false};\n  }\n\n  get authenticatorEndpoint() {\n    return `/users/me/authenticators/${this.props.params.authId}/`;\n  }\n\n  get enrollEndpoint() {\n    return `${this.authenticatorEndpoint}enroll/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const errorHandler = (err: any) => {\n      const alreadyEnrolled =\n        err &&\n        err.status === 400 &&\n        err.responseJSON &&\n        err.responseJSON.details === 'Already enrolled';\n\n      if (alreadyEnrolled) {\n        this.props.router.push('/settings/account/security/');\n        addErrorMessage(t('Already enrolled'));\n      }\n\n      // Allow the endpoint to fail if the user is already enrolled\n      return alreadyEnrolled;\n    };\n\n    return [['authenticator', this.enrollEndpoint, {}, {allowError: errorHandler}]];\n  }\n\n  componentDidMount() {\n    this.pendingInvitation = getPendingInvite();\n  }\n\n  pendingInvitation: PendingInvite = null;\n\n  get authenticatorName() {\n    return this.state.authenticator?.name ?? 'Authenticator';\n  }\n\n  // This resets state so that user can re-enter their phone number again\n  handleSmsReset = () => this.setState({hasSentCode: false}, this.remountComponent);\n\n  // Handles SMS authenticators\n  handleSmsSubmit = async (dataModel: any) => {\n    const {authenticator, hasSentCode} = this.state;\n    const {phone, otp} = dataModel;\n\n    // Don't submit if empty\n    if (!phone || !authenticator) {\n      return;\n    }\n\n    const data = {\n      phone,\n      // Make sure `otp` is undefined if we are submitting OTP verification\n      // Otherwise API will think that we are on verification step (e.g. after submitting phone)\n      otp: hasSentCode ? otp : undefined,\n      secret: authenticator.secret,\n    };\n\n    // Only show loading when submitting OTP\n    this.setState({sendingCode: !hasSentCode});\n\n    if (!hasSentCode) {\n      addLoadingMessage(t('Sending code to %s...', data.phone));\n    } else {\n      addLoadingMessage(t('Verifying OTP...'));\n    }\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (error) {\n      this.formModel.resetForm();\n\n      addErrorMessage(\n        this.state.hasSentCode ? t('Incorrect OTP') : t('Error sending SMS')\n      );\n\n      this.setState({\n        hasSentCode: false,\n        sendingCode: false,\n      });\n\n      // Re-mount because we want to fetch a fresh secret\n      this.remountComponent();\n\n      return;\n    }\n\n    if (!hasSentCode) {\n      // Just successfully finished sending OTP to user\n      this.setState({hasSentCode: true, sendingCode: false});\n      addSuccessMessage(t('Sent code to %s', data.phone));\n    } else {\n      // OTP was accepted and SMS was added as a 2fa method\n      this.handleEnrollSuccess();\n    }\n  };\n\n  // Handle u2f device tap\n  handleU2fTap = async (tapData: any) => {\n    const data = {...tapData, ...this.formModel.fields.toJS()};\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Currently only TOTP uses this\n  handleTotpSubmit = async (dataModel: any) => {\n    if (!this.state.authenticator) {\n      return;\n    }\n\n    const data = {\n      ...(dataModel ?? {}),\n      secret: this.state.authenticator.secret,\n    };\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {method: 'POST', data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  handleSubmit: Form['props']['onSubmit'] = data => {\n    const id = this.state.authenticator?.id;\n\n    if (id === 'totp') {\n      this.handleTotpSubmit(data);\n      return;\n    }\n    if (id === 'sms') {\n      this.handleSmsSubmit(data);\n      return;\n    }\n  };\n\n  // Handler when we successfully add a 2fa device\n  async handleEnrollSuccess() {\n    // If we're pending approval of an invite, the user will have just joined\n    // the organization when completing 2fa enrollment. We should reload the\n    // organization context in that case to assign them to the org.\n    if (this.pendingInvitation) {\n      await fetchOrganizationByMember(this.pendingInvitation.memberId.toString(), {\n        addOrg: true,\n        fetchOrgDetails: true,\n      });\n    }\n\n    this.props.router.push('/settings/account/security/');\n    openRecoveryOptions({authenticatorName: this.authenticatorName});\n  }\n\n  // Handler when we failed to add a 2fa device\n  handleEnrollError() {\n    this.setState({loading: false});\n    addErrorMessage(t('Error adding %s authenticator', this.authenticatorName));\n  }\n\n  // Removes an authenticator\n  handleRemove = async () => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // `authenticator.authId` is NOT the same as `props.params.authId` This is\n    // for backwards compatability with API endpoint\n    try {\n      await this.api.requestPromise(this.authenticatorEndpoint, {method: 'DELETE'});\n    } catch (err) {\n      addErrorMessage(t('Error removing authenticator'));\n      return;\n    }\n\n    this.props.router.push('/settings/account/security/');\n    addSuccessMessage(t('Authenticator has been removed'));\n  };\n\n  renderBody() {\n    const {authenticator, hasSentCode, sendingCode} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const fields = getFields({\n      authenticator,\n      hasSentCode,\n      sendingCode,\n      onSmsReset: this.handleSmsReset,\n      onU2fTap: this.handleU2fTap,\n    });\n\n    // Attempt to extract `defaultValue` from server generated form fields\n    const defaultValues = fields\n      ? fields\n          .filter(\n            field =>\n              typeof field !== 'function' && typeof field.defaultValue !== 'undefined'\n          )\n          .map(field => [\n            field.name,\n            typeof field !== 'function' ? field.defaultValue : '',\n          ])\n          .reduce((acc, [name, value]) => {\n            acc[name] = value;\n            return acc;\n          }, {})\n      : {};\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={\n            <React.Fragment>\n              <span>{authenticator.name}</span>\n              <CircleIndicator css={{marginLeft: 6}} enabled={authenticator.isEnrolled} />\n            </React.Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <RemoveConfirm onConfirm={this.handleRemove}>\n                <Button priority=\"danger\">{authenticator.removeButton}</Button>\n              </RemoveConfirm>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        {!!authenticator.form?.length && (\n          <Form\n            model={this.formModel}\n            apiMethod=\"POST\"\n            apiEndpoint={this.authenticatorEndpoint}\n            onSubmit={this.handleSubmit}\n            initialData={{...defaultValues, ...authenticator}}\n            hideFooter\n          >\n            <JsonForm forms={[{title: 'Configuration', fields: fields ?? []}]} />\n          </Form>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(AccountSecurityEnroll);\n"],"sourceRoot":""}