{"version":3,"sources":["webpack:///./app/views/performance/transactionVitals/constants.tsx","webpack:///./app/views/events/searchBar.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/events/index.jsx"],"names":["NUM_BUCKETS","PERCENTILE","WEB_VITAL_DETAILS","WebVital","FP","slug","name","t","acronym","description","failureThreshold","type","measurementType","FCP","LCP","FID","CLS","TTFB","RequestTime","LONG_WEB_VITAL_NAMES","Object","fromEntries","values","map","value","WEB_VITAL_ACRONYMS","FILTER_OPTIONS","label","_VITAL_GROUPS","vitals","min","precision","_COLORS","theme","charts","getColorPalette","reduce","count","length","reverse","VITAL_GROUPS","group","colors","splice","ZOOM_KEYS","keys","forEach","vital","vitalSlug","push","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","getEventFieldValues","memoize","tag","query","endpointParams","props","api","organization","projectIds","projectIdStrings","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","then","results","flatten","filter","defined","Error","prepareQuery","replace","this","cache","clear","prevProps","isEqual","measurements","fields","tags","omitTags","functionTags","item","FIELD_TAGS","includes","field","fieldTags","features","assign","omit","TRACING_FIELDS","combined","has","predefined","getTagList","css","hasRecentSearches","savedSearchType","SavedSearchType","EVENT","onGetTagValues","supportedTags","excludeEnvironment","dropdownClassName","React","PureComponent","withApi","withTags","MEASUREMENTS","entries","Measurements","Fragment","children","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","Reflux","listenTo","TagStore","getInitialState","getAllTags","onTagsUpdate","setState","render","state","EventsContainer","handleSearch","router","location","pathname","getParams","selection","loadOrganizationTags","projects","datetime","hookName","renderDisabled","resetParamsOnChange","Body","HeaderTitle","StyledSearchBar","placeholder","onSearch","Component","withOrganization","withGlobalSelection","p","backgroundSecondary","PageHeading","space"],"mappings":"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","file":"EventsContainer.js","sourcesContent":["import {t} from 'app/locale';\nimport {SelectValue} from 'app/types';\nimport {measurementType, WebVital} from 'app/utils/discover/fields';\nimport theme from 'app/utils/theme';\n\nimport {DataFilter, Vital, VitalGroup} from './types';\n\nexport const NUM_BUCKETS = 100;\n\nexport const PERCENTILE = 0.75;\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    acronym: 'FP',\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    failureThreshold: 3000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    acronym: 'FCP',\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    failureThreshold: 3000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    acronym: 'LCP',\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    failureThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    acronym: 'FID',\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    failureThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    acronym: 'CLS',\n    description: t(\n      'Sum of layout shift scores that measure the visual stability of the page.'\n    ),\n    failureThreshold: 0.25,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    acronym: 'TTFB',\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    failureThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    acronym: 'RT',\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    failureThreshold: 600,\n    type: measurementType(WebVital.RequestTime),\n  },\n};\n\n// translate known short form names into their long forms\nexport const LONG_WEB_VITAL_NAMES = Object.fromEntries(\n  Object.values(WEB_VITAL_DETAILS).map(value => {\n    return [value.slug, value.name];\n  })\n);\n\nexport const WEB_VITAL_ACRONYMS = Object.fromEntries(\n  Object.values(WEB_VITAL_DETAILS).map(value => {\n    return [value.slug, value.acronym];\n  })\n);\n\nexport const FILTER_OPTIONS: SelectValue<DataFilter>[] = [\n  {label: t('Exclude Outliers'), value: 'exclude_outliers'},\n  {label: t('View All'), value: 'all'},\n];\n\n/**\n * This defines the grouping for histograms. Histograms that are in the same group\n * will be queried together on initial load for alignment. However, the zoom controls\n * are defined for each measurement independently.\n */\nconst _VITAL_GROUPS = [\n  {\n    vitals: [WebVital.FP, WebVital.FCP, WebVital.LCP],\n    min: 0,\n  },\n  {\n    vitals: [WebVital.FID],\n    min: 0,\n    precision: 2,\n  },\n  {\n    vitals: [WebVital.CLS],\n    min: 0,\n    precision: 2,\n  },\n];\n\nconst _COLORS = [\n  ...theme.charts.getColorPalette(\n    _VITAL_GROUPS.reduce((count, {vitals}) => count + vitals.length, 0) - 1\n  ),\n].reverse();\n\nexport const VITAL_GROUPS: VitalGroup[] = _VITAL_GROUPS.map(group => ({\n  ...group,\n  colors: _COLORS.splice(0, group.vitals.length),\n}));\n\nexport const ZOOM_KEYS = _VITAL_GROUPS.reduce((keys: string[], {vitals}) => {\n  vitals.forEach(vital => {\n    const vitalSlug = WEB_VITAL_DETAILS[vital].slug;\n    keys.push(`${vitalSlug}Start`);\n    keys.push(`${vitalSlug}End`);\n  });\n  return keys;\n}, []);\n","import React from 'react';\nimport {ClassNames} from '@emotion/core';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'app/actionCreators/tags';\nimport {Client} from 'app/api';\nimport SmartSearchBar from 'app/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'app/types';\nimport {defined} from 'app/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isMeasurement,\n  TRACING_FIELDS,\n} from 'app/utils/discover/fields';\nimport Measurements from 'app/utils/measurements/measurements';\nimport withApi from 'app/utils/withApi';\nimport withTags from 'app/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\ntype SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  api: Client;\n  organization: Organization;\n  tags: TagCollection;\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n  fields?: Readonly<Field[]>;\n};\n\nclass SearchBar extends React.PureComponent<SearchBarProps> {\n  componentDidMount() {\n    // Clear memoized data on mount to make tests more consistent.\n    this.getEventFieldValues.cache.clear?.();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(this.props.projectIds, prevProps.projectIds)) {\n      // Clear memoized data when projects change.\n      this.getEventFieldValues.cache.clear?.();\n    }\n  }\n\n  /**\n   * Returns array of tag values that substring match `query`; invokes `callback`\n   * with data when ready\n   */\n  getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const {api, organization, projectIds} = this.props;\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  /**\n   * Prepare query string (e.g. strip special characters like negation operator)\n   */\n  prepareQuery = query => query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n\n  getTagList(measurements) {\n    const {fields, organization, tags, omitTags} = this.props;\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(item => !Object.keys(FIELD_TAGS).includes(item.field))\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const combined = assign({}, tags, fieldTags);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  }\n\n  render() {\n    return (\n      <Measurements>\n        {({measurements}) => {\n          const tags = this.getTagList(measurements);\n          return (\n            <ClassNames>\n              {({css}) => (\n                <SmartSearchBar\n                  {...this.props}\n                  hasRecentSearches\n                  savedSearchType={SavedSearchType.EVENT}\n                  onGetTagValues={this.getEventFieldValues}\n                  supportedTags={tags}\n                  prepareQuery={this.prepareQuery}\n                  excludeEnvironment\n                  dropdownClassName={css`\n                    max-height: 300px;\n                    overflow-y: auto;\n                  `}\n                />\n              )}\n            </ClassNames>\n          );\n        }}\n      </Measurements>\n    );\n  }\n}\n\nexport default withApi(withTags(SearchBar));\n","import React from 'react';\n\nimport {WEB_VITAL_DETAILS} from 'app/views/performance/transactionVitals/constants';\n\ntype Measurement = {\n  name: string;\n  key: string;\n};\n\ntype MeasurementCollection = {[key: string]: Measurement};\n\nconst MEASUREMENTS: MeasurementCollection = Object.fromEntries(\n  Object.entries(WEB_VITAL_DETAILS).map(([key, value]) => {\n    const newValue: Measurement = {\n      name: value.name,\n      key,\n    };\n    return [key, newValue];\n  })\n);\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements(props: Props) {\n  return (\n    <React.Fragment>\n      {props.children({\n        measurements: MEASUREMENTS,\n      })}\n    </React.Fragment>\n  );\n}\n\nexport default Measurements;\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport TagStore from 'app/stores/tagStore';\nimport {TagCollection} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nconst withTags = <P extends InjectedTagsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTagsProps>, State>({\n    displayName: `withTags(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TagStore, 'onTagsUpdate') as any],\n\n    getInitialState() {\n      return {\n        tags: TagStore.getAllTags(),\n      };\n    },\n\n    onTagsUpdate(tags: TagCollection) {\n      this.setState({\n        tags,\n      });\n    },\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    },\n  });\n\nexport default withTags;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\n\nimport {loadOrganizationTags} from 'app/actionCreators/tags';\nimport Feature from 'app/components/acl/feature';\nimport FeatureBadge from 'app/components/featureBadge';\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';\nimport PageHeading from 'app/components/pageHeading';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport {PageContent, PageHeader} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport SearchBar from './searchBar';\n\nclass EventsContainer extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    organization: SentryTypes.Organization,\n    router: PropTypes.object,\n    selection: SentryTypes.GlobalSelection,\n  };\n\n  componentDidMount() {\n    const {api, organization, selection} = this.props;\n    loadOrganizationTags(api, organization.slug, selection);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {api, organization, selection} = this.props;\n\n    if (\n      !isEqual(prevProps.selection.projects, selection.projects) ||\n      !isEqual(prevProps.selection.datetime, selection.datetime)\n    ) {\n      loadOrganizationTags(api, organization.slug, selection);\n    }\n  }\n\n  handleSearch = query => {\n    const {router, location} = this.props;\n    router.push({\n      pathname: location.pathname,\n      query: getParams({\n        ...(location.query || {}),\n        query,\n      }),\n    });\n  };\n\n  render() {\n    const {organization, location, children, selection} = this.props;\n\n    return (\n      <Feature\n        features={['events']}\n        hookName=\"feature-disabled:events-page\"\n        renderDisabled\n      >\n        <GlobalSelectionHeader resetParamsOnChange={['cursor']}>\n          <PageContent>\n            <LightWeightNoProjectMessage organization={organization}>\n              <Body>\n                <PageHeader>\n                  <HeaderTitle>\n                    {t('Events')} <FeatureBadge type=\"beta\" />\n                  </HeaderTitle>\n                </PageHeader>\n                <div>\n                  <StyledSearchBar\n                    organization={organization}\n                    projectIds={selection.projects}\n                    query={(location.query && location.query.query) || ''}\n                    placeholder={t(\n                      'Search for events, users, tags, and everything else.'\n                    )}\n                    onSearch={this.handleSearch}\n                  />\n                </div>\n                {children}\n              </Body>\n            </LightWeightNoProjectMessage>\n          </PageContent>\n        </GlobalSelectionHeader>\n      </Feature>\n    );\n  }\n}\nexport default withApi(withOrganization(withGlobalSelection(EventsContainer)));\nexport {EventsContainer};\n\nconst Body = styled('div')`\n  background-color: ${p => p.theme.backgroundSecondary};\n  flex-direction: column;\n  flex: 1;\n`;\n\nconst HeaderTitle = styled(PageHeading)`\n  flex: 1;\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  flex: 1;\n  margin-bottom: ${space(2)};\n`;\n"],"sourceRoot":""}