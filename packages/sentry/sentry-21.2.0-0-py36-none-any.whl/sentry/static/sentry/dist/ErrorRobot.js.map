{"version":3,"sources":["webpack:///./app/views/onboarding/createSampleEventButton.tsx","webpack:///./images/spot/sentry-robot.png","webpack:///./app/components/errorRobot.tsx"],"names":["latestEventAvailable","api","groupID","a","retries","eventCreated","Promise","resolve","setTimeout","requestPromise","CreateSampleEventButton","state","creating","createSampleGroup","props","organization","project","addLoadingMessage","t","setState","url","slug","method","eventData","Sentry","scope","setExtra","Error","addErrorMessage","t0","performance","now","t1","clearIndicators","duration","Math","ceil","recordAnalytics","setTag","platform","toString","setLevel","Warning","browserHistory","push","this","source","trackAdhocEvent","eventKey","org_id","id","project_id","eventName","trackAnalyticsEvent","organization_id","interval","data-test-id","disabled","onClick","React","Component","withApi","withOrganization","module","exports","ErrorRobot","error","loading","sampleIssueId","fetchData","org","defined","data","limit","length","responseJSON","detail","gradient","sampleLink","to","priority","title","undefined","ErrorRobotWrapper","className","Robot","aria-hidden","Eye","MessageContainer","tct","strike","Strikethrough","p","theme","fontSizeExtraLarge","space","backgroundSecondary","background","breakpoints","robotBackground"],"mappings":"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","file":"ErrorRobot.js","sourcesContent":["import React from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport {trackAdhocEvent, trackAnalyticsEvent} from 'app/utils/analytics';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = React.ComponentProps<typeof Button> & {\n  api: Client;\n  organization: Organization;\n  project?: Project;\n  source: string;\n};\n\ntype State = {\n  creating: boolean;\n};\n\nconst EVENT_POLL_RETRIES = 6;\nconst EVENT_POLL_INTERVAL = 800;\n\nasync function latestEventAvailable(\n  api: Client,\n  groupID: string\n): Promise<{eventCreated: boolean; retries: number}> {\n  let retries = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (retries > EVENT_POLL_RETRIES) {\n      return {eventCreated: false, retries: retries - 1};\n    }\n    await new Promise(resolve => setTimeout(resolve, EVENT_POLL_INTERVAL));\n    try {\n      await api.requestPromise(`/issues/${groupID}/events/latest/`);\n      return {eventCreated: true, retries};\n    } catch {\n      ++retries;\n    }\n  }\n}\n\nclass CreateSampleEventButton extends React.Component<Props, State> {\n  state = {\n    creating: false,\n  };\n\n  componentDidMount() {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdhocEvent({\n      eventKey: 'sample_event.button_viewed',\n      org_id: organization.id,\n      project_id: project.id,\n      source,\n    });\n  }\n\n  recordAnalytics({eventCreated, retries, duration}) {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    const eventKey = `sample_event.${eventCreated ? 'created' : 'failed'}`;\n    const eventName = `Sample Event ${eventCreated ? 'Created' : 'Failed'}`;\n\n    trackAnalyticsEvent({\n      eventKey,\n      eventName,\n      organization_id: organization.id,\n      project_id: project.id,\n      platform: project.platform || '',\n      interval: EVENT_POLL_INTERVAL,\n      retries,\n      duration,\n      source,\n    });\n  }\n\n  createSampleGroup = async () => {\n    // TODO(dena): swap out for action creator\n    const {api, organization, project} = this.props;\n    let eventData;\n\n    if (!project) {\n      return;\n    }\n\n    addLoadingMessage(t('Processing sample event...'));\n    this.setState({creating: true});\n\n    try {\n      const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;\n      eventData = await api.requestPromise(url, {method: 'POST'});\n    } catch (error) {\n      Sentry.withScope(scope => {\n        scope.setExtra('error', error);\n        Sentry.captureException(new Error('Failed to create sample event'));\n      });\n      this.setState({creating: false});\n      addErrorMessage(t('Failed to create a new sample event'));\n      return;\n    }\n\n    // Wait for the event to be fully processed and available on the group\n    // before redirecting.\n    const t0 = performance.now();\n    const {eventCreated, retries} = await latestEventAvailable(api, eventData.groupID);\n    const t1 = performance.now();\n\n    clearIndicators();\n    this.setState({creating: false});\n\n    const duration = Math.ceil(t1 - t0);\n    this.recordAnalytics({eventCreated, retries, duration});\n\n    if (!eventCreated) {\n      addErrorMessage(t('Failed to load sample event'));\n\n      Sentry.withScope(scope => {\n        scope.setTag('groupID', eventData.groupID);\n        scope.setTag('platform', project.platform || '');\n        scope.setTag('interval', EVENT_POLL_INTERVAL.toString());\n        scope.setTag('retries', retries.toString());\n        scope.setTag('duration', duration.toString());\n\n        scope.setLevel(Sentry.Severity.Warning);\n        Sentry.captureMessage('Failed to load sample event');\n      });\n      return;\n    }\n\n    browserHistory.push(\n      `/organizations/${organization.slug}/issues/${eventData.groupID}/`\n    );\n  };\n\n  render() {\n    const {\n      api: _api,\n      organization: _organization,\n      project: _project,\n      source: _source,\n      ...props\n    } = this.props;\n    const {creating} = this.state;\n\n    return (\n      <Button\n        {...props}\n        data-test-id=\"create-sample-event\"\n        disabled={props.disabled || creating}\n        onClick={this.createSampleGroup}\n      />\n    );\n  }\n}\n\nexport default withApi(withOrganization(CreateSampleEventButton));\n","module.exports = __webpack_public_path__ + \"sentry-robot.f8ee35.png\";","import React from 'react';\nimport {Link} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport robotBackground from 'sentry-images/spot/sentry-robot.png';\n\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {LightWeightOrganization, Project} from 'app/types';\nimport {defined} from 'app/utils';\nimport withApi from 'app/utils/withApi';\nimport CreateSampleEventButton from 'app/views/onboarding/createSampleEventButton';\n\ntype Props = {\n  api: Client;\n  org: LightWeightOrganization;\n  project?: Project;\n  gradient: boolean;\n  /**\n   * sampleIssueId can have 3 values:\n   * - empty string to indicate it doesn't exist (render \"create sample event\")\n   * - non-empty string to indicate it exists (render \"see sample event\")\n   * - undefined to indicate the project API should be consulted to find out\n   */\n  sampleIssueId?: string;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  sampleIssueId?: string;\n};\n\nclass ErrorRobot extends React.Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: false,\n    sampleIssueId: this.props.sampleIssueId,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async fetchData() {\n    const {org, project} = this.props;\n    const {sampleIssueId} = this.state;\n\n    if (!project) {\n      return;\n    }\n\n    if (defined(sampleIssueId)) {\n      return;\n    }\n\n    const url = `/projects/${org.slug}/${project.slug}/issues/`;\n\n    this.setState({loading: true});\n\n    try {\n      const data = await this.props.api.requestPromise(url, {\n        method: 'GET',\n        data: {limit: 1},\n      });\n      this.setState({sampleIssueId: (data.length > 0 && data[0].id) || ''});\n    } catch (err) {\n      const error = err?.responseJSON?.detail ?? true;\n      this.setState({error});\n    }\n\n    this.setState({loading: false});\n  }\n\n  render() {\n    const {loading, error, sampleIssueId} = this.state;\n    const {org, project, gradient} = this.props;\n\n    const sampleLink =\n      project && (loading || error ? null : sampleIssueId) ? (\n        <p>\n          <Link to={`/${org.slug}/${project.slug}/issues/${sampleIssueId}/?sample`}>\n            {t('Or see your sample event')}\n          </Link>\n        </p>\n      ) : (\n        <p>\n          <CreateSampleEventButton\n            priority=\"link\"\n            project={project}\n            source=\"issues_list\"\n            disabled={!project}\n            title={!project ? t('Select a project to create a sample event') : undefined}\n          >\n            {t('Create a sample event')}\n          </CreateSampleEventButton>\n        </p>\n      );\n\n    return (\n      <ErrorRobotWrapper\n        data-test-id=\"awaiting-events\"\n        className=\"awaiting-events\"\n        gradient={gradient}\n      >\n        <Robot aria-hidden>\n          <Eye />\n        </Robot>\n        <MessageContainer>\n          <h3>{t('Waiting for events…')}</h3>\n          <p>\n            {tct(\n              'Our error robot is waiting to [strike:devour] receive your first event.',\n              {\n                strike: <Strikethrough />,\n              }\n            )}\n          </p>\n          <p>\n            {project && (\n              <Button\n                data-test-id=\"install-instructions\"\n                priority=\"primary\"\n                to={`/${org.slug}/${project.slug}/getting-started/${\n                  project.platform || ''\n                }`}\n              >\n                {t('Installation Instructions')}\n              </Button>\n            )}\n          </p>\n          {sampleLink}\n        </MessageContainer>\n      </ErrorRobotWrapper>\n    );\n  }\n}\n\nexport {ErrorRobot};\n\nexport default withApi(ErrorRobot);\n\nconst ErrorRobotWrapper = styled('div')<{gradient: boolean}>`\n  display: flex;\n  justify-content: center;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.08);\n  border-radius: 0 0 3px 3px;\n  padding: 40px ${space(3)} ${space(3)};\n  min-height: 260px;\n  ${p =>\n    p.gradient\n      ? `\n          background-image: linear-gradient(to bottom, ${p.theme.backgroundSecondary}, ${p.theme.background});\n         `\n      : ''};\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    flex-direction: column;\n    align-items: center;\n    padding: ${space(3)};\n    text-align: center;\n  }\n`;\n\nconst Robot = styled('div')`\n  display: block;\n  position: relative;\n  width: 220px;\n  height: 260px;\n  background: url(${robotBackground});\n  background-size: cover;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    width: 110px;\n    height: 130px;\n  }\n`;\n\nconst Eye = styled('span')`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: absolute;\n  top: 70px;\n  left: 81px;\n  transform: translateZ(0);\n  animation: blink-eye 0.6s infinite;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    width: 6px;\n    height: 6px;\n    top: 35px;\n    left: 41px;\n  }\n\n  @keyframes blink-eye {\n    0% {\n      background: #e03e2f;\n      box-shadow: 0 0 10px #e03e2f;\n    }\n\n    50% {\n      background: #4a4d67;\n      box-shadow: none;\n    }\n\n    100% {\n      background: #e03e2f;\n      box-shadow: 0 0 10px #e03e2f;\n    }\n  }\n`;\n\nconst MessageContainer = styled('div')`\n  align-self: center;\n  max-width: 480px;\n  margin-left: 40px;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    margin: 0;\n  }\n`;\n\nconst Strikethrough = styled('span')`\n  text-decoration: line-through;\n`;\n"],"sourceRoot":""}