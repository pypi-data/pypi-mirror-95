{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/events/chart.jsx","webpack:///./app/views/events/eventsTable.jsx","webpack:///./app/views/events/events.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","Chart","withGlobalSelection","withApi","props","selection","datetime","projects","environments","React","Component","EventsTableBody","events","organization","utc","projectsMap","map","event","eventIdx","project","get","projectID","trimmedMessage","message","split","substr","eventLink","slug","eventID","TableRow","key","first","TableData","EventTitle","to","avatarSize","displayName","avatarProps","consistentWidth","height","width","user","hideEmail","StyledDateTime","date","Date","dateCreated","PureComponent","EventsTable","nextProps","reloading","zoomChanged","loading","loadingProjects","prevProps","onUpdateComplete","hasEvents","length","TableLayout","t","StyledPanelBody","StyledLoadingIndicator","overlay","projectList","Map","id","withProjects","withRouter","PanelBody","space","LoadingIndicator","p","theme","fontSizeMedium","innerBorder","overflowEllipsis","DateTime","gray300","parseRowFromLinks","links","numRows","parseLinkHeader","previous","results","currentStart","Number","cursor","next","TotalEventCount","location","query","statsPeriod","getParams","Sentry","Error","eventsMeta","state","isAllResults","count","toLocaleString","Events","shouldReload","handleZoom","setState","zoomed","handleTableUpdateComplete","nextState","find","isEqual","stateKey","data","jqXHR","getResponseHeader","api","requestPromise","resp","browserHistory","replace","args","responseJSON","detail","addErrorMessage","eventsPageLinks","renderBody","router","error","parsedLinks","Fragment","onZoom","PaginationWrapper","RowDisplay","renderRowCounts","features","PaginationNoMargin","pageLinks","Pagination","gray200","withOrganization"],"mappings":"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","file":"Events.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\n\nimport EventsChart from 'app/components/charts/eventsChart';\nimport SentryTypes from 'app/sentryTypes';\nimport withApi from 'app/utils/withApi';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\n\nconst Chart = withGlobalSelection(\n  withApi(\n    class EventsChartWithParams extends React.Component {\n      static propTypes = {\n        selection: SentryTypes.GlobalSelection,\n      };\n\n      render() {\n        const {selection, ...props} = this.props;\n        const {datetime, projects, environments} = selection;\n\n        return (\n          <EventsChart\n            {...datetime}\n            projects={projects || []}\n            environments={environments || []}\n            {...props}\n          />\n        );\n      }\n    }\n  )\n);\n\nexport default Chart;\n","import React from 'react';\nimport {Link, withRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nimport DateTime from 'app/components/dateTime';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport IdBadge from 'app/components/idBadge';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport Placeholder from 'app/components/placeholder';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport withProjects from 'app/utils/withProjects';\n\nclass EventsTableBody extends React.PureComponent {\n  static propTypes = {\n    events: PropTypes.array,\n    organization: SentryTypes.Organization,\n    utc: PropTypes.bool,\n    projectsMap: PropTypes.object,\n  };\n\n  render() {\n    const {events, organization, utc, projectsMap} = this.props;\n\n    return events.map((event, eventIdx) => {\n      const project = projectsMap.get(event.projectID);\n      const trimmedMessage = event.title || event.message.split('\\n')[0].substr(0, 100);\n      const eventLink = project\n        ? `/organizations/${organization.slug}/projects/${project?.slug}/events/${event.eventID}/`\n        : '';\n\n      return (\n        <TableRow key={`${project?.slug}-${event.eventID}`} first={eventIdx === 0}>\n          <TableData>\n            <EventTitle>\n              {project ? <Link to={eventLink}>{trimmedMessage}</Link> : trimmedMessage}\n            </EventTitle>\n          </TableData>\n\n          <TableData>{event['event.type']}</TableData>\n\n          <TableData>\n            {project ? (\n              <IdBadge\n                project={project}\n                avatarSize={16}\n                displayName={<span>{project?.slug}</span>}\n                avatarProps={{consistentWidth: true}}\n              />\n            ) : (\n              <Placeholder height=\"16px\" width=\"50px\" />\n            )}\n          </TableData>\n\n          <TableData>\n            {event && event.user && (\n              <IdBadge user={event.user} hideEmail avatarSize={16} />\n            )}\n          </TableData>\n\n          <TableData>\n            <StyledDateTime utc={utc} date={new Date(event.dateCreated)} />\n          </TableData>\n        </TableRow>\n      );\n    });\n  }\n}\n\nclass EventsTable extends React.Component {\n  static propTypes = {\n    // Initial loading state\n    loading: PropTypes.bool,\n\n    // projectsStore loading state of projects\n    loadingProjects: PropTypes.bool,\n\n    // When initial data has been loaded, but params have changed\n    reloading: PropTypes.bool,\n\n    // Special state when chart has been zoomed\n    zoomChanged: PropTypes.bool,\n\n    events: PropTypes.array,\n    organization: SentryTypes.Organization,\n    projects: PropTypes.arrayOf(SentryTypes.Project),\n    utc: PropTypes.bool,\n\n    // When Table is in loading state due to chart zoom but has\n    // completed its new API request\n    onUpdateComplete: PropTypes.func,\n  };\n\n  shouldComponentUpdate(nextProps) {\n    // Update if any of these \"loading\"-type props change so we can display loader\n    if (\n      this.props.reloading !== nextProps.reloading ||\n      this.props.zoomChanged !== nextProps.zoomChanged ||\n      this.props.loading !== nextProps.loading ||\n      this.props.loadingProjects !== nextProps.loadingProjects\n    ) {\n      return true;\n    }\n\n    // If org or events has not changed, then don't re-render\n    // Shallow compare events\n    if (\n      this.props.organization === nextProps.organization &&\n      this.props.events === nextProps.events\n    ) {\n      return false;\n    }\n\n    // Otherwise update\n    return true;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.onUpdateComplete && prevProps.zoomChanged && this.props.reloading) {\n      this.props.onUpdateComplete();\n    }\n  }\n\n  get projectsMap() {\n    const {organization, loadingProjects, projects} = this.props;\n    const projectList = (!loadingProjects && projects) || organization.projects || [];\n\n    return new Map(projectList.map(project => [project.id, project]));\n  }\n\n  render() {\n    const {events, organization, loading, reloading, zoomChanged, utc} = this.props;\n    const hasEvents = events && !!events.length;\n\n    return (\n      <Panel>\n        <PanelHeader>\n          <TableLayout>\n            <div>{t('Event')}</div>\n            <div>{t('Event Type')}</div>\n            <div>{t('Project')}</div>\n            <div>{t('User')}</div>\n            <div>{t('Time')}</div>\n          </TableLayout>\n        </PanelHeader>\n        {loading && <LoadingIndicator />}\n        {!loading && !hasEvents && (\n          <EmptyStateWarning>\n            <p>{t('No events')}</p>\n          </EmptyStateWarning>\n        )}\n        {hasEvents && (\n          <StyledPanelBody>\n            {(reloading || zoomChanged) && <StyledLoadingIndicator overlay />}\n            <EventsTableBody\n              projectsMap={this.projectsMap}\n              events={events}\n              organization={organization}\n              utc={utc}\n            />\n          </StyledPanelBody>\n        )}\n      </Panel>\n    );\n  }\n}\n\nexport default withProjects(withRouter(EventsTable));\nexport {EventsTable};\n\nconst StyledPanelBody = styled(PanelBody)`\n  overflow-x: auto;\n  padding: 0;\n`;\n\nconst TableLayout = styled('div')`\n  display: grid;\n  grid-template-columns: 0.8fr 0.15fr 0.15fr 0.25fr 200px;\n  grid-column-gap: ${space(1.5)};\n  width: 100%;\n`;\n\nconst StyledLoadingIndicator = styled(LoadingIndicator)`\n  padding-top: 10vh;\n  z-index: 1;\n  &.loading.overlay {\n    align-items: flex-start;\n  }\n`;\n\nconst TableRow = styled(TableLayout)`\n  font-size: ${p => p.theme.fontSizeMedium};\n  border-top: 1px solid ${p => (p.first ? 'transparent' : p.theme.innerBorder)};\n  align-items: center;\n  padding: ${space(1)} ${space(2)};\n`;\n\nconst TableData = styled('div')`\n  overflow: hidden; /* enables overflow-ellipsis on child container */\n`;\n\nconst EventTitle = styled(TableData)`\n  padding-right: ${space(2)};\n  ${overflowEllipsis};\n`;\n\nconst StyledDateTime = styled(DateTime)`\n  color: ${p => p.theme.gray300};\n  ${overflowEllipsis};\n`;\n","import React from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport Feature from 'app/components/acl/feature';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';\nimport Pagination from 'app/components/pagination';\nimport {Panel} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport parseLinkHeader from 'app/utils/parseLinkHeader';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\n\nimport Chart from './chart';\nimport EventsTable from './eventsTable';\n\nconst parseRowFromLinks = (links, numRows) => {\n  links = parseLinkHeader(links);\n  if (!links.previous.results) {\n    return `1-${numRows}`;\n  }\n  const prevStart = Number(links.previous.cursor.split(':')[1]);\n  const nextStart = Number(links.next.cursor.split(':')[1]);\n  const currentStart = (prevStart + nextStart) / 2 + 1;\n  return `${currentStart}-${currentStart + numRows - 1}`;\n};\n\nclass TotalEventCount extends AsyncComponent {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n    location: PropTypes.object.isRequired,\n    isAllResults: PropTypes.bool.isRequired,\n    numRows: PropTypes.number.isRequired,\n  };\n\n  getEndpoints() {\n    const {organization, location} = this.props;\n    const {statsPeriod, ...query} = location.query;\n\n    return [\n      [\n        'eventsMeta',\n        `/organizations/${organization.slug}/events-meta/`,\n        {\n          query: getParams({\n            statsPeriod,\n            ...query,\n          }),\n        },\n      ],\n    ];\n  }\n\n  onRequestError() {\n    Sentry.captureException(new Error('Unable to fetch \"total event count\"'));\n  }\n\n  renderError() {\n    // Don't show an error message, handle it in `onRequestError`\n    return null;\n  }\n\n  renderBody() {\n    const {eventsMeta} = this.state;\n    const {isAllResults, numRows} = this.props;\n    const count = isAllResults ? numRows : eventsMeta.count;\n    return t(` of ${count.toLocaleString()}${isAllResults ? '' : ' (estimated)'}`);\n  }\n}\n\nclass Events extends AsyncView {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Always update if state changes\n    if (this.state !== nextState) {\n      return true;\n    }\n\n    const isDiff = ['path', 'search'].find(\n      key => !isEqual(this.props.location[key], nextProps.location[key])\n    );\n\n    // Always update if query parameters change\n    if (isDiff) {\n      return true;\n    }\n\n    return false;\n  }\n\n  shouldReload = true;\n\n  getEndpoints() {\n    const {organization, location} = this.props;\n    const {statsPeriod, ...query} = location.query;\n\n    return [\n      [\n        'events',\n        `/organizations/${organization.slug}/events/`,\n        {\n          query: getParams({\n            statsPeriod,\n            ...query,\n          }),\n        },\n      ],\n    ];\n  }\n\n  getTitle() {\n    return `Events - ${this.props.organization.slug}`;\n  }\n\n  async handleRequestSuccess({stateKey, data, jqXHR}, ...args) {\n    // When a direct hit is found, do not update state in `handleRequestSuccess`\n    if (jqXHR.getResponseHeader('X-Sentry-Direct-Hit') === '1') {\n      const {organization} = this.props;\n      const event = data[0];\n\n      const resp = await this.api.requestPromise(\n        `/organizations/${organization.slug}/projects/`,\n        {\n          query: {\n            query: `id:${event.projectID}`,\n          },\n        }\n      );\n\n      if (resp && resp.length > 0) {\n        const project = resp[0];\n        browserHistory.replace(\n          `/organizations/${organization.slug}/projects/${project.slug}/events/${event.eventID}/`\n        );\n        return;\n      }\n    }\n\n    super.handleRequestSuccess({stateKey, data, jqXHR}, ...args);\n  }\n\n  onRequestError(resp) {\n    // Allow children to implement this\n    if (resp && resp.responseJSON && resp.responseJSON.detail) {\n      addErrorMessage(resp.responseJSON.detail);\n    }\n  }\n\n  handleZoom = () => this.setState({zoomed: true});\n\n  // Table is considered to be updated when table is in a\n  // reloading state due to chart zoom, but reloading has been finished\n  handleTableUpdateComplete = () => this.setState({zoomed: false});\n\n  renderRowCounts() {\n    const {events, eventsPageLinks} = this.state;\n    if (!eventsPageLinks) {\n      return null;\n    }\n\n    return parseRowFromLinks(eventsPageLinks, events.length);\n  }\n\n  renderError() {\n    return this.renderBody();\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {organization, location, router} = this.props;\n    const {error, loading, reloading, events, eventsPageLinks} = this.state;\n    const parsedLinks =\n      !loading && !error && eventsPageLinks ? parseLinkHeader(eventsPageLinks) : {};\n\n    return (\n      <React.Fragment>\n        {error &&\n          super.renderError(\n            new Error('Unable to load all required endpoints'),\n            false,\n            true\n          )}\n        <Panel>\n          <Chart\n            router={router}\n            query={location.query.query}\n            organization={organization}\n            onZoom={this.handleZoom}\n          />\n        </Panel>\n\n        <EventsTable\n          loading={!reloading && loading}\n          reloading={reloading}\n          zoomChanged={this.state.zoomed}\n          events={events}\n          organization={organization}\n          onUpdateComplete={this.handleTableUpdateComplete}\n        />\n\n        {!loading && !reloading && !error && (\n          <PaginationWrapper>\n            <RowDisplay>\n              {events.length ? t(`Results ${this.renderRowCounts()}`) : t('No Results')}\n              {!!events.length && eventsPageLinks && (\n                <Feature features={['internal-catchall']}>\n                  <TotalEventCount\n                    organization={organization}\n                    location={location}\n                    isAllResults={\n                      !parsedLinks.previous.results && !parsedLinks.next.results\n                    }\n                    numRows={events.length}\n                  />\n                </Feature>\n              )}\n            </RowDisplay>\n\n            <PaginationNoMargin pageLinks={eventsPageLinks} />\n          </PaginationWrapper>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nconst PaginationNoMargin = styled(Pagination)`\n  margin: 0;\n`;\n\nconst PaginationWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst RowDisplay = styled('div')`\n  color: ${p => p.theme.gray200};\n`;\n\nexport default withOrganization(Events);\nexport {Events, parseRowFromLinks};\n"],"sourceRoot":""}