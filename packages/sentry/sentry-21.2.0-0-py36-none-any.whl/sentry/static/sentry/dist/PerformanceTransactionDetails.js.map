{"version":3,"sources":["webpack:///./app/views/performance/vitalDetail/utils.tsx","webpack:///./app/views/performance/charts/utils.tsx","webpack:///./app/views/performance/transactionVitals/utils.tsx","webpack:///./app/views/performance/breadcrumb.tsx","webpack:///./app/views/performance/transactionDetails/content.tsx","webpack:///./app/views/performance/transactionDetails/index.tsx"],"names":["VitalState","webVitalPoor","WebVital","FP","FCP","LCP","FID","CLS","webVitalMeh","vitalStateColors","POOR","theme","red300","MEH","yellow300","GOOD","green300","IconFire","IconWarning","IconCheckmark","vitalDetailRouteWithQuery","orgSlug","vitalName","projectID","query","pathname","generateVitalDetailRoute","project","environment","statsPeriod","start","end","vitalNameFromLocation","location","_vitalName","decodeScalar","Object","values","find","v","getVitalDetailTablePoorStatusFunction","vitalThreshold","getAggregateAlias","getVitalDetailTableMehStatusFunction","vitalMap","vitalDescription","vitalAbbreviations","getMaxOfSeries","series","max","Infinity","data","point","Math","value","getBucketWidth","length","bin","computeBuckets","width","map","item","bucket","formatHistogramData","precision","type","additionalFieldsFn","formatter","decimalPlaces","getDuration","factor","round","Number","EPSILON","toLocaleString","Error","count","name","vitalsRouteWithQuery","transaction","generateVitalsRoute","findNearestBucketIndex","chartData","xAxis","floor","getRefRect","i","data1","j","data2","point1","x","y","min","point2","asPixelRect","chartRef","dataRect","convertToPixel","xAxisIndex","yAxisIndex","isNaN","mapPoint","srcRect","destRect","xPercentage","yPercentage","Breadcrumb","crumbs","this","props","organization","transactionName","eventSlug","transactionComparison","realUserMonitoring","performanceTarget","getPerformanceLandingUrl","undefined","push","to","label","t","preserveGlobalSelection","rumTarget","slug","summaryTarget","transactionSummaryRouteWithQuery","getCrumbs","React","Component","EventDetailsContent","state","loading","reloading","error","errors","event","isSidebarVisible","toggleSidebar","setState","generateTagUrl","tag","newQuery","appendTagCondition","key","title","params","renderContent","trackAnalyticsEvent","eventKey","eventName","event_type","organization_id","parseInt","id","hasQuickTraceView","features","includes","eventJsonUrl","projectId","eventID","Fragment","data-test-id","gap","onClick","icon","href","external","bytes","size","fullWidth","orgId","slugs","projects","getViewChildTransactionTarget","childTransactionProps","getTransactionDetailsUrl","showExampleCommit","showTagSummary","generateUrl","notFound","resp","status","permissionDenied","message","objSlug","split","AsyncComponent","EventDetails","getEventSlug","trim","documentTitle","StyledPageContent","withOrganization","PageContent"],"mappings":"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","file":"PerformanceTransactionDetails.js","sourcesContent":["import {Location, Query} from 'history';\n\nimport {IconCheckmark, IconFire, IconWarning} from 'app/icons';\nimport {Series} from 'app/types/echarts';\nimport {getAggregateAlias, WebVital} from 'app/utils/discover/fields';\nimport {decodeScalar} from 'app/utils/queryString';\nimport theme from 'app/utils/theme';\n\nexport function generateVitalDetailRoute({orgSlug}: {orgSlug: string}): string {\n  return `/organizations/${orgSlug}/performance/vitaldetail/`;\n}\n\nexport const webVitalPoor = {\n  [WebVital.FP]: 3000,\n  [WebVital.FCP]: 3000,\n  [WebVital.LCP]: 4000,\n  [WebVital.FID]: 300,\n  [WebVital.CLS]: 0.25,\n};\n\nexport const webVitalMeh = {\n  [WebVital.FP]: 1000,\n  [WebVital.FCP]: 1000,\n  [WebVital.LCP]: 2500,\n  [WebVital.FID]: 100,\n  [WebVital.CLS]: 0.1,\n};\n\nexport enum VitalState {\n  POOR = 'Poor',\n  MEH = 'Meh',\n  GOOD = 'Good',\n}\n\nexport const vitalStateColors = {\n  [VitalState.POOR]: theme.red300,\n  [VitalState.MEH]: theme.yellow300,\n  [VitalState.GOOD]: theme.green300,\n};\n\nexport const vitalStateIcons = {\n  [VitalState.POOR]: IconFire,\n  [VitalState.MEH]: IconWarning,\n  [VitalState.GOOD]: IconCheckmark,\n};\n\nexport function vitalDetailRouteWithQuery({\n  orgSlug,\n  vitalName,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  vitalName: string;\n  query: Query;\n  projectID?: string | string[];\n}) {\n  const pathname = generateVitalDetailRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      vitalName,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport function vitalNameFromLocation(location: Location): WebVital {\n  const _vitalName = decodeScalar(location.query.vitalName);\n\n  const vitalName = Object.values(WebVital).find(v => v === _vitalName);\n\n  if (vitalName) {\n    return vitalName;\n  } else {\n    return WebVital.LCP;\n  }\n}\n\nexport function getVitalDetailTablePoorStatusFunction(vitalName: WebVital): string {\n  const vitalThreshold = webVitalPoor[vitalName];\n  const statusFunction = `compare_numeric_aggregate(${getAggregateAlias(\n    `p75(${vitalName})`\n  )},greater,${vitalThreshold})`;\n  return statusFunction;\n}\n\nexport function getVitalDetailTableMehStatusFunction(vitalName: WebVital): string {\n  const vitalThreshold = webVitalMeh[vitalName];\n  const statusFunction = `compare_numeric_aggregate(${getAggregateAlias(\n    `p75(${vitalName})`\n  )},greater,${vitalThreshold})`;\n  return statusFunction;\n}\n\nexport const vitalMap: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]: 'First Contentful Paint',\n  [WebVital.CLS]: 'Cumulative Layout Shift',\n  [WebVital.FID]: 'First Input Delay',\n  [WebVital.LCP]: 'Largest Contentful Paint',\n};\n\nexport const vitalChartTitleMap = vitalMap;\n\nexport const vitalDescription: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]:\n    'First Contentful Paint (FCP) measures the amount of time the first content takes to render in the viewport. Like FP, this could also show up in any form from the document object model (DOM), such as images, SVGs, or text blocks.',\n  [WebVital.CLS]:\n    'Cumulative Layout Shift (CLS) is the sum of individual layout shift scores for every unexpected element shift during the rendering process. Imagine navigating to an article and trying to click a link before the page finishes loading. Before your cursor even gets there, the link may have shifted down due to an image rendering. Rather than using duration for this Web Vital, the CLS score represents the degree of disruptive and visually unstable shifts.',\n  [WebVital.FID]:\n    'First Input Delay measures the response time when the user tries to interact with the viewport. Actions maybe include clicking a button, link or other custom Javascript controller. It is key in helping the user determine if a page is usable or not.',\n  [WebVital.LCP]:\n    'Largest Contentful Paint (LCP) measures the render time for the largest content to appear in the viewport. This may be in any form from the document object model (DOM), such as images, SVGs, or text blocks. It’s the largest pixel area in the viewport, thus most visually defining. LCP helps developers understand how long it takes to see the main content on the page.',\n};\n\nexport const vitalAbbreviations: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]: 'FCP',\n  [WebVital.CLS]: 'CLS',\n  [WebVital.FID]: 'FID',\n  [WebVital.LCP]: 'LCP',\n};\n\nexport function getMaxOfSeries(series: Series[]) {\n  let max = -Infinity;\n  for (const {data} of series) {\n    for (const point of data) {\n      max = Math.max(max, point.value);\n    }\n  }\n  return max;\n}\n","import {ColumnType} from 'app/utils/discover/fields';\nimport {getDuration} from 'app/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    precision?: number;\n    type?: ColumnType;\n    additionalFieldsFn?: any;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {ECharts} from 'echarts';\nimport {Query} from 'history';\n\nimport {getBucketWidth} from '../charts/utils';\n\nimport {HistogramData, Point, Rectangle} from './types';\n\nexport function generateVitalsRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/vitals/`;\n}\n\nexport function vitalsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  transaction: string;\n  query: Query;\n  projectID?: string | string[];\n}) {\n  const pathname = generateVitalsRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\n/**\n * Given a value on the x-axis, return the index of the nearest bucket or null\n * if it cannot be found.\n *\n * A bucket contains a range of values, and nearest is defined as the bucket the\n * value will fall in.\n */\nexport function findNearestBucketIndex(\n  chartData: HistogramData[],\n  xAxis: number\n): number | null {\n  const width = getBucketWidth(chartData);\n  // it's possible that the data is not available yet or the x axis is out of range\n  if (!chartData.length || xAxis >= chartData[chartData.length - 1].bin + width) {\n    return null;\n  } else if (xAxis < chartData[0].bin) {\n    return -1;\n  }\n\n  return Math.floor((xAxis - chartData[0].bin) / width);\n}\n\n/**\n * To compute pixel coordinates, we need at least 2 unique points on the chart.\n * The two points must have different x axis and y axis values for it to work.\n *\n * If all bars have the same y value, pick the most naive reference rect. This\n * may result in floating point errors, but should be okay for our purposes.\n */\nexport function getRefRect(chartData: HistogramData[]): Rectangle | null {\n  // not enough points to construct 2 reference points\n  if (chartData.length < 2) {\n    return null;\n  }\n\n  for (let i = 0; i < chartData.length; i++) {\n    const data1 = chartData[i];\n    for (let j = i + 1; j < chartData.length; j++) {\n      const data2 = chartData[j];\n\n      if (data1.bin !== data2.bin && data1.count !== data2.count) {\n        return {\n          point1: {x: i, y: Math.min(data1.count, data2.count)},\n          point2: {x: j, y: Math.max(data1.count, data2.count)},\n        };\n      }\n    }\n  }\n\n  // all data points have the same count, just pick any 2 histogram bins\n  // and use 0 and 1 as the count as we can rely on them being on the graph\n  return {\n    point1: {x: 0, y: 0},\n    point2: {x: 1, y: 1},\n  };\n}\n\n/**\n * Given an ECharts instance and a rectangle defined in terms of the x and y axis,\n * compute the corresponding pixel coordinates. If it cannot be done, return null.\n */\nexport function asPixelRect(chartRef: ECharts, dataRect: Rectangle): Rectangle | null {\n  const point1 = chartRef.convertToPixel({xAxisIndex: 0, yAxisIndex: 0}, [\n    dataRect.point1.x,\n    dataRect.point1.y,\n  ]);\n\n  if (isNaN(point1?.[0]) || isNaN(point1?.[1])) {\n    return null;\n  }\n\n  const point2 = chartRef.convertToPixel({xAxisIndex: 0, yAxisIndex: 0}, [\n    dataRect.point2.x,\n    dataRect.point2.y,\n  ]);\n\n  if (isNaN(point2?.[0]) || isNaN(point2?.[1])) {\n    return null;\n  }\n\n  return {\n    point1: {x: point1[0], y: point1[1]},\n    point2: {x: point2[0], y: point2[1]},\n  };\n}\n\n/**\n * Given a point on a source rectangle, map it to the corresponding point on the\n * destination rectangle. Assumes that the two rectangles are related by a simple\n * transformation containing only translations and scaling.\n */\nexport function mapPoint(\n  point: Point,\n  srcRect: Rectangle,\n  destRect: Rectangle\n): Point | null {\n  if (\n    srcRect.point1.x === srcRect.point2.x ||\n    srcRect.point1.y === srcRect.point2.y ||\n    destRect.point1.x === destRect.point2.x ||\n    destRect.point1.y === destRect.point2.y\n  ) {\n    return null;\n  }\n\n  const xPercentage =\n    (point.x - srcRect.point1.x) / (srcRect.point2.x - srcRect.point1.x);\n  const yPercentage =\n    (point.y - srcRect.point1.y) / (srcRect.point2.y - srcRect.point1.y);\n\n  return {\n    x: destRect.point1.x + (destRect.point2.x - destRect.point1.x) * xPercentage,\n    y: destRect.point1.y + (destRect.point2.y - destRect.point1.y) * yPercentage,\n  };\n}\n","import React from 'react';\nimport {Location, LocationDescriptor} from 'history';\n\nimport Breadcrumbs, {Crumb} from 'app/components/breadcrumbs';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {decodeScalar} from 'app/utils/queryString';\n\nimport {transactionSummaryRouteWithQuery} from './transactionSummary/utils';\nimport {vitalsRouteWithQuery} from './transactionVitals/utils';\nimport {vitalDetailRouteWithQuery} from './vitalDetail/utils';\nimport {getPerformanceLandingUrl} from './utils';\n\ntype Props = {\n  organization: Organization;\n  location: Location;\n  transactionName?: string;\n  vitalName?: string;\n  eventSlug?: string;\n  transactionComparison?: boolean;\n  realUserMonitoring?: boolean;\n};\n\nclass Breadcrumb extends React.Component<Props> {\n  getCrumbs() {\n    const crumbs: Crumb[] = [];\n    const {\n      organization,\n      location,\n      transactionName,\n      vitalName,\n      eventSlug,\n      transactionComparison,\n      realUserMonitoring,\n    } = this.props;\n\n    const performanceTarget: LocationDescriptor = {\n      pathname: getPerformanceLandingUrl(organization),\n      query: {\n        ...location.query,\n        // clear out the transaction name\n        transaction: undefined,\n      },\n    };\n\n    crumbs.push({\n      to: performanceTarget,\n      label: t('Performance'),\n      preserveGlobalSelection: true,\n    });\n\n    if (vitalName) {\n      const rumTarget = vitalDetailRouteWithQuery({\n        orgSlug: organization.slug,\n        vitalName: 'fcp',\n        projectID: decodeScalar(location.query.project),\n        query: location.query,\n      });\n      crumbs.push({\n        to: rumTarget,\n        label: t('Vital Detail'),\n        preserveGlobalSelection: true,\n      });\n    } else if (transactionName) {\n      if (realUserMonitoring) {\n        const rumTarget = vitalsRouteWithQuery({\n          orgSlug: organization.slug,\n          transaction: transactionName,\n          projectID: decodeScalar(location.query.project),\n          query: location.query,\n        });\n\n        crumbs.push({\n          to: rumTarget,\n          label: t('Web Vitals'),\n          preserveGlobalSelection: true,\n        });\n      } else {\n        const summaryTarget = transactionSummaryRouteWithQuery({\n          orgSlug: organization.slug,\n          transaction: transactionName,\n          projectID: decodeScalar(location.query.project),\n          query: location.query,\n        });\n\n        crumbs.push({\n          to: summaryTarget,\n          label: t('Transaction Summary'),\n          preserveGlobalSelection: true,\n        });\n      }\n    }\n\n    if (transactionName && eventSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Event Details'),\n      });\n    } else if (transactionComparison) {\n      crumbs.push({\n        to: '',\n        label: t('Compare to Baseline'),\n      });\n    }\n\n    return crumbs;\n  }\n\n  render() {\n    return <Breadcrumbs crumbs={this.getCrumbs()} />;\n  }\n}\n\nexport default Breadcrumb;\n","import React from 'react';\nimport {Params} from 'react-router/lib/Router';\nimport {Location} from 'history';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport NotFound from 'app/components/errors/notFound';\nimport {BorderlessEventEntries} from 'app/components/events/eventEntries';\nimport EventMetadata from 'app/components/events/eventMetadata';\nimport EventVitals from 'app/components/events/eventVitals';\nimport * as SpanEntryContext from 'app/components/events/interfaces/spans/context';\nimport OpsBreakdown from 'app/components/events/opsBreakdown';\nimport RootSpanStatus from 'app/components/events/rootSpanStatus';\nimport FileSize from 'app/components/fileSize';\nimport * as Layout from 'app/components/layouts/thirds';\nimport LoadingError from 'app/components/loadingError';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport TagsTable from 'app/components/tagsTable';\nimport {IconOpen} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport {Event, EventTag} from 'app/types/event';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport Projects from 'app/utils/projects';\nimport {appendTagCondition, decodeScalar} from 'app/utils/queryString';\nimport Breadcrumb from 'app/views/performance/breadcrumb';\n\nimport {transactionSummaryRouteWithQuery} from '../transactionSummary/utils';\nimport {getTransactionDetailsUrl} from '../utils';\n\nimport EventMetas from './eventMetas';\n\ntype Props = {\n  organization: Organization;\n  location: Location;\n  params: Params;\n  eventSlug: string;\n};\n\ntype State = {\n  event: Event | undefined;\n  isSidebarVisible: boolean;\n} & AsyncComponent['state'];\n\nclass EventDetailsContent extends AsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: [],\n    event: undefined,\n\n    // local state\n    isSidebarVisible: true,\n  };\n\n  toggleSidebar = () => {\n    this.setState({isSidebarVisible: !this.state.isSidebarVisible});\n  };\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, params} = this.props;\n    const {eventSlug} = params;\n\n    const url = `/organizations/${organization.slug}/events/${eventSlug}/`;\n\n    return [['event', url]];\n  }\n\n  get projectId() {\n    return this.props.eventSlug.split(':')[0];\n  }\n\n  generateTagUrl = (tag: EventTag) => {\n    const {location, organization} = this.props;\n    const {event} = this.state;\n    if (!event) {\n      return '';\n    }\n    const query = decodeScalar(location.query.query, '');\n    const newQuery = {\n      ...location.query,\n      query: appendTagCondition(query, tag.key, tag.value),\n    };\n    return transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: event.title,\n      projectID: decodeScalar(location.query.project),\n      query: newQuery,\n    });\n  };\n\n  renderBody() {\n    const {event} = this.state;\n\n    if (!event) {\n      return <NotFound />;\n    }\n\n    return this.renderContent(event);\n  }\n\n  renderContent(event: Event) {\n    const {organization, location, eventSlug} = this.props;\n\n    // metrics\n    trackAnalyticsEvent({\n      eventKey: 'performance.event_details',\n      eventName: 'Performance: Opened Event Details',\n      event_type: event.type,\n      organization_id: parseInt(organization.id, 10),\n    });\n\n    const {isSidebarVisible} = this.state;\n    const transactionName = event.title;\n    const query = decodeScalar(location.query.query, '');\n\n    const hasQuickTraceView =\n      organization.features.includes('trace-view-quick') &&\n      organization.features.includes('trace-view-summary');\n\n    const eventJsonUrl = `/api/0/projects/${organization.slug}/${this.projectId}/events/${event.eventID}/json/`;\n\n    return (\n      <React.Fragment>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumb\n              organization={organization}\n              location={location}\n              transactionName={transactionName}\n              eventSlug={eventSlug}\n            />\n            <Layout.Title data-test-id=\"event-header\">{event.title}</Layout.Title>\n          </Layout.HeaderContent>\n          <Layout.HeaderActions>\n            <ButtonBar gap={1}>\n              <Button onClick={this.toggleSidebar}>\n                {isSidebarVisible ? 'Hide Details' : 'Show Details'}\n              </Button>\n              {hasQuickTraceView && (\n                <Button icon={<IconOpen />} href={eventJsonUrl} external>\n                  {t('JSON')} (<FileSize bytes={event.size} />)\n                </Button>\n              )}\n            </ButtonBar>\n          </Layout.HeaderActions>\n        </Layout.Header>\n        <Layout.Body>\n          {hasQuickTraceView && (\n            <Layout.Main fullWidth>\n              <EventMetas\n                event={event}\n                organization={organization}\n                projectId={this.projectId}\n                location={location}\n              />\n            </Layout.Main>\n          )}\n          <Layout.Main fullWidth={!isSidebarVisible}>\n            <Projects orgId={organization.slug} slugs={[this.projectId]}>\n              {({projects}) => (\n                <SpanEntryContext.Provider\n                  value={{\n                    getViewChildTransactionTarget: childTransactionProps => {\n                      return getTransactionDetailsUrl(\n                        organization,\n                        childTransactionProps.eventSlug,\n                        childTransactionProps.transaction,\n                        location.query\n                      );\n                    },\n                  }}\n                >\n                  <BorderlessEventEntries\n                    organization={organization}\n                    event={event}\n                    project={projects[0] as Project}\n                    showExampleCommit={false}\n                    showTagSummary={false}\n                    location={location}\n                  />\n                </SpanEntryContext.Provider>\n              )}\n            </Projects>\n          </Layout.Main>\n          {isSidebarVisible && (\n            <Layout.Side>\n              {!hasQuickTraceView && (\n                <React.Fragment>\n                  <EventMetadata\n                    event={event}\n                    organization={organization}\n                    projectId={this.projectId}\n                  />\n                  <RootSpanStatus event={event} />\n                </React.Fragment>\n              )}\n              <OpsBreakdown event={event} />\n              <EventVitals event={event} />\n              <TagsTable event={event} query={query} generateUrl={this.generateTagUrl} />\n            </Layout.Side>\n          )}\n        </Layout.Body>\n      </React.Fragment>\n    );\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n    const permissionDenied = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 403\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n    if (permissionDenied) {\n      return (\n        <LoadingError message={t('You do not have permission to view that event.')} />\n      );\n    }\n\n    return super.renderError(error, true, true);\n  }\n\n  renderComponent() {\n    const {organization} = this.props;\n\n    return (\n      <SentryDocumentTitle\n        title={t('Performance - Event Details')}\n        objSlug={organization.slug}\n      >\n        {super.renderComponent()}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default EventDetailsContent;\n","import React from 'react';\nimport {Params} from 'react-router/lib/Router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport EventDetailsContent from './content';\n\ntype Props = {\n  organization: Organization;\n  location: Location;\n  params: Params;\n};\n\nclass EventDetails extends React.Component<Props> {\n  getEventSlug = (): string => {\n    const {eventSlug} = this.props.params;\n    return typeof eventSlug === 'string' ? eventSlug.trim() : '';\n  };\n\n  render() {\n    const {organization, location, params} = this.props;\n    const documentTitle = t('Performance Details');\n\n    return (\n      <SentryDocumentTitle title={documentTitle} objSlug={organization.slug}>\n        <StyledPageContent>\n          <LightWeightNoProjectMessage organization={organization}>\n            <EventDetailsContent\n              organization={organization}\n              location={location}\n              params={params}\n              eventSlug={this.getEventSlug()}\n            />\n          </LightWeightNoProjectMessage>\n        </StyledPageContent>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(EventDetails);\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n"],"sourceRoot":""}