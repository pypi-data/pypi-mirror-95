# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = [
    'SparkPoolAutoPauseArgs',
    'SparkPoolAutoScaleArgs',
    'SparkPoolLibraryRequirementArgs',
    'SqlPoolRestoreArgs',
    'WorkspaceAadAdminArgs',
    'WorkspaceIdentityArgs',
]

@pulumi.input_type
class SparkPoolAutoPauseArgs:
    def __init__(__self__, *,
                 delay_in_minutes: pulumi.Input[int]):
        """
        :param pulumi.Input[int] delay_in_minutes: Number of minutes of idle time before the Spark Pool is automatically paused. Must be between `5` and `10080`.
        """
        pulumi.set(__self__, "delay_in_minutes", delay_in_minutes)

    @property
    @pulumi.getter(name="delayInMinutes")
    def delay_in_minutes(self) -> pulumi.Input[int]:
        """
        Number of minutes of idle time before the Spark Pool is automatically paused. Must be between `5` and `10080`.
        """
        return pulumi.get(self, "delay_in_minutes")

    @delay_in_minutes.setter
    def delay_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "delay_in_minutes", value)


@pulumi.input_type
class SparkPoolAutoScaleArgs:
    def __init__(__self__, *,
                 max_node_count: pulumi.Input[int],
                 min_node_count: pulumi.Input[int]):
        """
        :param pulumi.Input[int] max_node_count: The maximum number of nodes the Spark Pool can support. Must be between `3` and `200`.
        :param pulumi.Input[int] min_node_count: The minimum number of nodes the Spark Pool can support. Must be between `3` and `200`.
        """
        pulumi.set(__self__, "max_node_count", max_node_count)
        pulumi.set(__self__, "min_node_count", min_node_count)

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> pulumi.Input[int]:
        """
        The maximum number of nodes the Spark Pool can support. Must be between `3` and `200`.
        """
        return pulumi.get(self, "max_node_count")

    @max_node_count.setter
    def max_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_node_count", value)

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> pulumi.Input[int]:
        """
        The minimum number of nodes the Spark Pool can support. Must be between `3` and `200`.
        """
        return pulumi.get(self, "min_node_count")

    @min_node_count.setter
    def min_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_node_count", value)


@pulumi.input_type
class SparkPoolLibraryRequirementArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 filename: pulumi.Input[str]):
        """
        :param pulumi.Input[str] content: The content of library requirements.
        :param pulumi.Input[str] filename: The name of the library requirements file.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The content of library requirements.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Input[str]:
        """
        The name of the library requirements file.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[str]):
        pulumi.set(self, "filename", value)


@pulumi.input_type
class SqlPoolRestoreArgs:
    def __init__(__self__, *,
                 point_in_time: pulumi.Input[str],
                 source_database_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] point_in_time: Specifies the Snapshot time to restore. Changing this forces a new Synapse Sql Pool to be created.
        :param pulumi.Input[str] source_database_id: The ID of the Synapse Sql Pool or Sql Database which is to restore. Changing this forces a new Synapse Sql Pool to be created.
        """
        pulumi.set(__self__, "point_in_time", point_in_time)
        pulumi.set(__self__, "source_database_id", source_database_id)

    @property
    @pulumi.getter(name="pointInTime")
    def point_in_time(self) -> pulumi.Input[str]:
        """
        Specifies the Snapshot time to restore. Changing this forces a new Synapse Sql Pool to be created.
        """
        return pulumi.get(self, "point_in_time")

    @point_in_time.setter
    def point_in_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "point_in_time", value)

    @property
    @pulumi.getter(name="sourceDatabaseId")
    def source_database_id(self) -> pulumi.Input[str]:
        """
        The ID of the Synapse Sql Pool or Sql Database which is to restore. Changing this forces a new Synapse Sql Pool to be created.
        """
        return pulumi.get(self, "source_database_id")

    @source_database_id.setter
    def source_database_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_database_id", value)


@pulumi.input_type
class WorkspaceAadAdminArgs:
    def __init__(__self__, *,
                 login: pulumi.Input[str],
                 object_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] login: The login name of the Azure AD Administrator of this Synapse Workspace.
        :param pulumi.Input[str] object_id: The object id of the Azure AD Administrator of this Synapse Workspace.
        :param pulumi.Input[str] tenant_id: The tenant id of the Azure AD Administrator of this Synapse Workspace.
        """
        pulumi.set(__self__, "login", login)
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def login(self) -> pulumi.Input[str]:
        """
        The login name of the Azure AD Administrator of this Synapse Workspace.
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: pulumi.Input[str]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Input[str]:
        """
        The object id of the Azure AD Administrator of this Synapse Workspace.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        The tenant id of the Azure AD Administrator of this Synapse Workspace.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class WorkspaceIdentityArgs:
    def __init__(__self__, *,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] principal_id: The Principal ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.
        :param pulumi.Input[str] tenant_id: The tenant id of the Azure AD Administrator of this Synapse Workspace.
        :param pulumi.Input[str] type: The Identity Type for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.
        """
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Principal ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The tenant id of the Azure AD Administrator of this Synapse Workspace.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The Identity Type for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


