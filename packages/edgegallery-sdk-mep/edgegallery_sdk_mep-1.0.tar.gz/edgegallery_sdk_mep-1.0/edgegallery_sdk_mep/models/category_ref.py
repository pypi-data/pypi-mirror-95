# coding: utf-8

"""
    EdgeGallery MEC Service Management API

    The ETSI MEC ISG MEC011 MEC Service Management API described using OpenAPI  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CategoryRef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'CategoryRefHref',
        'id': 'CategoryRefId',
        'name': 'CategoryRefName',
        'version': 'CategoryRefVersion'
    }

    attribute_map = {
        'href': 'href',
        'id': 'id',
        'name': 'name',
        'version': 'version'
    }

    def __init__(self, href=None, id=None, name=None, version=None):  # noqa: E501
        """CategoryRef - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._id = None
        self._name = None
        self._version = None
        self.discriminator = None
        self.href = href
        self.id = id
        self.name = name
        self.version = version

    @property
    def href(self):
        """Gets the href of this CategoryRef.  # noqa: E501


        :return: The href of this CategoryRef.  # noqa: E501
        :rtype: CategoryRefHref
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this CategoryRef.


        :param href: The href of this CategoryRef.  # noqa: E501
        :type: CategoryRefHref
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def id(self):
        """Gets the id of this CategoryRef.  # noqa: E501


        :return: The id of this CategoryRef.  # noqa: E501
        :rtype: CategoryRefId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CategoryRef.


        :param id: The id of this CategoryRef.  # noqa: E501
        :type: CategoryRefId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this CategoryRef.  # noqa: E501


        :return: The name of this CategoryRef.  # noqa: E501
        :rtype: CategoryRefName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CategoryRef.


        :param name: The name of this CategoryRef.  # noqa: E501
        :type: CategoryRefName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this CategoryRef.  # noqa: E501


        :return: The version of this CategoryRef.  # noqa: E501
        :rtype: CategoryRefVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CategoryRef.


        :param version: The version of this CategoryRef.  # noqa: E501
        :type: CategoryRefVersion
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategoryRef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
