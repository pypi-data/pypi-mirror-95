# coding: utf-8

"""
    EdgeGallery MEC Service Management API

    The ETSI MEC ISG MEC011 MEC Service Management API described using OpenAPI  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceAvailabilityNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_type': 'SerAvailabilityNotificationSubscriptionSubscriptionType',
        'service_references': 'list[ServiceAvailabilityNotificationServiceReferences]',
        'links': 'Subscription'
    }

    attribute_map = {
        'notification_type': 'notificationType',
        'service_references': 'serviceReferences',
        'links': '_links'
    }

    def __init__(self, notification_type=None, service_references=None, links=None):  # noqa: E501
        """ServiceAvailabilityNotification - a model defined in Swagger"""  # noqa: E501
        self._notification_type = None
        self._service_references = None
        self._links = None
        self.discriminator = None
        self.notification_type = notification_type
        self.service_references = service_references
        self.links = links

    @property
    def notification_type(self):
        """Gets the notification_type of this ServiceAvailabilityNotification.  # noqa: E501


        :return: The notification_type of this ServiceAvailabilityNotification.  # noqa: E501
        :rtype: SerAvailabilityNotificationSubscriptionSubscriptionType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this ServiceAvailabilityNotification.


        :param notification_type: The notification_type of this ServiceAvailabilityNotification.  # noqa: E501
        :type: SerAvailabilityNotificationSubscriptionSubscriptionType
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def service_references(self):
        """Gets the service_references of this ServiceAvailabilityNotification.  # noqa: E501


        :return: The service_references of this ServiceAvailabilityNotification.  # noqa: E501
        :rtype: list[ServiceAvailabilityNotificationServiceReferences]
        """
        return self._service_references

    @service_references.setter
    def service_references(self, service_references):
        """Sets the service_references of this ServiceAvailabilityNotification.


        :param service_references: The service_references of this ServiceAvailabilityNotification.  # noqa: E501
        :type: list[ServiceAvailabilityNotificationServiceReferences]
        """
        if service_references is None:
            raise ValueError("Invalid value for `service_references`, must not be `None`")  # noqa: E501

        self._service_references = service_references

    @property
    def links(self):
        """Gets the links of this ServiceAvailabilityNotification.  # noqa: E501


        :return: The links of this ServiceAvailabilityNotification.  # noqa: E501
        :rtype: Subscription
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ServiceAvailabilityNotification.


        :param links: The links of this ServiceAvailabilityNotification.  # noqa: E501
        :type: Subscription
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceAvailabilityNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceAvailabilityNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
