# coding: utf-8

"""
    EdgeGallery MEC Service Management API

    The ETSI MEC ISG MEC011 MEC Service Management API described using OpenAPI  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SerAvailabilityNotificationSubscriptionFilteringCriteria(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ser_instance_ids': 'SerInstanceIds',
        'ser_names': 'SerNames',
        'ser_categories': 'CategoryRefs',
        'states': 'ServiceStates',
        'is_local': 'ServiceInfoIsLocal'
    }

    attribute_map = {
        'ser_instance_ids': 'serInstanceIds',
        'ser_names': 'serNames',
        'ser_categories': 'serCategories',
        'states': 'states',
        'is_local': 'isLocal'
    }

    def __init__(self, ser_instance_ids=None, ser_names=None, ser_categories=None, states=None, is_local=None):  # noqa: E501
        """SerAvailabilityNotificationSubscriptionFilteringCriteria - a model defined in Swagger"""  # noqa: E501
        self._ser_instance_ids = None
        self._ser_names = None
        self._ser_categories = None
        self._states = None
        self._is_local = None
        self.discriminator = None
        if ser_instance_ids is not None:
            self.ser_instance_ids = ser_instance_ids
        if ser_names is not None:
            self.ser_names = ser_names
        if ser_categories is not None:
            self.ser_categories = ser_categories
        if states is not None:
            self.states = states
        if is_local is not None:
            self.is_local = is_local

    @property
    def ser_instance_ids(self):
        """Gets the ser_instance_ids of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501


        :return: The ser_instance_ids of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501
        :rtype: SerInstanceIds
        """
        return self._ser_instance_ids

    @ser_instance_ids.setter
    def ser_instance_ids(self, ser_instance_ids):
        """Sets the ser_instance_ids of this SerAvailabilityNotificationSubscriptionFilteringCriteria.


        :param ser_instance_ids: The ser_instance_ids of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501
        :type: SerInstanceIds
        """

        self._ser_instance_ids = ser_instance_ids

    @property
    def ser_names(self):
        """Gets the ser_names of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501


        :return: The ser_names of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501
        :rtype: SerNames
        """
        return self._ser_names

    @ser_names.setter
    def ser_names(self, ser_names):
        """Sets the ser_names of this SerAvailabilityNotificationSubscriptionFilteringCriteria.


        :param ser_names: The ser_names of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501
        :type: SerNames
        """

        self._ser_names = ser_names

    @property
    def ser_categories(self):
        """Gets the ser_categories of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501


        :return: The ser_categories of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501
        :rtype: CategoryRefs
        """
        return self._ser_categories

    @ser_categories.setter
    def ser_categories(self, ser_categories):
        """Sets the ser_categories of this SerAvailabilityNotificationSubscriptionFilteringCriteria.


        :param ser_categories: The ser_categories of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501
        :type: CategoryRefs
        """

        self._ser_categories = ser_categories

    @property
    def states(self):
        """Gets the states of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501


        :return: The states of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501
        :rtype: ServiceStates
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this SerAvailabilityNotificationSubscriptionFilteringCriteria.


        :param states: The states of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501
        :type: ServiceStates
        """

        self._states = states

    @property
    def is_local(self):
        """Gets the is_local of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501


        :return: The is_local of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501
        :rtype: ServiceInfoIsLocal
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this SerAvailabilityNotificationSubscriptionFilteringCriteria.


        :param is_local: The is_local of this SerAvailabilityNotificationSubscriptionFilteringCriteria.  # noqa: E501
        :type: ServiceInfoIsLocal
        """

        self._is_local = is_local

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SerAvailabilityNotificationSubscriptionFilteringCriteria, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SerAvailabilityNotificationSubscriptionFilteringCriteria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
