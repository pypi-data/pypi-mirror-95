# coding: utf-8

"""
    EdgeGallery MEC Service Management API

    The ETSI MEC ISG MEC011 MEC Service Management API described using OpenAPI  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceAvailabilityNotificationServiceReferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link': 'LinkType',
        'ser_name': 'ServiceInfoSerName',
        'ser_instance_id': 'ServiceInfoSerInstanceId',
        'state': 'ServiceState',
        'change_type': 'ServiceAvailabilityNotificationChangeType'
    }

    attribute_map = {
        'link': 'link',
        'ser_name': 'serName',
        'ser_instance_id': 'serInstanceId',
        'state': 'state',
        'change_type': 'changeType'
    }

    def __init__(self, link=None, ser_name=None, ser_instance_id=None, state=None, change_type=None):  # noqa: E501
        """ServiceAvailabilityNotificationServiceReferences - a model defined in Swagger"""  # noqa: E501
        self._link = None
        self._ser_name = None
        self._ser_instance_id = None
        self._state = None
        self._change_type = None
        self.discriminator = None
        if link is not None:
            self.link = link
        self.ser_name = ser_name
        self.ser_instance_id = ser_instance_id
        self.state = state
        self.change_type = change_type

    @property
    def link(self):
        """Gets the link of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501


        :return: The link of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :rtype: LinkType
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ServiceAvailabilityNotificationServiceReferences.


        :param link: The link of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :type: LinkType
        """

        self._link = link

    @property
    def ser_name(self):
        """Gets the ser_name of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501


        :return: The ser_name of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :rtype: ServiceInfoSerName
        """
        return self._ser_name

    @ser_name.setter
    def ser_name(self, ser_name):
        """Sets the ser_name of this ServiceAvailabilityNotificationServiceReferences.


        :param ser_name: The ser_name of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :type: ServiceInfoSerName
        """
        if ser_name is None:
            raise ValueError("Invalid value for `ser_name`, must not be `None`")  # noqa: E501

        self._ser_name = ser_name

    @property
    def ser_instance_id(self):
        """Gets the ser_instance_id of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501


        :return: The ser_instance_id of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :rtype: ServiceInfoSerInstanceId
        """
        return self._ser_instance_id

    @ser_instance_id.setter
    def ser_instance_id(self, ser_instance_id):
        """Sets the ser_instance_id of this ServiceAvailabilityNotificationServiceReferences.


        :param ser_instance_id: The ser_instance_id of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :type: ServiceInfoSerInstanceId
        """
        if ser_instance_id is None:
            raise ValueError("Invalid value for `ser_instance_id`, must not be `None`")  # noqa: E501

        self._ser_instance_id = ser_instance_id

    @property
    def state(self):
        """Gets the state of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501


        :return: The state of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :rtype: ServiceState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ServiceAvailabilityNotificationServiceReferences.


        :param state: The state of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :type: ServiceState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def change_type(self):
        """Gets the change_type of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501


        :return: The change_type of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :rtype: ServiceAvailabilityNotificationChangeType
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this ServiceAvailabilityNotificationServiceReferences.


        :param change_type: The change_type of this ServiceAvailabilityNotificationServiceReferences.  # noqa: E501
        :type: ServiceAvailabilityNotificationChangeType
        """
        if change_type is None:
            raise ValueError("Invalid value for `change_type`, must not be `None`")  # noqa: E501

        self._change_type = change_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceAvailabilityNotificationServiceReferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceAvailabilityNotificationServiceReferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
