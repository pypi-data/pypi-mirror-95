# coding: utf-8

"""
    EdgeGallery MEC Service Management API

    The ETSI MEC ISG MEC011 MEC Service Management API described using OpenAPI  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransportInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'TransportInfoId',
        'name': 'TransportInfoName',
        'description': 'TransportInfoDescription',
        'type': 'TransportType',
        'protocol': 'TransportInfoProtocol',
        'version': 'TransportInfoVersion',
        'endpoint': 'OneOfTransportInfoEndpoint',
        'security': 'SecurityInfo',
        'impl_specific_info': 'TransportInfoImplSpecificInfo'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'protocol': 'protocol',
        'version': 'version',
        'endpoint': 'endpoint',
        'security': 'security',
        'impl_specific_info': 'implSpecificInfo'
    }

    def __init__(self, id=None, name=None, description=None, type=None, protocol=None, version=None, endpoint=None, security=None, impl_specific_info=None):  # noqa: E501
        """TransportInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._type = None
        self._protocol = None
        self._version = None
        self._endpoint = None
        self._security = None
        self._impl_specific_info = None
        self.discriminator = None
        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        self.type = type
        self.protocol = protocol
        self.version = version
        self.endpoint = endpoint
        self.security = security
        if impl_specific_info is not None:
            self.impl_specific_info = impl_specific_info

    @property
    def id(self):
        """Gets the id of this TransportInfo.  # noqa: E501


        :return: The id of this TransportInfo.  # noqa: E501
        :rtype: TransportInfoId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransportInfo.


        :param id: The id of this TransportInfo.  # noqa: E501
        :type: TransportInfoId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this TransportInfo.  # noqa: E501


        :return: The name of this TransportInfo.  # noqa: E501
        :rtype: TransportInfoName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransportInfo.


        :param name: The name of this TransportInfo.  # noqa: E501
        :type: TransportInfoName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TransportInfo.  # noqa: E501


        :return: The description of this TransportInfo.  # noqa: E501
        :rtype: TransportInfoDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransportInfo.


        :param description: The description of this TransportInfo.  # noqa: E501
        :type: TransportInfoDescription
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this TransportInfo.  # noqa: E501


        :return: The type of this TransportInfo.  # noqa: E501
        :rtype: TransportType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransportInfo.


        :param type: The type of this TransportInfo.  # noqa: E501
        :type: TransportType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def protocol(self):
        """Gets the protocol of this TransportInfo.  # noqa: E501


        :return: The protocol of this TransportInfo.  # noqa: E501
        :rtype: TransportInfoProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this TransportInfo.


        :param protocol: The protocol of this TransportInfo.  # noqa: E501
        :type: TransportInfoProtocol
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def version(self):
        """Gets the version of this TransportInfo.  # noqa: E501


        :return: The version of this TransportInfo.  # noqa: E501
        :rtype: TransportInfoVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TransportInfo.


        :param version: The version of this TransportInfo.  # noqa: E501
        :type: TransportInfoVersion
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def endpoint(self):
        """Gets the endpoint of this TransportInfo.  # noqa: E501

        This type represents information about a transport endpoint  # noqa: E501

        :return: The endpoint of this TransportInfo.  # noqa: E501
        :rtype: OneOfTransportInfoEndpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this TransportInfo.

        This type represents information about a transport endpoint  # noqa: E501

        :param endpoint: The endpoint of this TransportInfo.  # noqa: E501
        :type: OneOfTransportInfoEndpoint
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")  # noqa: E501

        self._endpoint = endpoint

    @property
    def security(self):
        """Gets the security of this TransportInfo.  # noqa: E501


        :return: The security of this TransportInfo.  # noqa: E501
        :rtype: SecurityInfo
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this TransportInfo.


        :param security: The security of this TransportInfo.  # noqa: E501
        :type: SecurityInfo
        """
        if security is None:
            raise ValueError("Invalid value for `security`, must not be `None`")  # noqa: E501

        self._security = security

    @property
    def impl_specific_info(self):
        """Gets the impl_specific_info of this TransportInfo.  # noqa: E501


        :return: The impl_specific_info of this TransportInfo.  # noqa: E501
        :rtype: TransportInfoImplSpecificInfo
        """
        return self._impl_specific_info

    @impl_specific_info.setter
    def impl_specific_info(self, impl_specific_info):
        """Sets the impl_specific_info of this TransportInfo.


        :param impl_specific_info: The impl_specific_info of this TransportInfo.  # noqa: E501
        :type: TransportInfoImplSpecificInfo
        """

        self._impl_specific_info = impl_specific_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
