# coding: utf-8

"""
    EdgeGallery MEC Service Management API

    The ETSI MEC ISG MEC011 MEC Service Management API described using OpenAPI  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceInfoPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ser_instance_id': 'ServiceInfoSerInstanceId',
        'ser_name': 'ServiceInfoSerName',
        'ser_category': 'CategoryRef',
        'version': 'ServiceInfoVersion',
        'state': 'ServiceState',
        'transport_id': 'ServiceInfoTransportId',
        'transport_info': 'TransportInfo',
        'serializer': 'SerializerType',
        'scope_of_locality': 'LocalityType',
        'consumed_local_only': 'ServiceInfoConsumedLocalOnly',
        'is_local': 'ServiceInfoIsLocal'
    }

    attribute_map = {
        'ser_instance_id': 'serInstanceId',
        'ser_name': 'serName',
        'ser_category': 'serCategory',
        'version': 'version',
        'state': 'state',
        'transport_id': 'transportId',
        'transport_info': 'transportInfo',
        'serializer': 'serializer',
        'scope_of_locality': 'scopeOfLocality',
        'consumed_local_only': 'consumedLocalOnly',
        'is_local': 'isLocal'
    }

    def __init__(self, ser_instance_id=None, ser_name=None, ser_category=None, version=None, state=None, transport_id=None, transport_info=None, serializer=None, scope_of_locality=None, consumed_local_only=None, is_local=None):  # noqa: E501
        """ServiceInfoPost - a model defined in Swagger"""  # noqa: E501
        self._ser_instance_id = None
        self._ser_name = None
        self._ser_category = None
        self._version = None
        self._state = None
        self._transport_id = None
        self._transport_info = None
        self._serializer = None
        self._scope_of_locality = None
        self._consumed_local_only = None
        self._is_local = None
        self.discriminator = None
        if ser_instance_id is not None:
            self.ser_instance_id = ser_instance_id
        self.ser_name = ser_name
        if ser_category is not None:
            self.ser_category = ser_category
        self.version = version
        self.state = state
        if transport_id is not None:
            self.transport_id = transport_id
        if transport_info is not None:
            self.transport_info = transport_info
        self.serializer = serializer
        if scope_of_locality is not None:
            self.scope_of_locality = scope_of_locality
        if consumed_local_only is not None:
            self.consumed_local_only = consumed_local_only
        if is_local is not None:
            self.is_local = is_local

    @property
    def ser_instance_id(self):
        """Gets the ser_instance_id of this ServiceInfoPost.  # noqa: E501


        :return: The ser_instance_id of this ServiceInfoPost.  # noqa: E501
        :rtype: ServiceInfoSerInstanceId
        """
        return self._ser_instance_id

    @ser_instance_id.setter
    def ser_instance_id(self, ser_instance_id):
        """Sets the ser_instance_id of this ServiceInfoPost.


        :param ser_instance_id: The ser_instance_id of this ServiceInfoPost.  # noqa: E501
        :type: ServiceInfoSerInstanceId
        """

        self._ser_instance_id = ser_instance_id

    @property
    def ser_name(self):
        """Gets the ser_name of this ServiceInfoPost.  # noqa: E501


        :return: The ser_name of this ServiceInfoPost.  # noqa: E501
        :rtype: ServiceInfoSerName
        """
        return self._ser_name

    @ser_name.setter
    def ser_name(self, ser_name):
        """Sets the ser_name of this ServiceInfoPost.


        :param ser_name: The ser_name of this ServiceInfoPost.  # noqa: E501
        :type: ServiceInfoSerName
        """
        if ser_name is None:
            raise ValueError("Invalid value for `ser_name`, must not be `None`")  # noqa: E501

        self._ser_name = ser_name

    @property
    def ser_category(self):
        """Gets the ser_category of this ServiceInfoPost.  # noqa: E501


        :return: The ser_category of this ServiceInfoPost.  # noqa: E501
        :rtype: CategoryRef
        """
        return self._ser_category

    @ser_category.setter
    def ser_category(self, ser_category):
        """Sets the ser_category of this ServiceInfoPost.


        :param ser_category: The ser_category of this ServiceInfoPost.  # noqa: E501
        :type: CategoryRef
        """

        self._ser_category = ser_category

    @property
    def version(self):
        """Gets the version of this ServiceInfoPost.  # noqa: E501


        :return: The version of this ServiceInfoPost.  # noqa: E501
        :rtype: ServiceInfoVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceInfoPost.


        :param version: The version of this ServiceInfoPost.  # noqa: E501
        :type: ServiceInfoVersion
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def state(self):
        """Gets the state of this ServiceInfoPost.  # noqa: E501


        :return: The state of this ServiceInfoPost.  # noqa: E501
        :rtype: ServiceState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ServiceInfoPost.


        :param state: The state of this ServiceInfoPost.  # noqa: E501
        :type: ServiceState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def transport_id(self):
        """Gets the transport_id of this ServiceInfoPost.  # noqa: E501


        :return: The transport_id of this ServiceInfoPost.  # noqa: E501
        :rtype: ServiceInfoTransportId
        """
        return self._transport_id

    @transport_id.setter
    def transport_id(self, transport_id):
        """Sets the transport_id of this ServiceInfoPost.


        :param transport_id: The transport_id of this ServiceInfoPost.  # noqa: E501
        :type: ServiceInfoTransportId
        """

        self._transport_id = transport_id

    @property
    def transport_info(self):
        """Gets the transport_info of this ServiceInfoPost.  # noqa: E501


        :return: The transport_info of this ServiceInfoPost.  # noqa: E501
        :rtype: TransportInfo
        """
        return self._transport_info

    @transport_info.setter
    def transport_info(self, transport_info):
        """Sets the transport_info of this ServiceInfoPost.


        :param transport_info: The transport_info of this ServiceInfoPost.  # noqa: E501
        :type: TransportInfo
        """

        self._transport_info = transport_info

    @property
    def serializer(self):
        """Gets the serializer of this ServiceInfoPost.  # noqa: E501


        :return: The serializer of this ServiceInfoPost.  # noqa: E501
        :rtype: SerializerType
        """
        return self._serializer

    @serializer.setter
    def serializer(self, serializer):
        """Sets the serializer of this ServiceInfoPost.


        :param serializer: The serializer of this ServiceInfoPost.  # noqa: E501
        :type: SerializerType
        """
        if serializer is None:
            raise ValueError("Invalid value for `serializer`, must not be `None`")  # noqa: E501

        self._serializer = serializer

    @property
    def scope_of_locality(self):
        """Gets the scope_of_locality of this ServiceInfoPost.  # noqa: E501


        :return: The scope_of_locality of this ServiceInfoPost.  # noqa: E501
        :rtype: LocalityType
        """
        return self._scope_of_locality

    @scope_of_locality.setter
    def scope_of_locality(self, scope_of_locality):
        """Sets the scope_of_locality of this ServiceInfoPost.


        :param scope_of_locality: The scope_of_locality of this ServiceInfoPost.  # noqa: E501
        :type: LocalityType
        """

        self._scope_of_locality = scope_of_locality

    @property
    def consumed_local_only(self):
        """Gets the consumed_local_only of this ServiceInfoPost.  # noqa: E501


        :return: The consumed_local_only of this ServiceInfoPost.  # noqa: E501
        :rtype: ServiceInfoConsumedLocalOnly
        """
        return self._consumed_local_only

    @consumed_local_only.setter
    def consumed_local_only(self, consumed_local_only):
        """Sets the consumed_local_only of this ServiceInfoPost.


        :param consumed_local_only: The consumed_local_only of this ServiceInfoPost.  # noqa: E501
        :type: ServiceInfoConsumedLocalOnly
        """

        self._consumed_local_only = consumed_local_only

    @property
    def is_local(self):
        """Gets the is_local of this ServiceInfoPost.  # noqa: E501


        :return: The is_local of this ServiceInfoPost.  # noqa: E501
        :rtype: ServiceInfoIsLocal
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this ServiceInfoPost.


        :param is_local: The is_local of this ServiceInfoPost.  # noqa: E501
        :type: ServiceInfoIsLocal
        """

        self._is_local = is_local

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceInfoPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceInfoPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
