# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _pygrapenlp
else:
    import _pygrapenlp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


STD = _pygrapenlp.STD
LRB_TREE = _pygrapenlp.LRB_TREE
LRB_TREE_3W = _pygrapenlp.LRB_TREE_3W
LEXMASK_X_LETTER_ARRAY_RTNO = _pygrapenlp.LEXMASK_X_LETTER_ARRAY_RTNO
LEXMASK_X_WEIGHTED_LETTER_ARRAY_RTNO = _pygrapenlp.LEXMASK_X_WEIGHTED_LETTER_ARRAY_RTNO
LEXMASK_X_EXTRACTION_RTNO = _pygrapenlp.LEXMASK_X_EXTRACTION_RTNO
LEXMASK_X_WEIGHTED_EXTRACTION_RTNO = _pygrapenlp.LEXMASK_X_WEIGHTED_EXTRACTION_RTNO
LEXMASK_X_BRACKETING_RTNO = _pygrapenlp.LEXMASK_X_BRACKETING_RTNO
LEXMASK_X_WEIGHTED_BRACKETING_RTNO = _pygrapenlp.LEXMASK_X_WEIGHTED_BRACKETING_RTNO
DEPTH_FIRST_RTNO_PARSER = _pygrapenlp.DEPTH_FIRST_RTNO_PARSER
BREADTH_FIRST_RTNO_PARSER = _pygrapenlp.BREADTH_FIRST_RTNO_PARSER
EARLEY_RTNO_PARSER = _pygrapenlp.EARLEY_RTNO_PARSER
TO_FPRTN_RTNO_PARSER = _pygrapenlp.TO_FPRTN_RTNO_PARSER
TO_FPRTN_ZPPS_RTNO_PARSER = _pygrapenlp.TO_FPRTN_ZPPS_RTNO_PARSER
TO_FPRTN_TOP_RTNO_PARSER = _pygrapenlp.TO_FPRTN_TOP_RTNO_PARSER
TO_FPRTN_AND_BREADTH_FIRST_EXPAND_RTNO_PARSER = _pygrapenlp.TO_FPRTN_AND_BREADTH_FIRST_EXPAND_RTNO_PARSER
TO_FPRTN_AND_BLACKBOARD_SET_EXPAND_RTNO_PARSER = _pygrapenlp.TO_FPRTN_AND_BLACKBOARD_SET_EXPAND_RTNO_PARSER
TO_FPRTN_AND_TOP_BLACKBOARD_EXTRACT_RTNO_PARSER = _pygrapenlp.TO_FPRTN_AND_TOP_BLACKBOARD_EXTRACT_RTNO_PARSER
class u_context_key_value_hasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register u_context_key_value_hasher in _pygrapenlp:
_pygrapenlp.u_context_key_value_hasher_swigregister(u_context_key_value_hasher)


def new_byte_array(nelements: 'size_t') -> "unsigned char *":
    return _pygrapenlp.new_byte_array(nelements)

def delete_byte_array(ary: 'unsigned char *') -> "void":
    return _pygrapenlp.delete_byte_array(ary)

def byte_array_getitem(ary: 'unsigned char *', index: 'size_t') -> "unsigned char":
    return _pygrapenlp.byte_array_getitem(ary, index)

def byte_array_setitem(ary: 'unsigned char *', index: 'size_t', value: 'unsigned char') -> "void":
    return _pygrapenlp.byte_array_setitem(ary, index, value)
class u_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, count_: 'grapenlp::array< unsigned short >::size_type'):
        _pygrapenlp.u_array_swiginit(self, _pygrapenlp.new_u_array(count_))
    __swig_destroy__ = _pygrapenlp.delete_u_array

    def size(self) -> "grapenlp::array< unsigned short >::size_type":
        return _pygrapenlp.u_array_size(self)

    def size_in_bytes(self) -> "grapenlp::array< unsigned short >::size_type":
        return _pygrapenlp.u_array_size_in_bytes(self)

    def empty(self) -> "bool":
        return _pygrapenlp.u_array_empty(self)

    def begin(self) -> "grapenlp::array< unsigned short >::iterator":
        return _pygrapenlp.u_array_begin(self)

    def const_begin(self) -> "grapenlp::array< unsigned short >::const_iterator":
        return _pygrapenlp.u_array_const_begin(self)

    def const_end(self) -> "grapenlp::array< unsigned short >::const_iterator":
        return _pygrapenlp.u_array_const_end(self)

    def get_bytes(self) -> "unsigned char const *":
        return _pygrapenlp.u_array_get_bytes(self)

    def set_bytes(self, bytes: 'unsigned char *') -> "void":
        return _pygrapenlp.u_array_set_bytes(self, bytes)

    def get_elem_at(self, i: 'grapenlp::array< unsigned short >::size_type') -> "unsigned short const &":
        return _pygrapenlp.u_array_get_elem_at(self, i)

# Register u_array in _pygrapenlp:
_pygrapenlp.u_array_swigregister(u_array)

class u_context(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, the_hasher_: 'u_context_key_value_hasher'):
        _pygrapenlp.u_context_swiginit(self, _pygrapenlp.new_u_context(the_hasher_))
    __swig_destroy__ = _pygrapenlp.delete_u_context

    def ua_set(self, key_begin: '::grapenlp::u_array::const_iterator', key_end: '::grapenlp::u_array::const_iterator', value_begin: '::grapenlp::u_array::const_iterator', value_end: '::grapenlp::u_array::const_iterator') -> "void":
        return _pygrapenlp.u_context_ua_set(self, key_begin, key_end, value_begin, value_end)

# Register u_context in _pygrapenlp:
_pygrapenlp.u_context_swigregister(u_context)

class u_trie_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self) -> "grapenlp::trie< unsigned short >::size_type":
        return _pygrapenlp.u_trie_string_size(self)

    def to_array(self, a: 'u_array') -> "grapenlp::array< unsigned short > &":
        return _pygrapenlp.u_trie_string_to_array(self, a)

    def back(self) -> "unsigned short":
        return _pygrapenlp.u_trie_string_back(self)

# Register u_trie_string in _pygrapenlp:
_pygrapenlp.u_trie_string_swigregister(u_trie_string)

class u_trie(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pygrapenlp.u_trie_swiginit(self, _pygrapenlp.new_u_trie())
    __swig_destroy__ = _pygrapenlp.delete_u_trie

# Register u_trie in _pygrapenlp:
_pygrapenlp.u_trie_swigregister(u_trie)

class u_out_bound(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = property(_pygrapenlp.u_out_bound_name_get, _pygrapenlp.u_out_bound_name_set)
    left = property(_pygrapenlp.u_out_bound_left_get, _pygrapenlp.u_out_bound_left_set)
    right = property(_pygrapenlp.u_out_bound_right_get, _pygrapenlp.u_out_bound_right_set)

    def __init__(self, *args):
        _pygrapenlp.u_out_bound_swiginit(self, _pygrapenlp.new_u_out_bound(*args))

    def __lt__(self, ob: 'u_out_bound') -> "bool":
        return _pygrapenlp.u_out_bound___lt__(self, ob)

    def __eq__(self, ob: 'u_out_bound') -> "bool":
        return _pygrapenlp.u_out_bound___eq__(self, ob)

# Register u_out_bound in _pygrapenlp:
_pygrapenlp.u_out_bound_swigregister(u_out_bound)

class u_out_bound_const_ref_triplet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pygrapenlp.u_out_bound_const_ref_triplet_swiginit(self, _pygrapenlp.new_u_out_bound_const_ref_triplet())

    def get(self, name: 'u_out_bound_name_string', left: 'bool', right: 'bool') -> "grapenlp::out_bound< unsigned short >::const_ref":
        return _pygrapenlp.u_out_bound_const_ref_triplet_get(self, name, left, right)
    __swig_destroy__ = _pygrapenlp.delete_u_out_bound_const_ref_triplet

# Register u_out_bound_const_ref_triplet in _pygrapenlp:
_pygrapenlp.u_out_bound_const_ref_triplet_swigregister(u_out_bound_const_ref_triplet)

class base_u_out_bound_name_string(u_trie_string):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    data = property(_pygrapenlp.base_u_out_bound_name_string_data_get, _pygrapenlp.base_u_out_bound_name_string_data_set)

# Register base_u_out_bound_name_string in _pygrapenlp:
_pygrapenlp.base_u_out_bound_name_string_swigregister(base_u_out_bound_name_string)

class base_u_out_bound_trie(u_trie):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pygrapenlp.base_u_out_bound_trie_swiginit(self, _pygrapenlp.new_base_u_out_bound_trie())
    __swig_destroy__ = _pygrapenlp.delete_base_u_out_bound_trie

# Register base_u_out_bound_trie in _pygrapenlp:
_pygrapenlp.base_u_out_bound_trie_swigregister(base_u_out_bound_trie)

class u_out_bound_name_string(base_u_out_bound_name_string):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pygrapenlp.u_out_bound_name_string_swiginit(self, _pygrapenlp.new_u_out_bound_name_string())
    __swig_destroy__ = _pygrapenlp.delete_u_out_bound_name_string

# Register u_out_bound_name_string in _pygrapenlp:
_pygrapenlp.u_out_bound_name_string_swigregister(u_out_bound_name_string)

class u_out_bound_trie(base_u_out_bound_trie):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pygrapenlp.u_out_bound_trie_swiginit(self, _pygrapenlp.new_u_out_bound_trie())
    __swig_destroy__ = _pygrapenlp.delete_u_out_bound_trie

# Register u_out_bound_trie in _pygrapenlp:
_pygrapenlp.u_out_bound_trie_swigregister(u_out_bound_trie)

class uau_simple_segment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = property(_pygrapenlp.uau_simple_segment_name_get, _pygrapenlp.uau_simple_segment_name_set)
    begin = property(_pygrapenlp.uau_simple_segment_begin_get, _pygrapenlp.uau_simple_segment_begin_set)
    end = property(_pygrapenlp.uau_simple_segment_end_get, _pygrapenlp.uau_simple_segment_end_set)

    def __init__(self):
        _pygrapenlp.uau_simple_segment_swiginit(self, _pygrapenlp.new_uau_simple_segment())
    __swig_destroy__ = _pygrapenlp.delete_uau_simple_segment

# Register uau_simple_segment in _pygrapenlp:
_pygrapenlp.uau_simple_segment_swigregister(uau_simple_segment)

class uau_simple_segment_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, count_: 'grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::size_type'):
        _pygrapenlp.uau_simple_segment_array_swiginit(self, _pygrapenlp.new_uau_simple_segment_array(count_))
    __swig_destroy__ = _pygrapenlp.delete_uau_simple_segment_array

    def size(self) -> "grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::size_type":
        return _pygrapenlp.uau_simple_segment_array_size(self)

    def size_in_bytes(self) -> "grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::size_type":
        return _pygrapenlp.uau_simple_segment_array_size_in_bytes(self)

    def empty(self) -> "bool":
        return _pygrapenlp.uau_simple_segment_array_empty(self)

    def begin(self) -> "grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::iterator":
        return _pygrapenlp.uau_simple_segment_array_begin(self)

    def const_begin(self) -> "grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::const_iterator":
        return _pygrapenlp.uau_simple_segment_array_const_begin(self)

    def const_end(self) -> "grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::const_iterator":
        return _pygrapenlp.uau_simple_segment_array_const_end(self)

    def get_bytes(self) -> "unsigned char const *":
        return _pygrapenlp.uau_simple_segment_array_get_bytes(self)

    def set_bytes(self, bytes: 'unsigned char *') -> "void":
        return _pygrapenlp.uau_simple_segment_array_set_bytes(self, bytes)

    def get_elem_at(self, i: 'grapenlp::array< grapenlp::simple_segment< unsigned short const *,unsigned short > >::size_type') -> "::grapenlp::simple_segment< unsigned short const *,unsigned short > const &":
        return _pygrapenlp.uau_simple_segment_array_get_elem_at(self, i)

# Register uau_simple_segment_array in _pygrapenlp:
_pygrapenlp.uau_simple_segment_array_swigregister(uau_simple_segment_array)

class uaui_simple_segment_array_x_weight(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ssa = property(_pygrapenlp.uaui_simple_segment_array_x_weight_ssa_get, _pygrapenlp.uaui_simple_segment_array_x_weight_ssa_set)
    w = property(_pygrapenlp.uaui_simple_segment_array_x_weight_w_get, _pygrapenlp.uaui_simple_segment_array_x_weight_w_set)

    def __init__(self):
        _pygrapenlp.uaui_simple_segment_array_x_weight_swiginit(self, _pygrapenlp.new_uaui_simple_segment_array_x_weight())
    __swig_destroy__ = _pygrapenlp.delete_uaui_simple_segment_array_x_weight

# Register uaui_simple_segment_array_x_weight in _pygrapenlp:
_pygrapenlp.uaui_simple_segment_array_x_weight_swigregister(uaui_simple_segment_array_x_weight)

class uaui_simple_segment_array_x_weight_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, count_: 'grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type'):
        _pygrapenlp.uaui_simple_segment_array_x_weight_array_swiginit(self, _pygrapenlp.new_uaui_simple_segment_array_x_weight_array(count_))
    __swig_destroy__ = _pygrapenlp.delete_uaui_simple_segment_array_x_weight_array

    def size(self) -> "grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type":
        return _pygrapenlp.uaui_simple_segment_array_x_weight_array_size(self)

    def size_in_bytes(self) -> "grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type":
        return _pygrapenlp.uaui_simple_segment_array_x_weight_array_size_in_bytes(self)

    def empty(self) -> "bool":
        return _pygrapenlp.uaui_simple_segment_array_x_weight_array_empty(self)

    def begin(self) -> "grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::iterator":
        return _pygrapenlp.uaui_simple_segment_array_x_weight_array_begin(self)

    def const_begin(self) -> "grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::const_iterator":
        return _pygrapenlp.uaui_simple_segment_array_x_weight_array_const_begin(self)

    def const_end(self) -> "grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::const_iterator":
        return _pygrapenlp.uaui_simple_segment_array_x_weight_array_const_end(self)

    def get_bytes(self) -> "unsigned char const *":
        return _pygrapenlp.uaui_simple_segment_array_x_weight_array_get_bytes(self)

    def set_bytes(self, bytes: 'unsigned char *') -> "void":
        return _pygrapenlp.uaui_simple_segment_array_x_weight_array_set_bytes(self, bytes)

    def get_elem_at(self, i: 'grapenlp::array< grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > >::size_type') -> "::grapenlp::simple_segment_array_x_weight< unsigned short const *,unsigned short,int > const &":
        return _pygrapenlp.uaui_simple_segment_array_x_weight_array_get_elem_at(self, i)

# Register uaui_simple_segment_array_x_weight_array in _pygrapenlp:
_pygrapenlp.uaui_simple_segment_array_x_weight_array_swigregister(uaui_simple_segment_array_x_weight_array)

class ualxiw_manager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, grammar_type_: 'grapenlp::rtno_type', grammar_path_name: 'std::string const &', dico_path_name: 'std::string const &'):
        _pygrapenlp.ualxiw_manager_swiginit(self, _pygrapenlp.new_ualxiw_manager(grammar_type_, grammar_path_name, dico_path_name))
    __swig_destroy__ = _pygrapenlp.delete_ualxiw_manager

    def get_context_key_value_hasher(self) -> "grapenlp::u_context_key_value_hasher const &":
        return _pygrapenlp.ualxiw_manager_get_context_key_value_hasher(self)

    def get_simplified_weighted_output(self) -> "::grapenlp::uaui_simple_segment_array_x_weight_array const &":
        return _pygrapenlp.ualxiw_manager_get_simplified_weighted_output(self)

    def process(self, *args) -> "void":
        return _pygrapenlp.ualxiw_manager_process(self, *args)

# Register ualxiw_manager in _pygrapenlp:
_pygrapenlp.ualxiw_manager_swigregister(ualxiw_manager)

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pygrapenlp.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _pygrapenlp.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _pygrapenlp.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _pygrapenlp.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _pygrapenlp.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _pygrapenlp.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _pygrapenlp.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _pygrapenlp.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _pygrapenlp.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _pygrapenlp.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _pygrapenlp.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _pygrapenlp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _pygrapenlp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _pygrapenlp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _pygrapenlp.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _pygrapenlp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _pygrapenlp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pygrapenlp:
_pygrapenlp.SwigPyIterator_swigregister(SwigPyIterator)

class u_trie_with_bool_data_string(u_trie_string):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    data = property(_pygrapenlp.u_trie_with_bool_data_string_data_get, _pygrapenlp.u_trie_with_bool_data_string_data_set)

# Register u_trie_with_bool_data_string in _pygrapenlp:
_pygrapenlp.u_trie_with_bool_data_string_swigregister(u_trie_with_bool_data_string)

class u_trie_with_bool_data(u_trie):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pygrapenlp.u_trie_with_bool_data_swiginit(self, _pygrapenlp.new_u_trie_with_bool_data())
    __swig_destroy__ = _pygrapenlp.delete_u_trie_with_bool_data

# Register u_trie_with_bool_data in _pygrapenlp:
_pygrapenlp.u_trie_with_bool_data_swigregister(u_trie_with_bool_data)

class u_trie_with_def_false_bool_data_string(u_trie_with_bool_data_string):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register u_trie_with_def_false_bool_data_string in _pygrapenlp:
_pygrapenlp.u_trie_with_def_false_bool_data_string_swigregister(u_trie_with_def_false_bool_data_string)

class u_trie_with_def_false_bool_data(u_trie_with_bool_data):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pygrapenlp.u_trie_with_def_false_bool_data_swiginit(self, _pygrapenlp.new_u_trie_with_def_false_bool_data())
    __swig_destroy__ = _pygrapenlp.delete_u_trie_with_def_false_bool_data

# Register u_trie_with_def_false_bool_data in _pygrapenlp:
_pygrapenlp.u_trie_with_def_false_bool_data_swigregister(u_trie_with_def_false_bool_data)

class u_set_trie_const_iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pygrapenlp.u_set_trie_const_iterator_swiginit(self, _pygrapenlp.new_u_set_trie_const_iterator(*args))

    def __ref__(self) -> "unsigned short const &":
        return _pygrapenlp.u_set_trie_const_iterator___ref__(self)
    __swig_destroy__ = _pygrapenlp.delete_u_set_trie_const_iterator

# Register u_set_trie_const_iterator in _pygrapenlp:
_pygrapenlp.u_set_trie_const_iterator_swigregister(u_set_trie_const_iterator)


def u_set_trie_const_iterator(self):
    if self.has_next():
        elem = self.__deref__()
        self.__preinc__()
        return elem
    raise StopIteration()

u_set_trie_const_iterator.next = u_set_trie_const_iterator

class u_set_trie(u_trie_with_def_false_bool_data):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pygrapenlp.u_set_trie_swiginit(self, _pygrapenlp.new_u_set_trie())

    def size(self) -> "grapenlp::trie< unsigned short >::size_type":
        return _pygrapenlp.u_set_trie_size(self)

    def empty(self) -> "bool":
        return _pygrapenlp.u_set_trie_empty(self)

    def add(self, elem: 'unsigned short const &') -> "grapenlp::set_trie< unsigned short >::string &":
        return _pygrapenlp.u_set_trie_add(self, elem)

    def begin(self) -> "grapenlp::set_trie_const_iterator< unsigned short >":
        return _pygrapenlp.u_set_trie_begin(self)

    def end(self) -> "grapenlp::set_trie_const_iterator< unsigned short >":
        return _pygrapenlp.u_set_trie_end(self)
    __swig_destroy__ = _pygrapenlp.delete_u_set_trie

# Register u_set_trie in _pygrapenlp:
_pygrapenlp.u_set_trie_swigregister(u_set_trie)


def u_set_trie_string_deref(s: 'u_trie_with_def_false_bool_data_string') -> "grapenlp::u_trie_with_def_false_bool_data_string &":
    return _pygrapenlp.u_set_trie_string_deref(s)
class inf_delaf_entry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    semantic_traits = property(_pygrapenlp.inf_delaf_entry_semantic_traits_get)

# Register inf_delaf_entry in _pygrapenlp:
_pygrapenlp.inf_delaf_entry_swigregister(inf_delaf_entry)

class ust_set(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pygrapenlp.ust_set_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pygrapenlp.ust_set___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pygrapenlp.ust_set___bool__(self)

    def __len__(self) -> "std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::size_type":
        return _pygrapenlp.ust_set___len__(self)

    def append(self, x: 'u_trie_with_def_false_bool_data_string') -> "void":
        return _pygrapenlp.ust_set_append(self, x)

    def __contains__(self, x: 'u_trie_with_def_false_bool_data_string') -> "bool":
        return _pygrapenlp.ust_set___contains__(self, x)

    def __getitem__(self, i: 'std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::difference_type') -> "std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::value_type":
        return _pygrapenlp.ust_set___getitem__(self, i)

    def add(self, x: 'u_trie_with_def_false_bool_data_string') -> "void":
        return _pygrapenlp.ust_set_add(self, x)

    def discard(self, x: 'u_trie_with_def_false_bool_data_string') -> "void":
        return _pygrapenlp.ust_set_discard(self, x)

    def __init__(self, *args):
        _pygrapenlp.ust_set_swiginit(self, _pygrapenlp.new_ust_set(*args))

    def empty(self) -> "bool":
        return _pygrapenlp.ust_set_empty(self)

    def size(self) -> "std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::size_type":
        return _pygrapenlp.ust_set_size(self)

    def clear(self) -> "void":
        return _pygrapenlp.ust_set_clear(self)

    def swap(self, v: 'ust_set') -> "void":
        return _pygrapenlp.ust_set_swap(self, v)

    def count(self, x: 'u_trie_with_def_false_bool_data_string') -> "std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::size_type":
        return _pygrapenlp.ust_set_count(self, x)

    def begin(self) -> "std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::iterator":
        return _pygrapenlp.ust_set_begin(self)

    def end(self) -> "std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::iterator":
        return _pygrapenlp.ust_set_end(self)

    def rbegin(self) -> "std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::reverse_iterator":
        return _pygrapenlp.ust_set_rbegin(self)

    def rend(self) -> "std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::reverse_iterator":
        return _pygrapenlp.ust_set_rend(self)

    def erase(self, *args) -> "void":
        return _pygrapenlp.ust_set_erase(self, *args)

    def find(self, x: 'u_trie_with_def_false_bool_data_string') -> "std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::iterator":
        return _pygrapenlp.ust_set_find(self, x)

    def lower_bound(self, x: 'u_trie_with_def_false_bool_data_string') -> "std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::iterator":
        return _pygrapenlp.ust_set_lower_bound(self, x)

    def upper_bound(self, x: 'u_trie_with_def_false_bool_data_string') -> "std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::iterator":
        return _pygrapenlp.ust_set_upper_bound(self, x)

    def equal_range(self, x: 'u_trie_with_def_false_bool_data_string') -> "std::pair< std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::iterator,std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::iterator >":
        return _pygrapenlp.ust_set_equal_range(self, x)

    def insert(self, __x: 'u_trie_with_def_false_bool_data_string') -> "std::pair< std::set< grapenlp::trie_with_def_data_string< unsigned short,::grapenlp::false_func,::grapenlp::false_func::result_type > * >::iterator,bool >":
        return _pygrapenlp.ust_set_insert(self, __x)
    __swig_destroy__ = _pygrapenlp.delete_ust_set

# Register ust_set in _pygrapenlp:
_pygrapenlp.ust_set_swigregister(ust_set)


def ust_set_deref(s: 'std::set< grapenlp::u_trie_with_def_false_bool_data_string *,std::less< grapenlp::u_trie_with_def_false_bool_data_string * >,std::allocator< grapenlp::u_trie_with_def_false_bool_data_string * > > *') -> "std::set< grapenlp::u_trie_with_def_false_bool_data_string *,std::less< grapenlp::u_trie_with_def_false_bool_data_string * >,std::allocator< grapenlp::u_trie_with_def_false_bool_data_string * > > &":
    return _pygrapenlp.ust_set_deref(s)
class base_inf_delaf_ambiguous_entry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry___bool__(self)

    def __len__(self) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::size_type":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry___len__(self)

    def __getslice__(self, i: 'std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::difference_type', j: 'std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::difference_type') -> "std::vector< grapenlp::inf_delaf::entry *,std::allocator< grapenlp::inf_delaf::entry * > > *":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::difference_type', j: 'std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::difference_type') -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::value_type":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry___setitem__(self, *args)

    def pop(self) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::value_type":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_pop(self)

    def append(self, x: 'std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::value_type') -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_append(self, x)

    def empty(self) -> "bool":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_empty(self)

    def size(self) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::size_type":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_size(self)

    def swap(self, v: 'base_inf_delaf_ambiguous_entry') -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_swap(self, v)

    def begin(self) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::iterator":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_begin(self)

    def end(self) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::iterator":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_end(self)

    def rbegin(self) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::reverse_iterator":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_rbegin(self)

    def rend(self) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::reverse_iterator":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_rend(self)

    def clear(self) -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_clear(self)

    def get_allocator(self) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::allocator_type":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_get_allocator(self)

    def pop_back(self) -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_pop_back(self)

    def erase(self, *args) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::iterator":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_erase(self, *args)

    def __init__(self, *args):
        _pygrapenlp.base_inf_delaf_ambiguous_entry_swiginit(self, _pygrapenlp.new_base_inf_delaf_ambiguous_entry(*args))

    def push_back(self, x: 'std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::value_type') -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_push_back(self, x)

    def front(self) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::value_type":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_front(self)

    def back(self) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::value_type":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_back(self)

    def assign(self, n: 'std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::size_type', x: 'std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::value_type') -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_insert(self, *args)

    def reserve(self, n: 'std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::size_type') -> "void":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_reserve(self, n)

    def capacity(self) -> "std::vector< ::grapenlp::inf_delaf::entry *,std::allocator< ::grapenlp::inf_delaf::entry * > >::size_type":
        return _pygrapenlp.base_inf_delaf_ambiguous_entry_capacity(self)
    __swig_destroy__ = _pygrapenlp.delete_base_inf_delaf_ambiguous_entry

# Register base_inf_delaf_ambiguous_entry in _pygrapenlp:
_pygrapenlp.base_inf_delaf_ambiguous_entry_swigregister(base_inf_delaf_ambiguous_entry)

class inf_delaf_ambiguous_entry(base_inf_delaf_ambiguous_entry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pygrapenlp.inf_delaf_ambiguous_entry_swiginit(self, _pygrapenlp.new_inf_delaf_ambiguous_entry())

    def clear(self) -> "void":
        return _pygrapenlp.inf_delaf_ambiguous_entry_clear(self)
    __swig_destroy__ = _pygrapenlp.delete_inf_delaf_ambiguous_entry

# Register inf_delaf_ambiguous_entry in _pygrapenlp:
_pygrapenlp.inf_delaf_ambiguous_entry_swigregister(inf_delaf_ambiguous_entry)

class compressed_delaf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pygrapenlp.compressed_delaf_swiginit(self, _pygrapenlp.new_compressed_delaf())

    def get_word_properties(self, word_begin: 'grapenlp::u_array::const_iterator', word_end: 'grapenlp::u_array::const_iterator') -> "grapenlp::const_inf_delaf_ambiguous_entry *":
        return _pygrapenlp.compressed_delaf_get_word_properties(self, word_begin, word_end)
    __swig_destroy__ = _pygrapenlp.delete_compressed_delaf

# Register compressed_delaf in _pygrapenlp:
_pygrapenlp.compressed_delaf_swigregister(compressed_delaf)


def u_read_compressed_delaf(bin_delaf_pathname: 'std::string const &', inf_delaf_pathname: 'std::string const &', dico: 'compressed_delaf') -> "void":
    return _pygrapenlp.u_read_compressed_delaf(bin_delaf_pathname, inf_delaf_pathname, dico)


