# coding: utf-8

"""
    Purplship Open Source Multi-carrier Shipping API

     Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services  The **proxy** endpoints are stateless and forwards calls to carriers web services.   # noqa: E501

    OpenAPI spec version: v1-2021.2
    Contact: hello@purplship.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Payment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'paid_by': 'str',
        'amount': 'float',
        'currency': 'str',
        'account_number': 'str',
        'contact': 'Address'
    }

    attribute_map = {
        'id': 'id',
        'paid_by': 'paid_by',
        'amount': 'amount',
        'currency': 'currency',
        'account_number': 'account_number',
        'contact': 'contact'
    }

    def __init__(self, id=None, paid_by='sender', amount=None, currency=None, account_number=None, contact=None):  # noqa: E501
        """Payment - a model defined in Purplship"""  # noqa: E501
        self._id = None
        self._paid_by = None
        self._amount = None
        self._currency = None
        self._account_number = None
        self._contact = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if paid_by is not None:
            self.paid_by = paid_by
        if amount is not None:
            self.amount = amount
        self.currency = currency
        if account_number is not None:
            self.account_number = account_number
        if contact is not None:
            self.contact = contact

    @property
    def id(self):
        """Gets the id of this Payment.  # noqa: E501

        A unique identifier  # noqa: E501

        :return: The id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.

        A unique identifier  # noqa: E501

        :param id: The id of this Payment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def paid_by(self):
        """Gets the paid_by of this Payment.  # noqa: E501

        The payment payer  # noqa: E501

        :return: The paid_by of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._paid_by

    @paid_by.setter
    def paid_by(self, paid_by):
        """Sets the paid_by of this Payment.

        The payment payer  # noqa: E501

        :param paid_by: The paid_by of this Payment.  # noqa: E501
        :type: str
        """
        allowed_values = ["sender", "recipient", "third_party"]  # noqa: E501
        if paid_by not in allowed_values:
            raise ValueError(
                "Invalid value for `paid_by` ({0}), must be one of {1}"  # noqa: E501
                .format(paid_by, allowed_values)
            )

        self._paid_by = paid_by

    @property
    def amount(self):
        """Gets the amount of this Payment.  # noqa: E501

        The payment amount if known  # noqa: E501

        :return: The amount of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Payment.

        The payment amount if known  # noqa: E501

        :param amount: The amount of this Payment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this Payment.  # noqa: E501

        The payment amount currency  # noqa: E501

        :return: The currency of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Payment.

        The payment amount currency  # noqa: E501

        :param currency: The currency of this Payment.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        allowed_values = ["EUR", "AED", "USD", "XCD", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "XOF", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "XAF", "CHF", "NZD", "CLP", "CNY", "COP", "CRC", "CUC", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "GBP", "GEL", "GHS", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "XPF", "NGN", "NIO", "NOK", "NPR", "OMR", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "SYP", "SZL", "THB", "TJS", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "YER", "ZAR"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def account_number(self):
        """Gets the account_number of this Payment.  # noqa: E501

        The selected rate carrier payer account number  # noqa: E501

        :return: The account_number of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Payment.

        The selected rate carrier payer account number  # noqa: E501

        :param account_number: The account_number of this Payment.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def contact(self):
        """Gets the contact of this Payment.  # noqa: E501


        :return: The contact of this Payment.  # noqa: E501
        :rtype: Address
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Payment.


        :param contact: The contact of this Payment.  # noqa: E501
        :type: Address
        """

        self._contact = contact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Payment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
