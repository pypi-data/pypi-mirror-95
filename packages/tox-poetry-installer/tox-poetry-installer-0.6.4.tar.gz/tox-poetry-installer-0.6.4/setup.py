# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['tests', 'tox_poetry_installer']

package_data = \
{'': ['*']}

install_requires = \
['poetry-core>=1.0.0,<2.0.0', 'tox>=3.8.0,<4.0.0']

extras_require = \
{'poetry': ['poetry>=1.0.0,<2.0.0']}

entry_points = \
{'tox': ['poetry_installer = tox_poetry_installer']}

setup_kwargs = {
    'name': 'tox-poetry-installer',
    'version': '0.6.4',
    'description': 'Tox plugin to install Tox environment dependencies using the Poetry backend and lockfile',
    'long_description': '# tox-poetry-installer\n\nA plugin for [Tox](https://tox.readthedocs.io/en/latest/) that allows test environment\ndependencies to be installed using [Poetry](https://python-poetry.org/) from its lockfile.\n\n⚠️ **This project is beta software and is under active development** ⚠️\n\n[![CI Status](https://github.com/enpaul/tox-poetry-installer/workflows/CI/badge.svg?event=push)](https://github.com/enpaul/tox-poetry-installer/actions)\n[![PyPI Version](https://img.shields.io/pypi/v/tox-poetry-installer?color=%2331c854)](https://pypi.org/project/tox-poetry-installer/)\n[![PyPI Downloads](https://img.shields.io/pypi/dm/tox-poetry-installer?color=%2331c854)](https://libraries.io/pypi/tox-poetry-installer)\n[![License](https://img.shields.io/pypi/l/tox-poetry-installer?color=%2331c854)](https://opensource.org/licenses/MIT)\n[![Python Supported Versions](https://img.shields.io/pypi/pyversions/tox-poetry-installer)](https://www.python.org)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nSee the [Changelog](https://github.com/enpaul/tox-poetry-installer/blob/devel/CHANGELOG.md) for release history.\n\n**Documentation**\n\n* [Introduction](#introduction)\n  * [Install](#install)\n  * [Quick Start](#quick-start)\n  * [Why would I use this?](#why-would-i-use-this) (What problems does this solve?)\n* [Reference](#reference)\n  * [Configuration Options](#configuration-options)\n  * [Command-line Arguments](#command-line-arguments)\n  * [Errors](#errors)\n  * [Advanced Usage](#advanced-usage)\n* [Developing](#developing)\n* [Contributing](#contributing)\n* [Roadmap](#roadmap)\n  * [Path to Beta](#path-to-beta)\n  * [Path to Stable](#path-to-stable)\n\nRelated resources:\n* [Poetry Python Project Manager](https://python-poetry.org/)\n* [Tox Automation Project](https://tox.readthedocs.io/en/latest/)\n* [Other Tox plugins](https://tox.readthedocs.io/en/latest/plugins.html)\n\nSimilar projects:\n* [Poetry Dev-Dependencies Tox Plugin](https://github.com/sinoroc/tox-poetry-dev-dependencies)\n* [Poetry Tox Plugin](https://github.com/tkukushkin/tox-poetry)\n\n\n## Introduction\n\nThis is a plugin to unify two great projects in the Python ecosystem: the\n[Tox](https://tox.readthedocs.io/en/latest/) automation project and the\n[Poetry](https://python-poetry.org) project/dependency manager. Specifically it allows\nthe repeatable dependency resolution and installation tools that Poetry uses to benefit\nthe isolated environments that Tox uses to run automated tests. The motivation to write\nthis plugin came from a need for a single source of truth for the versions of all\npackages that should be installed to an environment.\n\nWhen in use this plugin will allow a Tox environment to install its required\ndependencies using the versions specified in the Poetry lockfile. This eliminates\nneeding to specify package versions in multiple places as well as ensures that the Tox\nenvironment has the exact same versions of a given package as the Poetry environment.\nThis reduces (or hopefully eliminates) hard to debug problems caused by subtle\ndifferences in the dependency graph of the active development environment (the one managed\nby Poetry) and the automated test environment(s) created by Tox.\n\nTo learn more about the problems this plugin aims to solve jump ahead to\n[What problems does this solve?](#why-would-i-use-this).\nOtherwise keep reading to get started.\n\n### Install\n\nThe recommended way to install the plugin is to add it to a project\'s `pyproject.toml`\nand lockfile using Poetry:\n\n```bash\npoetry add tox-poetry-installer[poetry] --dev\n```\n\n**WARNING:** The below installation methods are vulnerable to the\n[transient dependency issues this plugin aims to avoid](#why-would-i-use-this). It is\nalways recommended to install dependencies using Poetry whenever possible.\n\nThe plugin can also be installed with pip directly, though it is recommended to always\ninstall to a virtual environment and pin to a specific version:\n\n```bash\nsource my-venv/bi/activate\npip install tox-poetry-installer[poetry] == 0.6.0\n```\n\nThe plugin can also be installed using the Tox\n[`requires`]((https://tox.readthedocs.io/en/latest/config.html#conf-requires))\nconfiguration option. Note however that dependencies installed via the `requires` option\nare not handled by the plugin and will be installed the same way as a `pip install ...`\nabove. For this reason it is also recommended to always pin to a specific version when\nusing this installation method:\n\n```ini\n# tox.ini\n[tox]\nrequires\n    tox-poetry-installer[poetry] == 0.6.0\n```\n\nCheck that the plugin is registered by checking the Tox version:\n\n```\n~ $: poetry run tox --version\n3.20.0 imported from .venv/lib64/python3.8/site-packages/tox/__init__.py\nregistered plugins:\n    tox-poetry-installer-0.6.0 at .venv/lib64/python3.8/site-packages/tox_poetry_installer.py\n```\n\n**NOTE:** Installing the `tox-poetry-installer[poetry]` extra will add the `poetry`\npackage as a managed environment dependency which can cause problems when the Poetry\ninstallation is externally managed (such as in a CI or container environment). See\n[Advanced Usage](#installing-alongside-an-existing-poetry-installation) for more\ninformation on this use case.\n\n### Quick Start\n\nBefore making any changes to `tox.ini` the project is already benefiting from having\nthe plugin installed: all dependencies of the root project package are installed using\nthe Poetry backend to all Tox environments that install the root package without any\nconfiguration changes.\n\nTo add dependencies from the lockfile to a Tox environment, add the option\n[`locked_deps`](#locked_deps) to the environment configuration and list names of\ndependencies (with no version specifier) under it:\n\n```ini\n[testenv]\ndescription = Some very cool tests\nlocked_deps =\n    black\n    pylint\n    mypy\ncommands = ...\n```\n\nThe standard [`deps`](https://tox.readthedocs.io/en/latest/config.html#conf-deps) option\ncan be used in parallel with the `locked_deps` option to install unlocked dependencies\n(dependencies not in the lockfile) alongside locked dependencies:\n\n```ini\n[testenv]\ndescription = Some very cool tests\nlocked_deps =\n    black\n    pylint\n    mypy\ndeps =\n    pytest == 6.1.1\n    pytest-cov >= 2.10, <2.11\ncommands = ...\n```\n\nAlternatively, to quickly install all Poetry dev-dependencies to a Tox environment, add the\n[`install_dev_deps`](#install_dev_deps) option to the environment configuration:\n\n```ini\n[testenv]\ndescription = Some very cool tests\ninstall_dev_deps = true\n```\n\nSee the [Reference](#reference) section for more details on available\nconfiguration options and the [Advanced Usage](#advanced-usage) section for some\nunusual use cases.\n\n### Why would I use this?\n\n**The Problem**\n\nBy default Tox uses Pip to install the [PEP-508](https://www.python.org/dev/peps/pep-0508/)\ncompliant dependencies to a test environment. This plugin extends the default Tox\ndependency installation behavior to support installing dependencies using a Poetry-based\ninstallation method that makes use of the dependency metadata from Poetry\'s lockfile.\n\nEnvironment dependencies for a Tox environment are usually specified in PEP-508 format, like\nthe below example:\n\n```ini\n[testenv]\ndescription = Some very cool tests\ndeps =\n    foo == 1.2.3\n    bar >=1.3,<2.0\n    baz\n```\n\nLet\'s assume these dependencies are also useful during development, so they can be added to the\nPoetry environment using this command:\n\n ```\n poetry add --dev \\\n    foo==1.2.3 \\\n    bar>=1.3,<2.0 \\\n    baz\n ```\n\n However there is a potential problem that could arise from each of these environment\n dependencies that would _only_ appear in the Tox environment and not in the Poetry\n environment in use by a developer:\n\n * **The `foo` dependency is pinned to a specific version:** let\'s imagine a security\n   vulnerability is discovered in `foo` and the maintainers release version `1.2.4` to fix\n   it. A developer can run `poetry remove foo` and then `poetry add foo^1.2` to get the new\n   version, but the Tox environment is left unchanged. The development environment, as defined by\n   the lockfile, is now patched against the vulnerability but the Tox environment is not.\n\n* **The `bar` dependency specifies a dynamic range:** a dynamic range allows a range of\n  versions to be installed, but the lockfile will have an exact version specified so that\n  the Poetry environment is reproducible; this allows versions to be updated with\n  `poetry update` rather than with the `remove` and `add` commands used above. If the\n  maintainers of `bar` release version `1.6.0` then the Tox environment will install it\n  because it is valid for the specified version range. Meanwhile the Poetry environment will\n  continue to install the version from the lockfile until `poetry update bar` explicitly\n  updates it. The development environment is now has a different version of `bar` than the Tox\n  environment.\n\n* **The `baz` dependency is unpinned:** unpinned dependencies are\n  [generally a bad idea](https://python-poetry.org/docs/faq/#why-are-unbound-version-constraints-a-bad-idea),\n  but here it can cause real problems. Poetry will interpret an unbound dependency using\n  [the carrot requirement](https://python-poetry.org/docs/dependency-specification/#caret-requirements)\n  but Pip (via Tox) will interpret it as a wildcard. If the latest version of `baz` is `1.0.0`\n  then `poetry add baz` will result in a constraint of `baz>=1.0.0,<2.0.0` while the Tox\n  environment will have a constraint of `baz==*`. The Tox environment can now install an\n  incompatible version of `baz` and any errors that causes cannot be replicated using `poetry update`.\n\nAll of these problems can apply not only to the dependencies specified for a Tox environment,\nbut also to the dependencies of those dependencies, those dependencies\' dependencies, and so on.\n\n**The Solution**\n\nThis plugin allows dependencies specified in Tox environment take their version directly from\nthe Poetry lockfile without needing an independent version to be specified in the Tox\nenvironment configuration. The modified version of the example environment given below appears\nless stable than the one presented above because it does not specify any versions for its\ndependencies:\n\n```ini\n[testenv]\ndescription = Some very cool tests\nrequire_locked_deps = true\nlocked_deps =\n    foo\n    bar\n    baz\n```\n\nHowever with the `tox-poetry-installer` plugin installed Tox will install these\ndependencies from the Poetry lockfile so that the version installed to the Tox\nenvironment exactly matches the version Poetry is managing. When `poetry update` updates\nthe lockfile with new versions of these dependencies, Tox will automatically install\nthese new versions without needing any changes to the configuration.\n\n\n## Reference\n\n### Configuration Options\n\nAll options listed below are Tox environment options and can be applied to one or more\nenvironment sections of the `tox.ini` file. They cannot be applied to the global Tox\nconfiguration section.\n\n**NOTE:** Environment settings applied to the main `testenv` environment will be\ninherited by child environments (i.e. `testenv:foo`) unless they are explicitly\noverridden by the child environment\'s configuration.\n\n#### `locked_deps`\n\n* **Type:** multi-line list\n* **Default:** `[]`\n\nNames of packages in the Poetry lockfile to install to the Tox environment. All\ndependencies specified here will be installed to the Tox environment using the details\ngiven by the Poetry lockfile.\n\n#### `require_locked_deps`\n\n\n* **Type:** boolean\n* **Default:** `false`\n\nWhether the environment should allow unlocked dependencies (dependencies not in the\nPoetry lockfile) to be installed alongside locked dependencies. If `true` then an error\nwill be raised if the environment specifies unlocked dependencies to install and the\nplugin will block any other plugins from using the\n[`tox_testenv_install_deps`](https://tox.readthedocs.io/en/latest/plugins.html#tox.hookspecs.tox_testenv_install_deps)\nhook.\n\n#### `install_dev_deps`\n\n* **Type:** boolean\n* **Default:** `false`\n\nWhether all Poetry dev-dependencies should be installed to the environment. If `true`\nthen all dependencies specified in the\n[`dev-dependencies`](https://python-poetry.org/docs/pyproject/#dependencies-and-dev-dependencies)\nsection of `pyproject.toml` will be installed automatically.\n\n### Command-line Arguments\n\nAll arguments listed below can be passed to the `tox` command to modify runtime behavior\nof the plugin.\n\n#### `--require-poetry`\n\nIndicates that Poetry is expected to be available to Tox and, if it is not, then the Tox\nrun should fail. If provided and the `poetry` package is not installed to the same\nenvironment as the `tox` package then Tox will fail.\n\n**NOTE:** See [Advanced Usage](#installing-alongside-an-existing-poetry-installation)\nfor more information.\n\n### Errors\n\nIf the plugin encounters an error while processing a Tox environment then it will mark\nthe environment as failed and set the environment status to one of the values below:\n\n**NOTE:** In addition to the reasons noted below, the plugin can encounter errors if the\nPoetry lockfile is not up-to-date with `pyproject.toml`. To resynchronize the\nlockfile with the `pyproject.toml` run one of\n[`poetry update`](https://python-poetry.org/docs/cli/#update) or\n[`poetry lock`](https://python-poetry.org/docs/cli/#lock)\n\n#### Poetry Not Installed Error\n\n* **Status value:** `PoetryNotInstalledError`\n* **Cause:** Indicates that the `poetry` module could not be imported from the same\n  environment as the running `tox` module and the runtime flags specified\n  [`--require-poetry`](#--require-poetry).\n* **Resolution options:**\n  * Install Poetry: ensure that `poetry` is installed to the same environment as `tox`.\n  * Skip running the plugin: remove the `--require-poetry` flag from the runtime options.\n\n**NOTE:** See [Advanced Usage](#installing-alongside-an-existing-poetry-installation)\nfor more information.\n\n#### Locked Dependency Version Conflict Error\n\n* **Status value:** `LockedDepVersionConflictError`\n* **Cause:** Indicates that a dependency specified in the [`locked_deps`](#locked_deps)\n  configuration option in `tox.ini` includes a\n  [PEP-508 version specifier](https://www.python.org/dev/peps/pep-0508/#grammar)\n  (i.e. `pytest >=6.0, <6.1`).\n* **Resolution options:**\n  * Use the dependency version from the lockfile: remove any/all version specifiers\n    from the item in the `locked_deps` list in `tox.ini`.\n  * Do not install the dependency: remove the item from the `locked_deps` list in\n    `tox.ini`.\n\n#### Locked Dependency Not Found Error\n\n* **Status value:** `LockedDepNotFoundError`\n* **Cause:** Indicates that a dependency specified in the [`locked_deps`](#locked_deps)\n  configuration option in `tox.ini` could not be found in the Poetry lockfile.\n* **Resolution options:**\n  * Add the dependency to the lockfile: run\n    [`poetry add <dependency>`](https://python-poetry.org/docs/cli/#add).\n  * Do not install the dependency: remove the item from the `locked_deps` list in\n    `tox.ini`.\n\n#### Extra Not Found Error\n\n* **Status value:** `ExtraNotFoundError`\n* **Cause:** Indicates that the [`extras`](https://tox.readthedocs.io/en/latest/config.html#conf-extras)\n  configuration option specified a setuptools extra that is not configured by Poetry in\n  `pyproject.toml`\n* **Resolution options:**\n  * Configure the extra: add a section for the named extra to the\n    [`extras`](https://python-poetry.org/docs/pyproject/#extras) section of\n    `pyproject.toml` and optionally assign dependencies to the named extra using the\n    [`--optional`](https://python-poetry.org/docs/cli/#options_3) dependency setting.\n  * Remove the extra: remove the item from the `extras` list in `tox.ini`.\n\n#### Locked Dependencies Required Error\n\n* **Status value:** `LockedDepsRequiredError`\n* **Cause:** Indicates that an environment with the [`require_locked_deps`](#require_locked_deps)\n  configuration option also specified unlocked dependencies using\n  [`deps`](https://tox.readthedocs.io/en/latest/config.html#conf-deps) option in\n  `tox.ini`.\n* **Resolution options:**\n  * Remove all unlocked dependencies: remove the `deps` configuration option in\n    `tox.ini`.\n  * Allow unlocked dependencies: remove the `require_locked_deps` configuration option\n    in `tox.ini` or explicitly set `require_locked_deps = false`.\n\n### Advanced Usage\n\n#### Unsupported Tox configuration options\n\nThe `tox.ini` configuration options listed below have no effect on the dependencies\ninstalled by this plugin the Poetry lockfile. Note that these settings will still be\napplied by the default Tox installation backend when installing unlocked dependencies\nusing the built-in `deps` option.\n\n  * [`install_command`](https://tox.readthedocs.io/en/latest/config.html#conf-install_command)\n  * [`pip_pre`](https://tox.readthedocs.io/en/latest/config.html#conf-pip_pre)\n  * [`download`](https://tox.readthedocs.io/en/latest/config.html#conf-download)\n  * [`indexserver`](https://tox.readthedocs.io/en/latest/config.html#conf-indexserver)\n  * [`usedevelop`](https://tox.readthedocs.io/en/latest/config.html#conf-indexserver)\n\nAll of these options are obsoleted by using the Poetry backend. If a given package\ninstalls successfully using Poetry (using either `poetry add <package>` or\n`poetry install`) then the required configuration options are already properly set in\nthe Poetry configuration and the plugin will automatically use the same settings when\ninstalling the package.\n\n#### Reinstalling locked dependencies to a Tox environment\n\nUpdating the `poetry.lock` file will not automatically cause Tox to install the updated\nlockfile specifications to the Tox environments that specify them.\n\nThe Tox environment(s) with updated locked dependencies must be deleted and recreated\nusing the [`--recreate`](https://tox.readthedocs.io/en/latest/config.html#cmdoption-tox-r)\nruntime flag. Alternatively Tox can be configured to always recreate an environment by\nsetting the [`recreate`](https://tox.readthedocs.io/en/latest/config.html#conf-recreate)\noption in `tox.ini`.\n\n#### Installing Poetry\'s unsafe dependencies\n\nThere are several packages that cannot be installed from the lockfile because they are\nexcluded by Poetry itself. As a result these packages cannot be installed by this plugin\neither as environment dependencies (passed directly to [`locked_deps`](#locked_deps)) or\nas transient dependencies (a dependency of a locked dependency).\n\nAs of [Poetry-1.1.4](https://github.com/python-poetry/poetry/releases/tag/1.1.4) there\nare four packages classified as "unsafe" by Poetry and excluded from the lockfile:\n\n* `setuptools`\n* `distribute`\n* `pip`\n* `wheel`\n\nWhen one of these packages is encountered by the plugin a warning will be logged and\n_**the package will not be installed to the environment**_. If the unsafe package\nis required for the environment then it will need to be specified as an unlocked\ndependency using the [`deps`](https://tox.readthedocs.io/en/latest/config.html#conf-deps)\nconfiguration option in `tox.ini`, ideally with an exact pinned version.\n\n* The set of packages excluded from the Poetry lockfile can be found in\n  [`poetry.puzzle.provider.Provider.UNSAFE_DEPENDENCIES`](https://github.com/python-poetry/poetry/blob/master/poetry/puzzle/provider.py)\n* There is an ongoing discussion of Poetry\'s handling of these packages at\n  [python-poetry/poetry#1584](https://github.com/python-poetry/poetry/issues/1584)\n\n#### Installing alongside an existing Poetry installation\n\nThe plugin specifies the `poetry` package as an optional dependency to support an\nexternally managed Poetry installation such as in a container or CI environment. This\ngives greater flexibility when using Poetry arguments like `--no-root`, `--no-dev`, or\n`--remove-untracked` which can cause Poetry to uninstall itself if Poetry is specified\nas a dependency of one of the packages it is managing (like this plugin).\n\nTo have the plugin use the externally-managed Poetry package simply do not install the\n`poetry` extra when installing this plugin:\n\n```bash\n# Installing Poetry as a dependency with the plugin\npoetry add tox-poetry-installer[poetry]\n\n# Relying on an externally managed Poetry installation\npoetry add tox-poetry-installer\n```\n\nNote that Poetry is an optional dependency to support this use case _only_: Poetry must\nbe installed to the same environment as Tox for the plugin to function. To check that\nthe local environment has all of the required modules in scope run the below command:\n\n```bash\npython -c \'\\\n  import tox;\\\n  import tox_poetry_installer;\\\n  from poetry.poetry import Poetry;\\\n\'\n```\n\n**NOTE:** To force Tox to fail if Poetry is not installed, run the `tox` command with\nthe [`--require-poetry`](#--require-poetry) option.\n\n\n## Developing\n\nLocal development requirements:\n* Python version 3.6+ ([install](https://www.python.org/downloads/))\n* Poetry version 1.0+ ([install](https://python-poetry.org/docs/#installation))\n* GNU Make (optional, required to use the makefile)\n\nLocal environment setup instructions:\n\n```bash\n# Clone the repository...\n# ...over HTTPS\ngit clone https://github.com/enpaul/tox-poetry-installer.git\n# ...over SSH\ngit clone git@github.com:enpaul/tox-poetry-installer.git\n\ncd tox-poetry-installer/\n\n# Create and configure the local development environment\nmake dev\n\n# Run tests and CI locally\nmake test\n\n# Check additional make targets\nmake help\n```\n\n**NOTE:** Because the pre-commit hooks require dependencies in the Poetry environment it\nis recommend to [launch an environment shell](https://python-poetry.org/docs/cli/#shell)\nwhen developing the project. Alternatively, many `git` commands will need to be run from\noutside of the environment shell by prefacing the command with\n[`poetry run`](https://python-poetry.org/docs/cli/#run).\n\n\n## Contributing\n\nAll project contributors and participants are expected to adhere to the\n[Contributor Covenant Code of Conduct, v2](CODE_OF_CONDUCT.md)\n([external link](https://www.contributor-covenant.org/version/2/0/code_of_conduct/)).\n\nThe `devel` branch has the latest (potentially unstable) changes. The\n[tagged versions](https://github.com/enpaul/tox-poetry-installer/releases) correspond to the\nreleases on PyPI.\n\n* To report a bug, request a feature, or ask for assistance, please\n  [open an issue on the Github repository](https://github.com/enpaul/tox-poetry-installer/issues/new).\n* To report a security concern or code of conduct violation, please contact the project author\n  directly at **\u200cme [at\u200c] enp dot\u200e \u200cone**.\n* To submit an update, please\n  [fork the repository](https://docs.github.com/en/enterprise/2.20/user/github/getting-started-with-github/fork-a-repo)\n  and\n  [open a pull request](https://github.com/enpaul/tox-poetry-installer/compare).\n\n\n## Roadmap\n\nThis project is under active development and is classified as beta software, ready for\nproduction environments on a provisional basis only.\n\n* Beta classification was assigned with [v0.6.0](https://github.com/enpaul/tox-poetry-installer/releases/tag/0.6.0)\n* Stable classification will be assigned when the test suite covers an acceptable number of\n  use cases\n\n### Path to Beta\n\n- [X] Verify that primary package dependencies (from the `.package` env) are installed\n      correctly using the Poetry backend.\n- [X] Support the [`extras`](https://tox.readthedocs.io/en/latest/config.html#conf-extras)\n      Tox configuration option ([#4](https://github.com/enpaul/tox-poetry-installer/issues/4))\n- [X] Add per-environment Tox configuration option to fall back to default installation\n      backend.\n- [ ] ~Add warnings when an unsupported Tox configuration option is detected while using the\n      Poetry backend.~ ([#5](https://github.com/enpaul/tox-poetry-installer/issues/5))\n- [X] Add trivial tests to ensure the project metadata is consistent between the pyproject.toml\n      and the module constants.\n- [X] Update to use [poetry-core](https://github.com/python-poetry/poetry-core) and\n      improve robustness of the Tox and Poetry module imports\n      to avoid potentially breaking API changes in upstream packages. ([#2](https://github.com/enpaul/tox-poetry-installer/issues/2))\n- [ ] ~Find and implement a way to mitigate the [UNSAFE_DEPENDENCIES issue](https://github.com/python-poetry/poetry/issues/1584) in Poetry.~\n      ([#6](https://github.com/enpaul/tox-poetry-installer/issues/6))\n- [X] Fix logging to make proper use of Tox\'s logging reporter infrastructure ([#3](https://github.com/enpaul/tox-poetry-installer/issues/3))\n- [X] Add configuration option for installing all dev-dependencies to a testenv ([#14](https://github.com/enpaul/tox-poetry-installer/issues/14))\n\n### Path to Stable\n\nEverything in Beta plus...\n\n- [ ] Fully replace dependency on `poetry` with dependency on `poetry-core` ([#2](https://github.com/enpaul/tox-poetry-installer/issues/2))\n- [ ] Add comprehensive unit tests\n- [ ] Add tests for each feature version of Tox between 3.0 and 3.20\n- [X] Add tests for Python-3.6, 3.7, 3.8, and 3.9\n- [X] Add Github Actions based CI\n- [ ] Add CI for CPython, PyPy, and Conda\n- [ ] Add CI for Linux and Windows\n',
    'author': 'Ethan Paul',
    'author_email': '24588726+enpaul@users.noreply.github.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/enpaul/tox-poetry-installer/',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'entry_points': entry_points,
    'python_requires': '>=3.6.1,<4.0.0',
}


setup(**setup_kwargs)
