language: python

# DO NOT CACHE PIP: we rather use a fresh conda
# cache: pip

matrix:
  fast_finish: true
  include:
    - name: "Python 2.7 Pytest 2"
      python: 2.7
      env: PYTEST_VERSION="<3" PYTEST_HTML_VERSION="==1.9.0"  # indeed recent pytest_html require pytest>=3
    - name: "Python 2.7 Pytest 3"
      python: 2.7
      env: PYTEST_VERSION="<4" PYTEST_HTML_VERSION="==1.9.0"
    - name: "Python 2.7 Pytest 4"
      python: 2.7
      env: PYTEST_VERSION="<5" PYTEST_HTML_VERSION="==1.9.0"
    - name: "Python 3.5 Pytest 2"
      python: 3.5
      env: PYTEST_VERSION="<3" PYTEST_HTML_VERSION="==1.9.0"  # indeed recent pytest_html require pytest>=3
    - name: "Python 3.5 Pytest 3"
      python: 3.5
      env: PYTEST_VERSION="<4" PYTEST_HTML_VERSION="==1.9.0"
    - name: "Python 3.5 Pytest 4"
      python: 3.5
      env: PYTEST_VERSION="<5" PYTEST_HTML_VERSION="==1.9.0"
    - name: "Python 3.5 Pytest 5"
      python: 3.5
      env: PYTEST_VERSION="<6" PYTEST_HTML_VERSION="==1.9.0"
    - name: "Python 3.5 Pytest latest"
      python: 3.5 # pytest latest
      env: PYTEST_VERSION="" PYTEST_HTML_VERSION="==1.9.0"
    - name: "Python 3.6 Pytest 2"
      python: 3.6
      env: PYTEST_VERSION="<3" PYTEST_HTML_VERSION="==1.9.0"  # indeed recent pytest_html require pytest>=3
    - name: "Python 3.6 Pytest 3"
      python: 3.6
      env: PYTEST_VERSION="<4" PYTEST_HTML_VERSION="==1.9.0"
    - name: "Python 3.6 Pytest 4"
      python: 3.6
      env: PYTEST_VERSION="<5" PYTEST_HTML_VERSION="==1.9.0"
    - name: "Python 3.6 Pytest 5"
      python: 3.6
      env: PYTEST_VERSION="<6" PYTEST_HTML_VERSION="==1.9.0"
    - name: "Python 3.6 Pytest latest"
      python: 3.6
      env: PYTEST_VERSION="" PYTEST_HTML_VERSION="==1.9.0"
    - name: "Python 3.7 Pytest 2"
      python: 3.7
      env: PYTEST_VERSION="<3" PYTEST_HTML_VERSION="==1.9.0"  # indeed recent pytest_html require pytest>=3
      dist: xenial
      sudo: true
    - name: "Python 3.7 Pytest 3"
      python: 3.7
      env: PYTEST_VERSION="<4" PYTEST_HTML_VERSION="==1.9.0"
      dist: xenial
      sudo: true
    - name: "Python 3.7 Pytest 4"
      python: 3.7
      env: PYTEST_VERSION="<5" PYTEST_HTML_VERSION="==1.9.0"
      dist: xenial
      sudo: true
    - name: "Python 3.7 Pytest 5"
      python: 3.7
      env: PYTEST_VERSION="<6" PYTEST_HTML_VERSION="==1.9.0"
      dist: xenial
      sudo: true
    - name: "Python 3.7 Pytest latest - DEPLOY WebSite+Coverage+PyPi"
      python: 3.7
      env: PYTEST_VERSION="" PYTEST_HTML_VERSION="==1.9.0" DEPLOY_ENV="true"
      dist: xenial
      sudo: true

env:
  global:
  - GH_REF: git@github.com:smarie/python-pytest-cases.git

before_install:
  # (a) linux dependencies
  - sudo apt-get install ant
  - sudo apt-get install ant-optional

  # ------------ USE CONDA BECAUSE OTHERWISE WE HAVE VERSION CONFLICTS WITH PYTEST AND ITS PLUGINS ---
  # (b) install conda - from https://conda.io/docs/user-guide/tasks/use-conda-with-travis-ci.html
  - echo "downloading miniconda"; if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
      sudo wget -q https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      sudo wget -q https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - echo "installing miniconda to $HOME/miniconda";  bash miniconda.sh -b -p $HOME/miniconda; export PATH="$HOME/miniconda/bin:$PATH"
  - echo "configuring miniconda"; hash -r; conda config --set always_yes yes --set changeps1 no
  # - conda update -q conda NO !!!!

  # (c) base conda environment
  - echo "creating conda environment"; conda create -q -y -n test-environment python=$TRAVIS_PYTHON_VERSION
  - echo "activating conda environment"; source activate test-environment

install:
  - pip install six setuptools_scm  # on python 2 this needs to be installed beforehand
  - conda list
  - python ci_tools/py_install.py conda ci_tools/requirements-conda.txt
  - python ci_tools/py_install.py pip ci_tools/requirements-pip.txt
  # mkdocs does not work anymore on python 2 so lets only do it when needed
  - if [ "${DEPLOY_ENV}" = "true" ]; then pip install mkdocs-material mkdocs pymdown-extensions pygments; fi;
  # travis-specific installs
  - pip install PyGithub  # for ci_tools/github_release.py
  - pip install codecov  # See https://github.com/codecov/example-python.
  - conda list
  # WARNING to use the "true" pytest (or py.test) depending on version, "pytest" is NOT the way to go !
  - python -m pytest --version  #  - pytest --version

script:
  #- if [ "${DEPLOY_ENV}" = "true" ]; then python ci_tools/headers_check.py; fi;
#  - coverage run tests.py
  - pip install .
  - python -c "import os; os.chdir('..'); import pytest_cases"
# ***tests***
#  - coverage run tests.py
#  - pytest --junitxml=reports/junit/junit.xml --html=reports/junit/report.html --cov-report term-missing --cov=./pytest_cases -v pytest_cases/tests/
# now done in a dedicated script to capture exit code 1 and transform it to 0
  - chmod a+x ./ci_tools/run_tests.sh
  - sh ./ci_tools/run_tests.sh
  - python ci_tools/generate-junit-badge.py 100  # generates the badge for the test results and fail build if less than x%

after_success:
# ***reporting***
#  - junit2html junit.xml testrun.html  output is really not nice
  - ant -f ci_tools/generate-junit-html.xml  # generates the html for the test results. Actually we dont use it anymore
  - codecov
  # - pylint pytest_cases  # note that at the moment the report is simply lost, we dont transform the result into anything
# ***documentation***
  - mkdocs build -f docs/mkdocs.yml
  - mv reports/junit docs/  # not in site/ anymore so that we do not need to use --dirty (it breaks client-side search)
  # mkdocs gh-deploy requires special care :
  # ---grant the possibility to push on the repo---
  - openssl aes-256-cbc -K $encrypted_b1669b6e8c83_key -iv $encrypted_b1669b6e8c83_iv -in ci_tools/github_travis_rsa.enc -out ci_tools/github_travis_rsa -d
  # If the output file does not exist, that is because the secret is invalid. This can happen in forked repos so do not fail the build
  - |
    if [ -s "ci_tools/github_travis_rsa" ]; then
      chmod 600 ci_tools/github_travis_rsa
      eval `ssh-agent -s`  # launch the authentication agent
      ssh-add ci_tools/github_travis_rsa  # register the decrypted key
      git config user.name "Automatic Publish"
      git config user.email "sylvain.marie@schneider-electric.com"
      git remote add gh-remote "${GH_REF}";
      git fetch gh-remote && git fetch gh-remote gh-pages:gh-pages;  # make sure we have the latest gh-remote
      # push but only if this is not a build triggered by a pull request
      # note: do not use the --dirty flag as it breaks client-side search
      if [ "${TRAVIS_PULL_REQUEST}" = "false" ] && [ "${DEPLOY_ENV}" = "true" ]; then echo "Pushing to github"; PYTHONPATH=pytest_cases/ mkdocs gh-deploy -v -f docs/mkdocs.yml --remote-name gh-remote; git push gh-remote gh-pages; fi;
    else
      echo "File 'ci_tools/github_travis_rsa' has not been created, please check your encrypted repo token in .travis.yml, on the line starting with 'openssl aes-256-cbc...'"
    fi

deploy:
  # Deploy on PyPI on tags
  - provider: pypi
    user: "smarie"
    password:
      secure: "iWtaX7rsW1e1dQGMEo4nAa6O9cv27rT7pZMrHe2sN/oODf1CErBLD5MarReA1XLXEcqdO/Qvsx6+djl0Z3daVa6Pk7FMt+5lKBuw1QPUNuU56/MAty36nnH06H4627GZK5gEFbV107BNqnt+1eR7QIlndFVtImdA1m61JyW/5ydCgCy4ppCTNGxwxpkPWimxXMVVwS/vMT/TNzTIUIJfAXObDoBra2bVvyymjPAIJoJWghE/FG1mbsLIhMUq/HWE5k22LwcFWNHRzVddfSCzh6Qw2NyFJaV4QjCLxK3Ia6AmrF7gjpC8GqTSnoClgiW1N9Cl6+h8099BLq46FSAw4eJjkD5BrWzKxtdHg1TBWhoqEPmP4gxTbk/3lT5nYl0Vo0xdXsvjIuiHmy3RGQVNutTUT7ms1w7It0ioX2wPLaTseafOWzf4y1CQceB6AKEXCAFKA0zsj5oxDXokVTSgLpvgFaKHFfy1zz60Ga8TqJY2GD70oxA31NgmGRO+Quamas8iIsFwTmKEjLRtRt/ShTG96wYvZNlOMU4DQ4X5h0BHc5HbZLl8CVWY3NNXISbtH48E+mdvVvw5fJMnan6aK3AGLmn3i+pPX9dfn25avQ2+ulPJbvrxK/x8Ys/ZD2zDlZUdZRS8ffqfeyYFVbMwlt60DkP98zZYibdkGYPcwno="
    on:
      tags: true
      # python: 3.5  #only one of the builds have to be deployed
      condition: $DEPLOY_ENV = "true"
    # server: https://test.pypi.org/legacy/
    distributions: "sdist bdist_wheel"

  # Create a github release on tags
  - provider: script
    script: python ci_tools/github_release.py -s $GITHUB_TOKEN --repo-slug smarie/python-pytest-cases -cf ./docs/changelog.md -d https://smarie.github.io/python-pytest-cases/changelog/ $TRAVIS_TAG
    skip_cleanup: true
    on:
      tags: true
      # only one of the builds have to be deployed
      condition: $DEPLOY_ENV = "true"

  # TODO update zenodo record

notifications:
  email:
    on_success: never  # options: [always|never|change] default: always
