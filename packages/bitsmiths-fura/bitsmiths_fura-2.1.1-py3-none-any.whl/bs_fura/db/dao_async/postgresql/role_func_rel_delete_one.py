# This file was generated by mettle.genes.db.GenPy3 [ver 2.1] on Tue Feb 16 18:30:45 2021
#  Target Database = postgresql
#
import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_fura.db.tables.role_func_rel_key import tRoleFuncRelKey

class dRoleFuncRelDeleteOne:

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self._dbcon   = dbcon
        self._dbstmnt = None
        self.irec     = tRoleFuncRelKey()

    def __del__(self):
        """
        Destructor.
        """
        del self._dbstmnt

    def __enter__(self):
        """
        With statement enter.
        """
        return self

    def __exit__(self, type, value, traceback):
        """
        With statement exit.
        """
        self._destroy()

    def _destroy(self):
        if self._dbstmnt == None:
            return

        del self._dbstmnt
        self._dbstmnt = None

    async def exec_deft(self,
                        site_id: int,
                        role_id: str,
                        func_id: str) -> "dRoleFuncRelDeleteOne":
        """
        Execute the query by setting all the inputs.

        :param site_id: int
        :param role_id: str
        :param func_id: str
        :return: Self for convenience.
        """
        self.irec.site_id = site_id
        self.irec.role_id = role_id
        self.irec.func_id = func_id

        return await self.exec()

    async def exec(self, irec: tRoleFuncRelKey = None) -> "dRoleFuncRelDeleteOne":
        """
        Execute the query, optionally passing in the input rec.

        :param irec:
        :return: Self for convenience.
        """
        if irec:
            self.irec._copy_from(irec)

        self._destroy()

        self._dbstmnt = await self._dbcon.statement("RoleFuncRelDeleteOne", self._dbcon.STMNT_TYPE_CUD)

        self._dbstmnt.sql("""delete from
  fura.RoleFuncRel
where
  site_id = :site_id and
  role_id = :role_id and
  func_id = :func_id""")

        self._dbstmnt.bind_in("site_id", self.irec.site_id, int, 4)
        self._dbstmnt.bind_in("role_id", self.irec.role_id, str, 128)
        self._dbstmnt.bind_in("func_id", self.irec.func_id, str, 128)

        await self._dbcon.execute(self._dbstmnt)

        if irec:
            irec._copy_from(self.irec)

        return self

