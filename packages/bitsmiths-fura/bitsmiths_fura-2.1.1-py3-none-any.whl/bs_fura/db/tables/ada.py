# This file was generated by mettle.genes.db.GenPy3 [ver 2.1] on Tue Feb 16 18:30:45 2021
#

import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

class tAda(mettle.io.ISerializable):

    def __init__(self,
                 site_id: int = 0,
                 site_code: str = '',
                 tm_stamp: datetime.datetime = datetime.datetime.min,
                 usr_id: str = '',
                 eausr_id: str = '',
                 role_id: str = '',
                 func_id: str = '',
                 action: str = '',
                 src: str = '',
                 reason: str = ''):
        """
        Constructor.

        :param site_id: int
        :param site_code: str
        :param tm_stamp: datetime.datetime
        :param usr_id: str
        :param eausr_id: str
        :param role_id: str
        :param func_id: str
        :param action: str
        :param src: str
        :param reason: str
        """
        self.site_id = site_id
        self.site_code = site_code
        self.tm_stamp = tm_stamp
        self.usr_id = usr_id
        self.eausr_id = eausr_id
        self.role_id = role_id
        self.func_id = func_id
        self.action = action
        self.src = src
        self.reason = reason

    def clear(self):
        """
        Clears all member variables for this database record.
        """
        self.site_id = 0
        self.site_code = ''
        self.tm_stamp = datetime.datetime.min
        self.usr_id = ''
        self.eausr_id = ''
        self.role_id = ''
        self.func_id = ''
        self.action = ''
        self.src = ''
        self.reason = ''

    def _name(self) -> str:
        """
        Name of the record.

        :return: The name.
        """
        return 'tAda'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize record to a stream.

        :param _w:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _w.write_start(_oname)
        _w.write_int32("site_id", self.site_id)
        _w.write_string("site_code", self.site_code)
        _w.write_datetime("tm_stamp", self.tm_stamp)
        _w.write_string("usr_id", self.usr_id)
        _w.write_string("eausr_id", self.eausr_id)
        _w.write_string("role_id", self.role_id)
        _w.write_string("func_id", self.func_id)
        _w.write_char("action", self.action)
        _w.write_string("src", self.src)
        _w.write_string("reason", self.reason)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
        """
        Deserialize record from a stream.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.site_id = _r.read_int32("site_id")
        self.site_code = _r.read_string("site_code")
        self.tm_stamp = _r.read_datetime("tm_stamp")
        self.usr_id = _r.read_string("usr_id")
        self.eausr_id = _r.read_string("eausr_id")
        self.role_id = _r.read_string("role_id")
        self.func_id = _r.read_string("func_id")
        self.action = _r.read_char("action")
        self.src = _r.read_string("src")
        self.reason = _r.read_string("reason")
        _r.read_end(_oname)

    def _copy_from(self, rec: "tAda"):
        """
        Copies the column from the rec into this record.

        :param rec: The source record.
        """
        self.site_id = rec.site_id
        self.site_code = rec.site_code
        self.tm_stamp = rec.tm_stamp
        self.usr_id = rec.usr_id
        self.eausr_id = rec.eausr_id
        self.role_id = rec.role_id
        self.func_id = rec.func_id
        self.action = rec.action
        self.src = rec.src
        self.reason = rec.reason

    @staticmethod
    def _cache_davs(dvc=None, for_ins: bool = False, key_only: bool = False):
        """
        Cache the DAV into the dav cache (or create one) and return it.

        :param dvc: (mettle.lib.DavCache), target cache, if None a new one is created and returned.
        :param for_ins: Davs for insert.
        :param key_only: Davs by key only, ie for delete/selectone.
        """
        if dvc is None:
            dvc = mettle.lib.DavCache()

        dvc.add_targ("site_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("site_code", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("site_code", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 32))
        dvc.add_targ("tm_stamp", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("usr_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("usr_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        dvc.add_targ("eausr_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        dvc.add_targ("role_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("role_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        dvc.add_targ("func_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("func_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        dvc.add_targ("action", mettle.lib.Dav(mettle.lib.Dav.eDavType.Min, 1))
        dvc.add_targ("action", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 1))
        dvc.add_targ("action", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("src", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        dvc.add_targ("reason", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("reason", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))

        return dvc

    def _get_davs(self, dvc=None, for_ins: bool = False, key_only: bool = False):
        tAda._cache_davs(dvc, for_ins, key_only)

    def _write_key(self, _key: None):
        """
        Write primary key columns to _key.

        :param _key:
        """

    def _read_key(self, _key: None):
        """
        Read the primary key columns from _key.

        :param _key:
        """

    def __repr__(self) -> str:
        return '<Ada [site_id:%r, site_code:%.32s, tm_stamp:%s, usr_id:%.32s, eausr_id:%.32s, role_id:%.32s, func_id:%.32s, action:%.32s, src:%.32s, reason:%.32s]>' % (
            self.site_id, self.site_code, self.tm_stamp, self.usr_id, self.eausr_id, self.role_id, self.func_id, self.action, self.src, self.reason)


    class List(list, mettle.io.ISerializable):
        """
        List Class
        """

        def _name(self) -> str:
            """
            Name of the list.

            :return: The name
            """
            return 'tAda.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list to a stream.

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
            """
            Deserialize the list from a stream.

            :param _r:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = tAda()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def __repr__(self) -> str:
            return '<tAda.List[%d]>' % (len(self))

        def _get_davs(self, dvc=None, for_ins: bool = False, key_only: bool = False):
            return tAda._cache_davs(dvc, for_ins, key_only)

