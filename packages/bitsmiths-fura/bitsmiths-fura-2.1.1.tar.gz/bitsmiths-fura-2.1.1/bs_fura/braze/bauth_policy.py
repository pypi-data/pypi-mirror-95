# This file was generated by mettle.genes.braze.GenPy3 [ver 2.1] on Tue Feb 16 18:30:45 2021
#

import datetime
import uuid
import mettle.braze
import mettle.lib

from mettle.io.iserializable import ISerializable

class bAuthPolicy(ISerializable):

    def __init__(self,
                 auth_type: str = '',
                 descr: str = '',
                 regex: str = ''):
        """
        Constructor.

        :param auth_type:
        :param descr:
        :param regex:
        """
        self.auth_type = auth_type
        self.descr = descr
        self.regex = regex

    def clear(self):
        self.auth_type = ''
        self.descr = ''
        self.regex = ''

    def _name(self) -> str:
        """
        Get the struct name.

        :return: Name of the struct
        """
        return 'bAuthPolicy'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize this struct.

        :param _w:
        :param _oname:
        """
        if not _oname:
            _oname = self._name()

        _w.write_start(_oname)
        _w.write_char("authType", self.auth_type)
        _w.write_string("descr", self.descr)
        _w.write_string("regex", self.regex)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None) -> int:
        """
        Deserialize this struct.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.auth_type = _r.read_char("authType")
        self.descr = _r.read_string("descr")
        self.regex = _r.read_string("regex")
        _r.read_end(_oname)

    @staticmethod
    def _cache_davs(dvc: mettle.lib.DavCache = None):
        """
        Cache the DAV into the dav cache (or create one) and return it.

        :param dvc: Target cache, if None a new one is created and returned.
        """
        if not dvc:
            dvc = mettle.lib.DavCache()

        dvc.add_targ("auth_type", mettle.lib.Dav(mettle.lib.Dav.eDavType.In, ['P','S','T']))

        return dvc

    def _get_davs(self, dvc=None):
        return self._cache_davs(dvc)

    def __repr__(self) -> str:
        return '<bAuthPolicy [auth_type:%.32s, descr:%.32s, regex:%.32s]>' % (
            self.auth_type, self.descr, self.regex)

    # List class
    class List(list, ISerializable):

        def _name(self) -> str:
            """
            Get list name
            """
            return 'bAuthPolicy.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None) -> int:
            """
            Deserialize the list

            :param _r:
            :param _oname:
            """
            if _oname == None:
                  _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = bAuthPolicy()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def _get_davs(self, dvc: mettle.lib.DavCache = None) -> int:
            """
            Cache the davs

            :param dvc:
            """
            return bAuthPolicy._cache_davs(dvc)

        def __repr__(self) -> str:
            return '<bAuthPolicy.List[%d]>' % (len(self))

