.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_datasets_plot_make_imbalance.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_datasets_plot_make_imbalance.py:


============================
Create an imbalanced dataset
============================

An illustration of the :func:`~imblearn.datasets.make_imbalance` function to
create an imbalanced dataset from a balanced dataset. We show the ability of
:func:`~imblearn.datasets.make_imbalance` of dealing with Pandas DataFrame.



.. image:: /auto_examples/datasets/images/sphx_glr_plot_make_imbalance_001.png
    :alt: Original set, Sampling ratio = 0.9, Sampling ratio = 0.75, Sampling ratio = 0.5, Sampling ratio = 0.25, Sampling ratio = 0.1
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    /home/glemaitre/Documents/packages/imbalanced-learn/examples/datasets/plot_make_imbalance.py:74: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      plt.show()






|


.. code-block:: default


    # Authors: Dayvid Oliveira
    #          Christos Aridas
    #          Guillaume Lemaitre <g.lemaitre58@gmail.com>
    # License: MIT

    from collections import Counter

    import pandas as pd
    import matplotlib.pyplot as plt

    from sklearn.datasets import make_moons

    from imblearn.datasets import make_imbalance

    print(__doc__)

    # Generate the dataset
    X, y = make_moons(n_samples=200, shuffle=True, noise=0.5, random_state=10)
    X = pd.DataFrame(X, columns=["feature 1", "feature 2"])

    # Two subplots, unpack the axes array immediately
    f, axs = plt.subplots(2, 3)

    axs = [a for ax in axs for a in ax]

    X.plot.scatter(
        x="feature 1",
        y="feature 2",
        c=y,
        ax=axs[0],
        colormap="viridis",
        colorbar=False,
    )
    axs[0].set_title("Original set")


    def ratio_func(y, multiplier, minority_class):
        target_stats = Counter(y)
        return {minority_class: int(multiplier * target_stats[minority_class])}


    multipliers = [0.9, 0.75, 0.5, 0.25, 0.1]
    for i, multiplier in enumerate(multipliers, start=1):
        ax = axs[i]

        X_, y_ = make_imbalance(
            X,
            y,
            sampling_strategy=ratio_func,
            **{"multiplier": multiplier, "minority_class": 1},
        )
        X_.plot.scatter(
            x="feature 1",
            y="feature 2",
            c=y_,
            ax=ax,
            colormap="viridis",
            colorbar=False,
        )
        ax.set_title(f"Sampling ratio = {multiplier}")

    plt.tight_layout()
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.738 seconds)

**Estimated memory usage:**  8 MB


.. _sphx_glr_download_auto_examples_datasets_plot_make_imbalance.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_make_imbalance.py <plot_make_imbalance.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_make_imbalance.ipynb <plot_make_imbalance.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
