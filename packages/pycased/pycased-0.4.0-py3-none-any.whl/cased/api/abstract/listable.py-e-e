from cased.api.abstract import CasedAPIResource
from cased.api.abstract.results_list import ResultsList
from cased.http import Requestor


class ListableResource(CasedAPIResource):
    @classmethod
    def list(cls, **params):
        requestor = Requestor(**params)
        url = cls.class_url() + "/"
        data = {}

        limit = params.get("limit") or 25
        page = params.get("page", None)
        search = params.get("search", None)
        variables = params.get("variables", None)

        if page:
            data["page"] = page

        if search:
            data["phrase"] = search

        data["per_page"] = limit

        if variables:
            if not isinstance(variables, dict):
                raise TypeError("`variables` parameter must of type `dict`")

            for key, value in variables.items():
                param_key = "variables[{}]".format(key)
                data[param_key] = value

        response = requestor.request("get", url, data=data)
        return ResultsList(response, cls.resource_class())
